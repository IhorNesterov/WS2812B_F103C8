
build/debug/WS2812B_F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003530  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800363c  0800363c  0000463c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003770  08003770  00004770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003774  08003774  00004774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08003778  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000024a4  20000014  0800378c  00005014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200024b8  0800378c  000054b8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
  9 .comment      00000039  00000000  00000000  0000503d  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001319e  00000000  00000000  00005076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c11  00000000  00000000  00018214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00009127  00000000  00000000  0001ae25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ea8  00000000  00000000  00023f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000b11  00000000  00000000  00024df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010f60  00000000  00000000  00025909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0000452b  00000000  00000000  00036869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000025dc  00000000  00000000  0003ad94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000148  00000000  00000000  0003d370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__aeabi_frsub>:
 800010c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000110:	e002      	b.n	8000118 <__addsf3>
 8000112:	bf00      	nop

08000114 <__aeabi_fsub>:
 8000114:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000118 <__addsf3>:
 8000118:	0042      	lsls	r2, r0, #1
 800011a:	bf1f      	itttt	ne
 800011c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000120:	ea92 0f03 	teqne	r2, r3
 8000124:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000128:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800012c:	d06a      	beq.n	8000204 <__addsf3+0xec>
 800012e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000132:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000136:	bfc1      	itttt	gt
 8000138:	18d2      	addgt	r2, r2, r3
 800013a:	4041      	eorgt	r1, r0
 800013c:	4048      	eorgt	r0, r1
 800013e:	4041      	eorgt	r1, r0
 8000140:	bfb8      	it	lt
 8000142:	425b      	neglt	r3, r3
 8000144:	2b19      	cmp	r3, #25
 8000146:	bf88      	it	hi
 8000148:	4770      	bxhi	lr
 800014a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800014e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000152:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000156:	bf18      	it	ne
 8000158:	4240      	negne	r0, r0
 800015a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800015e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000162:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000166:	bf18      	it	ne
 8000168:	4249      	negne	r1, r1
 800016a:	ea92 0f03 	teq	r2, r3
 800016e:	d03f      	beq.n	80001f0 <__addsf3+0xd8>
 8000170:	f1a2 0201 	sub.w	r2, r2, #1
 8000174:	fa41 fc03 	asr.w	ip, r1, r3
 8000178:	eb10 000c 	adds.w	r0, r0, ip
 800017c:	f1c3 0320 	rsb	r3, r3, #32
 8000180:	fa01 f103 	lsl.w	r1, r1, r3
 8000184:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000188:	d502      	bpl.n	8000190 <__addsf3+0x78>
 800018a:	4249      	negs	r1, r1
 800018c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000190:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000194:	d313      	bcc.n	80001be <__addsf3+0xa6>
 8000196:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800019a:	d306      	bcc.n	80001aa <__addsf3+0x92>
 800019c:	0840      	lsrs	r0, r0, #1
 800019e:	ea4f 0131 	mov.w	r1, r1, rrx
 80001a2:	f102 0201 	add.w	r2, r2, #1
 80001a6:	2afe      	cmp	r2, #254	@ 0xfe
 80001a8:	d251      	bcs.n	800024e <__addsf3+0x136>
 80001aa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001b2:	bf08      	it	eq
 80001b4:	f020 0001 	biceq.w	r0, r0, #1
 80001b8:	ea40 0003 	orr.w	r0, r0, r3
 80001bc:	4770      	bx	lr
 80001be:	0049      	lsls	r1, r1, #1
 80001c0:	eb40 0000 	adc.w	r0, r0, r0
 80001c4:	3a01      	subs	r2, #1
 80001c6:	bf28      	it	cs
 80001c8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80001cc:	d2ed      	bcs.n	80001aa <__addsf3+0x92>
 80001ce:	fab0 fc80 	clz	ip, r0
 80001d2:	f1ac 0c08 	sub.w	ip, ip, #8
 80001d6:	ebb2 020c 	subs.w	r2, r2, ip
 80001da:	fa00 f00c 	lsl.w	r0, r0, ip
 80001de:	bfaa      	itet	ge
 80001e0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80001e4:	4252      	neglt	r2, r2
 80001e6:	4318      	orrge	r0, r3
 80001e8:	bfbc      	itt	lt
 80001ea:	40d0      	lsrlt	r0, r2
 80001ec:	4318      	orrlt	r0, r3
 80001ee:	4770      	bx	lr
 80001f0:	f092 0f00 	teq	r2, #0
 80001f4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80001f8:	bf06      	itte	eq
 80001fa:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80001fe:	3201      	addeq	r2, #1
 8000200:	3b01      	subne	r3, #1
 8000202:	e7b5      	b.n	8000170 <__addsf3+0x58>
 8000204:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000208:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800020c:	bf18      	it	ne
 800020e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000212:	d021      	beq.n	8000258 <__addsf3+0x140>
 8000214:	ea92 0f03 	teq	r2, r3
 8000218:	d004      	beq.n	8000224 <__addsf3+0x10c>
 800021a:	f092 0f00 	teq	r2, #0
 800021e:	bf08      	it	eq
 8000220:	4608      	moveq	r0, r1
 8000222:	4770      	bx	lr
 8000224:	ea90 0f01 	teq	r0, r1
 8000228:	bf1c      	itt	ne
 800022a:	2000      	movne	r0, #0
 800022c:	4770      	bxne	lr
 800022e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000232:	d104      	bne.n	800023e <__addsf3+0x126>
 8000234:	0040      	lsls	r0, r0, #1
 8000236:	bf28      	it	cs
 8000238:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800023c:	4770      	bx	lr
 800023e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000242:	bf3c      	itt	cc
 8000244:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000248:	4770      	bxcc	lr
 800024a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800024e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000252:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000256:	4770      	bx	lr
 8000258:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800025c:	bf16      	itet	ne
 800025e:	4608      	movne	r0, r1
 8000260:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000264:	4601      	movne	r1, r0
 8000266:	0242      	lsls	r2, r0, #9
 8000268:	bf06      	itte	eq
 800026a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800026e:	ea90 0f01 	teqeq	r0, r1
 8000272:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000276:	4770      	bx	lr

08000278 <__aeabi_ui2f>:
 8000278:	f04f 0300 	mov.w	r3, #0
 800027c:	e004      	b.n	8000288 <__aeabi_i2f+0x8>
 800027e:	bf00      	nop

08000280 <__aeabi_i2f>:
 8000280:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000284:	bf48      	it	mi
 8000286:	4240      	negmi	r0, r0
 8000288:	ea5f 0c00 	movs.w	ip, r0
 800028c:	bf08      	it	eq
 800028e:	4770      	bxeq	lr
 8000290:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000294:	4601      	mov	r1, r0
 8000296:	f04f 0000 	mov.w	r0, #0
 800029a:	e01c      	b.n	80002d6 <__aeabi_l2f+0x2a>

0800029c <__aeabi_ul2f>:
 800029c:	ea50 0201 	orrs.w	r2, r0, r1
 80002a0:	bf08      	it	eq
 80002a2:	4770      	bxeq	lr
 80002a4:	f04f 0300 	mov.w	r3, #0
 80002a8:	e00a      	b.n	80002c0 <__aeabi_l2f+0x14>
 80002aa:	bf00      	nop

080002ac <__aeabi_l2f>:
 80002ac:	ea50 0201 	orrs.w	r2, r0, r1
 80002b0:	bf08      	it	eq
 80002b2:	4770      	bxeq	lr
 80002b4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002b8:	d502      	bpl.n	80002c0 <__aeabi_l2f+0x14>
 80002ba:	4240      	negs	r0, r0
 80002bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c0:	ea5f 0c01 	movs.w	ip, r1
 80002c4:	bf02      	ittt	eq
 80002c6:	4684      	moveq	ip, r0
 80002c8:	4601      	moveq	r1, r0
 80002ca:	2000      	moveq	r0, #0
 80002cc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80002d0:	bf08      	it	eq
 80002d2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80002d6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80002da:	fabc f28c 	clz	r2, ip
 80002de:	3a08      	subs	r2, #8
 80002e0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80002e4:	db10      	blt.n	8000308 <__aeabi_l2f+0x5c>
 80002e6:	fa01 fc02 	lsl.w	ip, r1, r2
 80002ea:	4463      	add	r3, ip
 80002ec:	fa00 fc02 	lsl.w	ip, r0, r2
 80002f0:	f1c2 0220 	rsb	r2, r2, #32
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f8:	fa20 f202 	lsr.w	r2, r0, r2
 80002fc:	eb43 0002 	adc.w	r0, r3, r2
 8000300:	bf08      	it	eq
 8000302:	f020 0001 	biceq.w	r0, r0, #1
 8000306:	4770      	bx	lr
 8000308:	f102 0220 	add.w	r2, r2, #32
 800030c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000310:	f1c2 0220 	rsb	r2, r2, #32
 8000314:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000318:	fa21 f202 	lsr.w	r2, r1, r2
 800031c:	eb43 0002 	adc.w	r0, r3, r2
 8000320:	bf08      	it	eq
 8000322:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000326:	4770      	bx	lr

08000328 <__aeabi_fmul>:
 8000328:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800032c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000330:	bf1e      	ittt	ne
 8000332:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000336:	ea92 0f0c 	teqne	r2, ip
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d06f      	beq.n	8000420 <__aeabi_fmul+0xf8>
 8000340:	441a      	add	r2, r3
 8000342:	ea80 0c01 	eor.w	ip, r0, r1
 8000346:	0240      	lsls	r0, r0, #9
 8000348:	bf18      	it	ne
 800034a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800034e:	d01e      	beq.n	800038e <__aeabi_fmul+0x66>
 8000350:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000354:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000358:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800035c:	fba0 3101 	umull	r3, r1, r0, r1
 8000360:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000364:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000368:	bf3e      	ittt	cc
 800036a:	0049      	lslcc	r1, r1, #1
 800036c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000370:	005b      	lslcc	r3, r3, #1
 8000372:	ea40 0001 	orr.w	r0, r0, r1
 8000376:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800037a:	2afd      	cmp	r2, #253	@ 0xfd
 800037c:	d81d      	bhi.n	80003ba <__aeabi_fmul+0x92>
 800037e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000382:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000386:	bf08      	it	eq
 8000388:	f020 0001 	biceq.w	r0, r0, #1
 800038c:	4770      	bx	lr
 800038e:	f090 0f00 	teq	r0, #0
 8000392:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000396:	bf08      	it	eq
 8000398:	0249      	lsleq	r1, r1, #9
 800039a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800039e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003a2:	3a7f      	subs	r2, #127	@ 0x7f
 80003a4:	bfc2      	ittt	gt
 80003a6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003aa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ae:	4770      	bxgt	lr
 80003b0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003b4:	f04f 0300 	mov.w	r3, #0
 80003b8:	3a01      	subs	r2, #1
 80003ba:	dc5d      	bgt.n	8000478 <__aeabi_fmul+0x150>
 80003bc:	f112 0f19 	cmn.w	r2, #25
 80003c0:	bfdc      	itt	le
 80003c2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80003c6:	4770      	bxle	lr
 80003c8:	f1c2 0200 	rsb	r2, r2, #0
 80003cc:	0041      	lsls	r1, r0, #1
 80003ce:	fa21 f102 	lsr.w	r1, r1, r2
 80003d2:	f1c2 0220 	rsb	r2, r2, #32
 80003d6:	fa00 fc02 	lsl.w	ip, r0, r2
 80003da:	ea5f 0031 	movs.w	r0, r1, rrx
 80003de:	f140 0000 	adc.w	r0, r0, #0
 80003e2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80003e6:	bf08      	it	eq
 80003e8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003ec:	4770      	bx	lr
 80003ee:	f092 0f00 	teq	r2, #0
 80003f2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80003f6:	bf02      	ittt	eq
 80003f8:	0040      	lsleq	r0, r0, #1
 80003fa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80003fe:	3a01      	subeq	r2, #1
 8000400:	d0f9      	beq.n	80003f6 <__aeabi_fmul+0xce>
 8000402:	ea40 000c 	orr.w	r0, r0, ip
 8000406:	f093 0f00 	teq	r3, #0
 800040a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800040e:	bf02      	ittt	eq
 8000410:	0049      	lsleq	r1, r1, #1
 8000412:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000416:	3b01      	subeq	r3, #1
 8000418:	d0f9      	beq.n	800040e <__aeabi_fmul+0xe6>
 800041a:	ea41 010c 	orr.w	r1, r1, ip
 800041e:	e78f      	b.n	8000340 <__aeabi_fmul+0x18>
 8000420:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000424:	ea92 0f0c 	teq	r2, ip
 8000428:	bf18      	it	ne
 800042a:	ea93 0f0c 	teqne	r3, ip
 800042e:	d00a      	beq.n	8000446 <__aeabi_fmul+0x11e>
 8000430:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000434:	bf18      	it	ne
 8000436:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800043a:	d1d8      	bne.n	80003ee <__aeabi_fmul+0xc6>
 800043c:	ea80 0001 	eor.w	r0, r0, r1
 8000440:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000444:	4770      	bx	lr
 8000446:	f090 0f00 	teq	r0, #0
 800044a:	bf17      	itett	ne
 800044c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000450:	4608      	moveq	r0, r1
 8000452:	f091 0f00 	teqne	r1, #0
 8000456:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800045a:	d014      	beq.n	8000486 <__aeabi_fmul+0x15e>
 800045c:	ea92 0f0c 	teq	r2, ip
 8000460:	d101      	bne.n	8000466 <__aeabi_fmul+0x13e>
 8000462:	0242      	lsls	r2, r0, #9
 8000464:	d10f      	bne.n	8000486 <__aeabi_fmul+0x15e>
 8000466:	ea93 0f0c 	teq	r3, ip
 800046a:	d103      	bne.n	8000474 <__aeabi_fmul+0x14c>
 800046c:	024b      	lsls	r3, r1, #9
 800046e:	bf18      	it	ne
 8000470:	4608      	movne	r0, r1
 8000472:	d108      	bne.n	8000486 <__aeabi_fmul+0x15e>
 8000474:	ea80 0001 	eor.w	r0, r0, r1
 8000478:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800047c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000480:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000484:	4770      	bx	lr
 8000486:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800048a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800048e:	4770      	bx	lr

08000490 <__aeabi_fdiv>:
 8000490:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000494:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000498:	bf1e      	ittt	ne
 800049a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800049e:	ea92 0f0c 	teqne	r2, ip
 80004a2:	ea93 0f0c 	teqne	r3, ip
 80004a6:	d069      	beq.n	800057c <__aeabi_fdiv+0xec>
 80004a8:	eba2 0203 	sub.w	r2, r2, r3
 80004ac:	ea80 0c01 	eor.w	ip, r0, r1
 80004b0:	0249      	lsls	r1, r1, #9
 80004b2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004b6:	d037      	beq.n	8000528 <__aeabi_fdiv+0x98>
 80004b8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004bc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80004c0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80004c4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80004c8:	428b      	cmp	r3, r1
 80004ca:	bf38      	it	cc
 80004cc:	005b      	lslcc	r3, r3, #1
 80004ce:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80004d2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80004d6:	428b      	cmp	r3, r1
 80004d8:	bf24      	itt	cs
 80004da:	1a5b      	subcs	r3, r3, r1
 80004dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80004e0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80004e4:	bf24      	itt	cs
 80004e6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80004ea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80004ee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80004f2:	bf24      	itt	cs
 80004f4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80004f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80004fc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000500:	bf24      	itt	cs
 8000502:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000506:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800050a:	011b      	lsls	r3, r3, #4
 800050c:	bf18      	it	ne
 800050e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000512:	d1e0      	bne.n	80004d6 <__aeabi_fdiv+0x46>
 8000514:	2afd      	cmp	r2, #253	@ 0xfd
 8000516:	f63f af50 	bhi.w	80003ba <__aeabi_fmul+0x92>
 800051a:	428b      	cmp	r3, r1
 800051c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000520:	bf08      	it	eq
 8000522:	f020 0001 	biceq.w	r0, r0, #1
 8000526:	4770      	bx	lr
 8000528:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800052c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000530:	327f      	adds	r2, #127	@ 0x7f
 8000532:	bfc2      	ittt	gt
 8000534:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000538:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800053c:	4770      	bxgt	lr
 800053e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000542:	f04f 0300 	mov.w	r3, #0
 8000546:	3a01      	subs	r2, #1
 8000548:	e737      	b.n	80003ba <__aeabi_fmul+0x92>
 800054a:	f092 0f00 	teq	r2, #0
 800054e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000552:	bf02      	ittt	eq
 8000554:	0040      	lsleq	r0, r0, #1
 8000556:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800055a:	3a01      	subeq	r2, #1
 800055c:	d0f9      	beq.n	8000552 <__aeabi_fdiv+0xc2>
 800055e:	ea40 000c 	orr.w	r0, r0, ip
 8000562:	f093 0f00 	teq	r3, #0
 8000566:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800056a:	bf02      	ittt	eq
 800056c:	0049      	lsleq	r1, r1, #1
 800056e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000572:	3b01      	subeq	r3, #1
 8000574:	d0f9      	beq.n	800056a <__aeabi_fdiv+0xda>
 8000576:	ea41 010c 	orr.w	r1, r1, ip
 800057a:	e795      	b.n	80004a8 <__aeabi_fdiv+0x18>
 800057c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000580:	ea92 0f0c 	teq	r2, ip
 8000584:	d108      	bne.n	8000598 <__aeabi_fdiv+0x108>
 8000586:	0242      	lsls	r2, r0, #9
 8000588:	f47f af7d 	bne.w	8000486 <__aeabi_fmul+0x15e>
 800058c:	ea93 0f0c 	teq	r3, ip
 8000590:	f47f af70 	bne.w	8000474 <__aeabi_fmul+0x14c>
 8000594:	4608      	mov	r0, r1
 8000596:	e776      	b.n	8000486 <__aeabi_fmul+0x15e>
 8000598:	ea93 0f0c 	teq	r3, ip
 800059c:	d104      	bne.n	80005a8 <__aeabi_fdiv+0x118>
 800059e:	024b      	lsls	r3, r1, #9
 80005a0:	f43f af4c 	beq.w	800043c <__aeabi_fmul+0x114>
 80005a4:	4608      	mov	r0, r1
 80005a6:	e76e      	b.n	8000486 <__aeabi_fmul+0x15e>
 80005a8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ac:	bf18      	it	ne
 80005ae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005b2:	d1ca      	bne.n	800054a <__aeabi_fdiv+0xba>
 80005b4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005b8:	f47f af5c 	bne.w	8000474 <__aeabi_fmul+0x14c>
 80005bc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80005c0:	f47f af3c 	bne.w	800043c <__aeabi_fmul+0x114>
 80005c4:	e75f      	b.n	8000486 <__aeabi_fmul+0x15e>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2uiz>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	d20e      	bcs.n	80005ea <__aeabi_f2uiz+0x22>
 80005cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80005d0:	d30b      	bcc.n	80005ea <__aeabi_f2uiz+0x22>
 80005d2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80005d6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005da:	d409      	bmi.n	80005f0 <__aeabi_f2uiz+0x28>
 80005dc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80005e4:	fa23 f002 	lsr.w	r0, r3, r2
 80005e8:	4770      	bx	lr
 80005ea:	f04f 0000 	mov.w	r0, #0
 80005ee:	4770      	bx	lr
 80005f0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80005f4:	d101      	bne.n	80005fa <__aeabi_f2uiz+0x32>
 80005f6:	0242      	lsls	r2, r0, #9
 80005f8:	d102      	bne.n	8000600 <__aeabi_f2uiz+0x38>
 80005fa:	f04f 30ff 	mov.w	r0, #4294967295
 80005fe:	4770      	bx	lr
 8000600:	f04f 0000 	mov.w	r0, #0
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <__do_global_dtors_aux>:
 8000608:	b510      	push	{r4, lr}
 800060a:	4c05      	ldr	r4, [pc, #20]	@ (8000620 <__do_global_dtors_aux+0x18>)
 800060c:	7823      	ldrb	r3, [r4, #0]
 800060e:	b933      	cbnz	r3, 800061e <__do_global_dtors_aux+0x16>
 8000610:	4b04      	ldr	r3, [pc, #16]	@ (8000624 <__do_global_dtors_aux+0x1c>)
 8000612:	b113      	cbz	r3, 800061a <__do_global_dtors_aux+0x12>
 8000614:	4804      	ldr	r0, [pc, #16]	@ (8000628 <__do_global_dtors_aux+0x20>)
 8000616:	f3af 8000 	nop.w
 800061a:	2301      	movs	r3, #1
 800061c:	7023      	strb	r3, [r4, #0]
 800061e:	bd10      	pop	{r4, pc}
 8000620:	20000014 	.word	0x20000014
 8000624:	00000000 	.word	0x00000000
 8000628:	08003624 	.word	0x08003624

0800062c <frame_dummy>:
 800062c:	b508      	push	{r3, lr}
 800062e:	4b03      	ldr	r3, [pc, #12]	@ (800063c <frame_dummy+0x10>)
 8000630:	b11b      	cbz	r3, 800063a <frame_dummy+0xe>
 8000632:	4903      	ldr	r1, [pc, #12]	@ (8000640 <frame_dummy+0x14>)
 8000634:	4803      	ldr	r0, [pc, #12]	@ (8000644 <frame_dummy+0x18>)
 8000636:	f3af 8000 	nop.w
 800063a:	bd08      	pop	{r3, pc}
 800063c:	00000000 	.word	0x00000000
 8000640:	20000018 	.word	0x20000018
 8000644:	08003624 	.word	0x08003624

08000648 <NOS_PixelColor_SetColor>:
#include "NOS_BaseColors.h"

void NOS_PixelColor_SetColor(PixelColor* color,uint8_t R,uint8_t G,uint8_t B)
{
    color->R = R;
 8000648:	7001      	strb	r1, [r0, #0]
    color->G = G;
 800064a:	7042      	strb	r2, [r0, #1]
    color->B = B;
 800064c:	7083      	strb	r3, [r0, #2]
}
 800064e:	4770      	bx	lr

08000650 <NOS_GetBaseColor>:

PixelColor NOS_GetBaseColor(NOS_BaseColors color)
{
 8000650:	b500      	push	{lr}
 8000652:	b083      	sub	sp, #12
    PixelColor result = {0,0,0};
 8000654:	2300      	movs	r3, #0
 8000656:	f88d 3000 	strb.w	r3, [sp]
 800065a:	f88d 3001 	strb.w	r3, [sp, #1]
 800065e:	f88d 3002 	strb.w	r3, [sp, #2]
    
    switch(color)
 8000662:	280b      	cmp	r0, #11
 8000664:	d80d      	bhi.n	8000682 <NOS_GetBaseColor+0x32>
 8000666:	e8df f000 	tbb	[pc, r0]
 800066a:	2206      	.short	0x2206
 800066c:	3e373029 	.word	0x3e373029
 8000670:	5a534c45 	.word	0x5a534c45
 8000674:	6861      	.short	0x6861
    {
        case BLUE:
            NOS_PixelColor_SetColor(&result,0x00,0x00,0xFF);
 8000676:	23ff      	movs	r3, #255	@ 0xff
 8000678:	2200      	movs	r2, #0
 800067a:	4611      	mov	r1, r2
 800067c:	4668      	mov	r0, sp
 800067e:	f7ff ffe3 	bl	8000648 <NOS_PixelColor_SetColor>
        case VIOLET:
            NOS_PixelColor_SetColor(&result,0x7F,0x00,0xFF);
        break;
        
    }
    return result;
 8000682:	9b00      	ldr	r3, [sp, #0]
 8000684:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000688:	0c1b      	lsrs	r3, r3, #16
 800068a:	f88d 3006 	strb.w	r3, [sp, #6]
 800068e:	2000      	movs	r0, #0
 8000690:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000694:	f363 0007 	bfi	r0, r3, #0, #8
 8000698:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800069c:	f363 200f 	bfi	r0, r3, #8, #8
 80006a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80006a4:	f363 4017 	bfi	r0, r3, #16, #8
 80006a8:	b003      	add	sp, #12
 80006aa:	f85d fb04 	ldr.w	pc, [sp], #4
            NOS_PixelColor_SetColor(&result,0x00,0x7F,0xFF);
 80006ae:	23ff      	movs	r3, #255	@ 0xff
 80006b0:	227f      	movs	r2, #127	@ 0x7f
 80006b2:	2100      	movs	r1, #0
 80006b4:	4668      	mov	r0, sp
 80006b6:	f7ff ffc7 	bl	8000648 <NOS_PixelColor_SetColor>
        break;
 80006ba:	e7e2      	b.n	8000682 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x00,0xFF,0xFF);
 80006bc:	23ff      	movs	r3, #255	@ 0xff
 80006be:	461a      	mov	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	4668      	mov	r0, sp
 80006c4:	f7ff ffc0 	bl	8000648 <NOS_PixelColor_SetColor>
        break;
 80006c8:	e7db      	b.n	8000682 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x00,0xFF,0x7F);
 80006ca:	237f      	movs	r3, #127	@ 0x7f
 80006cc:	22ff      	movs	r2, #255	@ 0xff
 80006ce:	2100      	movs	r1, #0
 80006d0:	4668      	mov	r0, sp
 80006d2:	f7ff ffb9 	bl	8000648 <NOS_PixelColor_SetColor>
        break;
 80006d6:	e7d4      	b.n	8000682 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x00,0xFF,0x00);
 80006d8:	2300      	movs	r3, #0
 80006da:	22ff      	movs	r2, #255	@ 0xff
 80006dc:	4619      	mov	r1, r3
 80006de:	4668      	mov	r0, sp
 80006e0:	f7ff ffb2 	bl	8000648 <NOS_PixelColor_SetColor>
        break;
 80006e4:	e7cd      	b.n	8000682 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x7F,0xFF,0x00);
 80006e6:	2300      	movs	r3, #0
 80006e8:	22ff      	movs	r2, #255	@ 0xff
 80006ea:	217f      	movs	r1, #127	@ 0x7f
 80006ec:	4668      	mov	r0, sp
 80006ee:	f7ff ffab 	bl	8000648 <NOS_PixelColor_SetColor>
        break;
 80006f2:	e7c6      	b.n	8000682 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0xFF,0x00);
 80006f4:	2300      	movs	r3, #0
 80006f6:	22ff      	movs	r2, #255	@ 0xff
 80006f8:	4611      	mov	r1, r2
 80006fa:	4668      	mov	r0, sp
 80006fc:	f7ff ffa4 	bl	8000648 <NOS_PixelColor_SetColor>
        break;
 8000700:	e7bf      	b.n	8000682 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0x7F,0x00);
 8000702:	2300      	movs	r3, #0
 8000704:	227f      	movs	r2, #127	@ 0x7f
 8000706:	21ff      	movs	r1, #255	@ 0xff
 8000708:	4668      	mov	r0, sp
 800070a:	f7ff ff9d 	bl	8000648 <NOS_PixelColor_SetColor>
        break;
 800070e:	e7b8      	b.n	8000682 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0x00,0x00);
 8000710:	2300      	movs	r3, #0
 8000712:	461a      	mov	r2, r3
 8000714:	21ff      	movs	r1, #255	@ 0xff
 8000716:	4668      	mov	r0, sp
 8000718:	f7ff ff96 	bl	8000648 <NOS_PixelColor_SetColor>
        break;
 800071c:	e7b1      	b.n	8000682 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0x00,0x7F);
 800071e:	237f      	movs	r3, #127	@ 0x7f
 8000720:	2200      	movs	r2, #0
 8000722:	21ff      	movs	r1, #255	@ 0xff
 8000724:	4668      	mov	r0, sp
 8000726:	f7ff ff8f 	bl	8000648 <NOS_PixelColor_SetColor>
        break;
 800072a:	e7aa      	b.n	8000682 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0xFF,0x00,0xFF);
 800072c:	23ff      	movs	r3, #255	@ 0xff
 800072e:	2200      	movs	r2, #0
 8000730:	4619      	mov	r1, r3
 8000732:	4668      	mov	r0, sp
 8000734:	f7ff ff88 	bl	8000648 <NOS_PixelColor_SetColor>
        break;
 8000738:	e7a3      	b.n	8000682 <NOS_GetBaseColor+0x32>
            NOS_PixelColor_SetColor(&result,0x7F,0x00,0xFF);
 800073a:	23ff      	movs	r3, #255	@ 0xff
 800073c:	2200      	movs	r2, #0
 800073e:	217f      	movs	r1, #127	@ 0x7f
 8000740:	4668      	mov	r0, sp
 8000742:	f7ff ff81 	bl	8000648 <NOS_PixelColor_SetColor>
        break;
 8000746:	e79c      	b.n	8000682 <NOS_GetBaseColor+0x32>

08000748 <NOS_Math_GetSinValue>:
}

int NOS_Math_GetSinValue(SinValue* value)
{
    return value->value;
}
 8000748:	6800      	ldr	r0, [r0, #0]
 800074a:	4770      	bx	lr

0800074c <NOS_Math_SinValue_Handler>:

void NOS_Math_SinValue_Handler(SinValue* value)
{
    if(value->rise)
 800074c:	7c03      	ldrb	r3, [r0, #16]
 800074e:	b163      	cbz	r3, 800076a <NOS_Math_SinValue_Handler+0x1e>
    {
        value->value += value->increment;
 8000750:	6803      	ldr	r3, [r0, #0]
 8000752:	68c2      	ldr	r2, [r0, #12]
 8000754:	4413      	add	r3, r2
 8000756:	6003      	str	r3, [r0, #0]
        if(value->value > value->maxValue)
 8000758:	6882      	ldr	r2, [r0, #8]
 800075a:	4293      	cmp	r3, r2
 800075c:	dd13      	ble.n	8000786 <NOS_Math_SinValue_Handler+0x3a>
        {
            value->value = value->maxValue;
 800075e:	6002      	str	r2, [r0, #0]
            value->rise = false;
 8000760:	2300      	movs	r3, #0
 8000762:	7403      	strb	r3, [r0, #16]
            value->fall = true;
 8000764:	2301      	movs	r3, #1
 8000766:	7443      	strb	r3, [r0, #17]
 8000768:	4770      	bx	lr
        }
    }
    else if(value->fall)
 800076a:	7c43      	ldrb	r3, [r0, #17]
 800076c:	b15b      	cbz	r3, 8000786 <NOS_Math_SinValue_Handler+0x3a>
    {
        value->value -= value->increment;
 800076e:	6803      	ldr	r3, [r0, #0]
 8000770:	68c2      	ldr	r2, [r0, #12]
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	6003      	str	r3, [r0, #0]
        if(value->value < value->minValue)
 8000776:	6842      	ldr	r2, [r0, #4]
 8000778:	4293      	cmp	r3, r2
 800077a:	da04      	bge.n	8000786 <NOS_Math_SinValue_Handler+0x3a>
        {
            value->value = value->minValue;
 800077c:	6002      	str	r2, [r0, #0]
            value->fall = false;
 800077e:	2300      	movs	r3, #0
 8000780:	7443      	strb	r3, [r0, #17]
            value->rise = true;
 8000782:	2301      	movs	r3, #1
 8000784:	7403      	strb	r3, [r0, #16]
        }
    }
}
 8000786:	4770      	bx	lr

08000788 <NOS_Math_SinValue_Init>:

void NOS_Math_SinValue_Init(SinValue* value,int minValue,int maxValue,int increment)
{
    value->value = minValue;
 8000788:	6001      	str	r1, [r0, #0]
    value->minValue = minValue;
 800078a:	6041      	str	r1, [r0, #4]
    value->maxValue = maxValue;
 800078c:	6082      	str	r2, [r0, #8]
    value->rise = true;
 800078e:	2201      	movs	r2, #1
 8000790:	7402      	strb	r2, [r0, #16]
    value->fall = false;
 8000792:	2200      	movs	r2, #0
 8000794:	7442      	strb	r2, [r0, #17]
    value->increment = increment;
 8000796:	60c3      	str	r3, [r0, #12]
 8000798:	4770      	bx	lr

0800079a <NOS_Strip_UART_ParseCommand>:
        }
}
*/

bool NOS_Strip_UART_ParseCommand(WS2812B_Strip* strip,UART_Message* message)
{
 800079a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800079e:	b08f      	sub	sp, #60	@ 0x3c
 80007a0:	4605      	mov	r5, r0
 80007a2:	460c      	mov	r4, r1
    int currPos = 0;
    NOS_Short tempShort;
    
    switch (message->command.data)
 80007a4:	68cb      	ldr	r3, [r1, #12]
 80007a6:	2b50      	cmp	r3, #80	@ 0x50
 80007a8:	d003      	beq.n	80007b2 <NOS_Strip_UART_ParseCommand+0x18>
 80007aa:	2b51      	cmp	r3, #81	@ 0x51
 80007ac:	d050      	beq.n	8000850 <NOS_Strip_UART_ParseCommand+0xb6>
    default:

        break;
    }

    return false;
 80007ae:	2000      	movs	r0, #0
 80007b0:	e04b      	b.n	800084a <NOS_Strip_UART_ParseCommand+0xb0>
            tempShort.bytes[1] = message->data[currPos++];
 80007b2:	7c0b      	ldrb	r3, [r1, #16]
 80007b4:	f04f 0c00 	mov.w	ip, #0
 80007b8:	f363 2c0f 	bfi	ip, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 80007bc:	7c4b      	ldrb	r3, [r1, #17]
 80007be:	f363 0c07 	bfi	ip, r3, #0, #8
            uint16_t pos = tempShort.data;
 80007c2:	fa1f f78c 	uxth.w	r7, ip
            tempShort.bytes[1] = message->data[currPos++];
 80007c6:	7c8b      	ldrb	r3, [r1, #18]
 80007c8:	f363 2c0f 	bfi	ip, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 80007cc:	7ccb      	ldrb	r3, [r1, #19]
 80007ce:	f363 0c07 	bfi	ip, r3, #0, #8
            uint16_t speed = tempShort.data;
 80007d2:	fa1f f88c 	uxth.w	r8, ip
            tempShort.bytes[1] = message->data[currPos++];
 80007d6:	7d0b      	ldrb	r3, [r1, #20]
 80007d8:	f363 2c0f 	bfi	ip, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 80007dc:	7d4b      	ldrb	r3, [r1, #21]
 80007de:	f363 0c07 	bfi	ip, r3, #0, #8
            uint16_t step = tempShort.data;
 80007e2:	fa1f f98c 	uxth.w	r9, ip
            tempShort.bytes[1] = message->data[currPos++];
 80007e6:	7d8b      	ldrb	r3, [r1, #22]
 80007e8:	f363 2c0f 	bfi	ip, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 80007ec:	7dcb      	ldrb	r3, [r1, #23]
 80007ee:	f363 0c07 	bfi	ip, r3, #0, #8
            uint16_t min = tempShort.data;
 80007f2:	fa1f fa8c 	uxth.w	sl, ip
            tempShort.bytes[1] = message->data[currPos++];
 80007f6:	7e0b      	ldrb	r3, [r1, #24]
 80007f8:	f363 2c0f 	bfi	ip, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 80007fc:	7e4b      	ldrb	r3, [r1, #25]
 80007fe:	f363 0c07 	bfi	ip, r3, #0, #8
            uint16_t max = tempShort.data;
 8000802:	fa1f fb8c 	uxth.w	fp, ip
            Effect_Struct tempEffect = {0};
 8000806:	ae06      	add	r6, sp, #24
 8000808:	2420      	movs	r4, #32
 800080a:	4622      	mov	r2, r4
 800080c:	2100      	movs	r1, #0
 800080e:	4630      	mov	r0, r6
 8000810:	f002 fedb 	bl	80035ca <memset>
            tempEffect.effectId = EFFECT_BREATHE_ID;
 8000814:	f88d 4037 	strb.w	r4, [sp, #55]	@ 0x37
            NOS_WS2812B_Strip_Effect_Breathe_Init(&tempEffect,speed,step,min,max);
 8000818:	f8cd b000 	str.w	fp, [sp]
 800081c:	4653      	mov	r3, sl
 800081e:	464a      	mov	r2, r9
 8000820:	4641      	mov	r1, r8
 8000822:	4630      	mov	r0, r6
 8000824:	f000 f9e5 	bl	8000bf2 <NOS_WS2812B_Strip_Effect_Breathe_Init>
            NOS_WS2812B_Strip_Effects_UpdateEffect(strip,tempEffect,pos);
 8000828:	b2ff      	uxtb	r7, r7
 800082a:	9705      	str	r7, [sp, #20]
 800082c:	466c      	mov	r4, sp
 800082e:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 8000832:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000838:	f8dc 3000 	ldr.w	r3, [ip]
 800083c:	6023      	str	r3, [r4, #0]
 800083e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8000842:	4628      	mov	r0, r5
 8000844:	f000 fa5b 	bl	8000cfe <NOS_WS2812B_Strip_Effects_UpdateEffect>
        return true;       
 8000848:	2001      	movs	r0, #1
}
 800084a:	b00f      	add	sp, #60	@ 0x3c
 800084c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            tempShort.bytes[1] = message->data[currPos++];
 8000850:	7c0b      	ldrb	r3, [r1, #16]
 8000852:	f04f 0c00 	mov.w	ip, #0
 8000856:	f363 2c0f 	bfi	ip, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 800085a:	7c4b      	ldrb	r3, [r1, #17]
 800085c:	f363 0c07 	bfi	ip, r3, #0, #8
            pos = tempShort.data;
 8000860:	fa1f f78c 	uxth.w	r7, ip
            tempShort.bytes[1] = message->data[currPos++];
 8000864:	7c8b      	ldrb	r3, [r1, #18]
 8000866:	f363 2c0f 	bfi	ip, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 800086a:	7ccb      	ldrb	r3, [r1, #19]
 800086c:	f363 0c07 	bfi	ip, r3, #0, #8
            speed = tempShort.data;
 8000870:	fa1f f18c 	uxth.w	r1, ip
            tempShort.bytes[1] = message->data[currPos++];
 8000874:	7d23      	ldrb	r3, [r4, #20]
 8000876:	f363 2c0f 	bfi	ip, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 800087a:	7d63      	ldrb	r3, [r4, #21]
 800087c:	f363 0c07 	bfi	ip, r3, #0, #8
            step = tempShort.data;
 8000880:	fa1f f28c 	uxth.w	r2, ip
            tempShort.bytes[1] = message->data[currPos++];
 8000884:	7da3      	ldrb	r3, [r4, #22]
 8000886:	f363 2c0f 	bfi	ip, r3, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 800088a:	7de3      	ldrb	r3, [r4, #23]
 800088c:	f363 0c07 	bfi	ip, r3, #0, #8
            min = tempShort.data;
 8000890:	fa1f f38c 	uxth.w	r3, ip
            tempShort.bytes[1] = message->data[currPos++];
 8000894:	7e20      	ldrb	r0, [r4, #24]
 8000896:	f360 2c0f 	bfi	ip, r0, #8, #8
            tempShort.bytes[0] = message->data[currPos++];
 800089a:	7e60      	ldrb	r0, [r4, #25]
 800089c:	f360 0c07 	bfi	ip, r0, #0, #8
            max = tempShort.data;
 80008a0:	fa1f f48c 	uxth.w	r4, ip
            tempEffect.effectId = EFFECT_RAINBOW_ID;
 80008a4:	2021      	movs	r0, #33	@ 0x21
 80008a6:	f88d 0037 	strb.w	r0, [sp, #55]	@ 0x37
            NOS_WS2812B_Strip_Effect_Rainbow_Init(&tempEffect,speed,step,min,max);
 80008aa:	ae06      	add	r6, sp, #24
 80008ac:	9400      	str	r4, [sp, #0]
 80008ae:	4630      	mov	r0, r6
 80008b0:	f000 f9d4 	bl	8000c5c <NOS_WS2812B_Strip_Effect_Rainbow_Init>
            NOS_WS2812B_Strip_Effects_UpdateEffect(strip,tempEffect,pos);
 80008b4:	b2ff      	uxtb	r7, r7
 80008b6:	9705      	str	r7, [sp, #20]
 80008b8:	466c      	mov	r4, sp
 80008ba:	f10d 0c24 	add.w	ip, sp, #36	@ 0x24
 80008be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80008c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c4:	f8dc 3000 	ldr.w	r3, [ip]
 80008c8:	6023      	str	r3, [r4, #0]
 80008ca:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80008ce:	4628      	mov	r0, r5
 80008d0:	f000 fa15 	bl	8000cfe <NOS_WS2812B_Strip_Effects_UpdateEffect>
            return true;
 80008d4:	e7b8      	b.n	8000848 <NOS_Strip_UART_ParseCommand+0xae>

080008d6 <NOS_TimeEvent_Init>:
    }
}

void NOS_TimeEvent_Init(NOS_TimeEvent *timeEvent, uint32_t ticksToEnable)
{
    if (timeEvent != NULL)
 80008d6:	b120      	cbz	r0, 80008e2 <NOS_TimeEvent_Init+0xc>
    {
        timeEvent->enabled = false;
 80008d8:	2200      	movs	r2, #0
 80008da:	7142      	strb	r2, [r0, #5]
        timeEvent->stopped = false;
 80008dc:	7102      	strb	r2, [r0, #4]
        timeEvent->ticksToEnable = ticksToEnable;
 80008de:	6001      	str	r1, [r0, #0]
        timeEvent->ticks = 0;
 80008e0:	6082      	str	r2, [r0, #8]
    }
}
 80008e2:	4770      	bx	lr

080008e4 <NOS_TimeEvent_TickHandler>:
    timeEvent->ticks = 0;
}

void NOS_TimeEvent_TickHandler(NOS_TimeEvent *timeEvent)
{
    timeEvent->ticks++;
 80008e4:	6883      	ldr	r3, [r0, #8]
 80008e6:	3301      	adds	r3, #1
 80008e8:	6083      	str	r3, [r0, #8]
    if (!timeEvent->stopped)
 80008ea:	7902      	ldrb	r2, [r0, #4]
 80008ec:	b922      	cbnz	r2, 80008f8 <NOS_TimeEvent_TickHandler+0x14>
    {
        if (timeEvent->ticks >= timeEvent->ticksToEnable)
 80008ee:	6802      	ldr	r2, [r0, #0]
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d301      	bcc.n	80008f8 <NOS_TimeEvent_TickHandler+0x14>
        {
            timeEvent->enabled = true;
 80008f4:	2301      	movs	r3, #1
 80008f6:	7143      	strb	r3, [r0, #5]
        }
    }
}
 80008f8:	4770      	bx	lr

080008fa <NOS_TimeEvent_Check>:

bool NOS_TimeEvent_Check(NOS_TimeEvent *timeEvent)
{
 80008fa:	4603      	mov	r3, r0
    if (timeEvent->enabled && !timeEvent->stopped)
 80008fc:	7940      	ldrb	r0, [r0, #5]
 80008fe:	b110      	cbz	r0, 8000906 <NOS_TimeEvent_Check+0xc>
 8000900:	791b      	ldrb	r3, [r3, #4]
 8000902:	b103      	cbz	r3, 8000906 <NOS_TimeEvent_Check+0xc>
    {
        return true;
    }
    return false;
 8000904:	2000      	movs	r0, #0
}
 8000906:	4770      	bx	lr

08000908 <NOS_TimeEvent_FinishEvent>:

void NOS_TimeEvent_FinishEvent(NOS_TimeEvent *timeEvent)
{
    timeEvent->enabled = false;
 8000908:	2300      	movs	r3, #0
 800090a:	7143      	strb	r3, [r0, #5]
    timeEvent->ticks = 0;
 800090c:	6083      	str	r3, [r0, #8]
 800090e:	4770      	bx	lr

08000910 <NOS_UART_ReceiveReset>:
#include "NOS_UART.h"

NOS_UART_Struct* NOS_UART_ReceiveReset(NOS_UART_Struct* data)
{
    data->lastMessageSize = data->currMessageLenght;
 8000910:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8000914:	6899      	ldr	r1, [r3, #8]
 8000916:	8559      	strh	r1, [r3, #42]	@ 0x2a
    data->rx_buff_ptr = data->rx_buff;
 8000918:	6198      	str	r0, [r3, #24]
    data->currMessageLenght = 0;
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
    data->startReceive = false;
 800091e:	741a      	strb	r2, [r3, #16]
    data->rx_flag = true;
 8000920:	2201      	movs	r2, #1
 8000922:	719a      	strb	r2, [r3, #6]
    return data;
}
 8000924:	4770      	bx	lr

08000926 <NOS_UART_ReceiveAbort>:
    ++data->rx_buff_ptr;
    return data;
}

void NOS_UART_ReceiveAbort(NOS_UART_Struct* data,UART_HandleTypeDef* uart)
{
 8000926:	b510      	push	{r4, lr}
 8000928:	4604      	mov	r4, r0
 800092a:	4608      	mov	r0, r1
    for(int i = 0; i < BUFFER_SIZE; i++)
 800092c:	2300      	movs	r3, #0
 800092e:	e002      	b.n	8000936 <NOS_UART_ReceiveAbort+0x10>
    {
        data->rx_buff[i] = 0;
 8000930:	2200      	movs	r2, #0
 8000932:	54e2      	strb	r2, [r4, r3]
    for(int i = 0; i < BUFFER_SIZE; i++)
 8000934:	3301      	adds	r3, #1
 8000936:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800093a:	dbf9      	blt.n	8000930 <NOS_UART_ReceiveAbort+0xa>
    }

    data->rx_buff_ptr = data->rx_buff;
 800093c:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8000940:	619c      	str	r4, [r3, #24]
    data->index = 0;
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
    data->currMessageLenght = 0;
 8000946:	609a      	str	r2, [r3, #8]
    data->expectedMessageLenght = 0;
 8000948:	60da      	str	r2, [r3, #12]
    data->startReceive = false;
 800094a:	741a      	strb	r2, [r3, #16]
    data->endReceive = false;
 800094c:	745a      	strb	r2, [r3, #17]
    data->bufferCommand = false;
 800094e:	749a      	strb	r2, [r3, #18]
    data->rx_flag = false;
 8000950:	719a      	strb	r2, [r3, #6]
    data->receiveTimeAbort = 400;
 8000952:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000956:	621a      	str	r2, [r3, #32]
    HAL_UART_Receive_IT (uart, data->rx_buff_ptr, 1); 
 8000958:	2201      	movs	r2, #1
 800095a:	4621      	mov	r1, r4
 800095c:	f002 fdeb 	bl	8003536 <HAL_UART_Receive_IT>
}
 8000960:	bd10      	pop	{r4, pc}

08000962 <GetCRC16>:
    
}
*/

uint16_t GetCRC16(uint8_t *buf, int len)
{  
 8000962:	b500      	push	{lr}
  unsigned int crc = 0xFFFF;
  for (int pos = 0; pos < len; pos++)
 8000964:	f04f 0e00 	mov.w	lr, #0
  unsigned int crc = 0xFFFF;
 8000968:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  for (int pos = 0; pos < len; pos++)
 800096c:	e00c      	b.n	8000988 <GetCRC16+0x26>
    if ((crc & 0x0001) != 0) {      // If the LSB is set
      crc >>= 1;                    // Shift right and XOR 0xA001
      crc ^= 0xA001;
    }
    else                            // Else LSB is not set
      crc >>= 1;                    // Just shift right
 800096e:	085b      	lsrs	r3, r3, #1
  for (int i = 8; i != 0; i--) {    // Loop over each bit
 8000970:	3a01      	subs	r2, #1
 8000972:	b13a      	cbz	r2, 8000984 <GetCRC16+0x22>
    if ((crc & 0x0001) != 0) {      // If the LSB is set
 8000974:	f013 0f01 	tst.w	r3, #1
 8000978:	d0f9      	beq.n	800096e <GetCRC16+0xc>
      crc ^= 0xA001;
 800097a:	f24a 0c01 	movw	ip, #40961	@ 0xa001
 800097e:	ea8c 0353 	eor.w	r3, ip, r3, lsr #1
 8000982:	e7f5      	b.n	8000970 <GetCRC16+0xe>
  for (int pos = 0; pos < len; pos++)
 8000984:	f10e 0e01 	add.w	lr, lr, #1
 8000988:	458e      	cmp	lr, r1
 800098a:	da04      	bge.n	8000996 <GetCRC16+0x34>
  crc ^= (unsigned int)buf[pos];    // XOR byte into least sig. byte of crc
 800098c:	f810 200e 	ldrb.w	r2, [r0, lr]
 8000990:	4053      	eors	r3, r2
  for (int i = 8; i != 0; i--) {    // Loop over each bit
 8000992:	2208      	movs	r2, #8
 8000994:	e7ed      	b.n	8000972 <GetCRC16+0x10>
    }
  }

  return crc;
}
 8000996:	b298      	uxth	r0, r3
 8000998:	f85d fb04 	ldr.w	pc, [sp], #4

0800099c <NOS_UART_ReceiveHandler>:
    HAL_UART_Receive_IT (uart, data->rx_buff_ptr, 1); 
}
*/

void NOS_UART_ReceiveHandler(NOS_UART_Struct* data,UART_HandleTypeDef* uart)
{
 800099c:	b510      	push	{r4, lr}
 800099e:	4684      	mov	ip, r0
 80009a0:	4608      	mov	r0, r1
    data->fuckBuff[data->fuckIndex] = *data->rx_buff_ptr;
 80009a2:	f50c 5380 	add.w	r3, ip, #4096	@ 0x1000
 80009a6:	6999      	ldr	r1, [r3, #24]
 80009a8:	889a      	ldrh	r2, [r3, #4]
 80009aa:	f891 e000 	ldrb.w	lr, [r1]
 80009ae:	eb0c 0402 	add.w	r4, ip, r2
 80009b2:	f884 e800 	strb.w	lr, [r4, #2048]	@ 0x800
    data->fuckIndex++;
 80009b6:	3201      	adds	r2, #1
 80009b8:	809a      	strh	r2, [r3, #4]

    data->startReceive = true;
 80009ba:	2201      	movs	r2, #1
 80009bc:	741a      	strb	r2, [r3, #16]

    data->lastReceivedByteTime = 0; 
 80009be:	2400      	movs	r4, #0
 80009c0:	625c      	str	r4, [r3, #36]	@ 0x24
    data->currMessageLenght++;
 80009c2:	689c      	ldr	r4, [r3, #8]
 80009c4:	4414      	add	r4, r2
 80009c6:	609c      	str	r4, [r3, #8]
    

    data->rx_buff[data->index] = *data->rx_buff_ptr;
 80009c8:	681c      	ldr	r4, [r3, #0]
 80009ca:	f811 eb01 	ldrb.w	lr, [r1], #1
 80009ce:	f80c e004 	strb.w	lr, [ip, r4]
    ++data->index;
 80009d2:	4414      	add	r4, r2
 80009d4:	601c      	str	r4, [r3, #0]
    ++data->rx_buff_ptr;
 80009d6:	6199      	str	r1, [r3, #24]
    

    HAL_UART_Receive_IT (uart, data->rx_buff_ptr, 1); 
 80009d8:	f002 fdad 	bl	8003536 <HAL_UART_Receive_IT>
}
 80009dc:	bd10      	pop	{r4, pc}

080009de <NOS_UART_ParsePacket>:

//addr1 addr0 channel1 channel0 count1 count0 packetId3 packetId2 packetId1 packetId0 command3 command2 command1 command0 /* data (16 - 1008) */ crc16_1 crc16_0 / 
//maxLenght 1024B  minLenght 32B packetInfo 16B
    NOS_Short currCRC;
bool NOS_UART_ParsePacket(NOS_UART_Struct* data,UART_Message* message)
{
 80009de:	b538      	push	{r3, r4, r5, lr}
 80009e0:	4604      	mov	r4, r0
 80009e2:	460d      	mov	r5, r1
    message->address.bytes[1] = data->rx_buff[0];
 80009e4:	7803      	ldrb	r3, [r0, #0]
 80009e6:	704b      	strb	r3, [r1, #1]
    message->address.bytes[0] = data->rx_buff[1];
 80009e8:	7843      	ldrb	r3, [r0, #1]
 80009ea:	700b      	strb	r3, [r1, #0]

    message->channel.bytes[1] = data->rx_buff[2];
 80009ec:	7883      	ldrb	r3, [r0, #2]
 80009ee:	70cb      	strb	r3, [r1, #3]
    message->channel.bytes[0] = data->rx_buff[3];
 80009f0:	78c3      	ldrb	r3, [r0, #3]
 80009f2:	708b      	strb	r3, [r1, #2]

    message->byteCount.bytes[1] = data->rx_buff[4];
 80009f4:	7903      	ldrb	r3, [r0, #4]
 80009f6:	714b      	strb	r3, [r1, #5]
    message->byteCount.bytes[0] = data->rx_buff[5];
 80009f8:	7943      	ldrb	r3, [r0, #5]
 80009fa:	710b      	strb	r3, [r1, #4]

    message->packetId.bytes[3] = data->rx_buff[6];
 80009fc:	7983      	ldrb	r3, [r0, #6]
 80009fe:	72cb      	strb	r3, [r1, #11]
    message->packetId.bytes[2] = data->rx_buff[7];
 8000a00:	79c3      	ldrb	r3, [r0, #7]
 8000a02:	728b      	strb	r3, [r1, #10]
    message->packetId.bytes[1] = data->rx_buff[8];
 8000a04:	7a03      	ldrb	r3, [r0, #8]
 8000a06:	724b      	strb	r3, [r1, #9]
    message->packetId.bytes[0] = data->rx_buff[9];
 8000a08:	7a43      	ldrb	r3, [r0, #9]
 8000a0a:	720b      	strb	r3, [r1, #8]

    message->command.bytes[3] = data->rx_buff[10];
 8000a0c:	7a83      	ldrb	r3, [r0, #10]
 8000a0e:	73cb      	strb	r3, [r1, #15]
    message->command.bytes[2] = data->rx_buff[11];
 8000a10:	7ac3      	ldrb	r3, [r0, #11]
 8000a12:	738b      	strb	r3, [r1, #14]
    message->command.bytes[1] = data->rx_buff[12];
 8000a14:	7b03      	ldrb	r3, [r0, #12]
 8000a16:	734b      	strb	r3, [r1, #13]
    message->command.bytes[0] = data->rx_buff[13];
 8000a18:	7b43      	ldrb	r3, [r0, #13]
 8000a1a:	730b      	strb	r3, [r1, #12]

    for(int i = 0; i < 16; i++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e005      	b.n	8000a2c <NOS_UART_ParsePacket+0x4e>
    {
        message->data[i] = data->rx_buff[14 + i];
 8000a20:	f103 020e 	add.w	r2, r3, #14
 8000a24:	5ca1      	ldrb	r1, [r4, r2]
 8000a26:	18ea      	adds	r2, r5, r3
 8000a28:	7411      	strb	r1, [r2, #16]
    for(int i = 0; i < 16; i++)
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	ddf7      	ble.n	8000a20 <NOS_UART_ParsePacket+0x42>
    }

    message->CRC16.bytes[1] = data->rx_buff[30];
 8000a30:	7fa3      	ldrb	r3, [r4, #30]
 8000a32:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
    message->CRC16.bytes[0] = data->rx_buff[31];
 8000a36:	7fe3      	ldrb	r3, [r4, #31]
 8000a38:	f885 3020 	strb.w	r3, [r5, #32]

    data->value.data = GetCRC16(&data->rx_buff,30);
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	4620      	mov	r0, r4
 8000a40:	f7ff ff8f 	bl	8000962 <GetCRC16>
 8000a44:	f504 5480 	add.w	r4, r4, #4096	@ 0x1000
 8000a48:	82a0      	strh	r0, [r4, #20]

    if(data->value.data == message->CRC16.data)
 8000a4a:	8c2b      	ldrh	r3, [r5, #32]
 8000a4c:	4298      	cmp	r0, r3
 8000a4e:	d005      	beq.n	8000a5c <NOS_UART_ParsePacket+0x7e>
    {
        return true;
    }

    if(message->address.data != 0)
 8000a50:	882b      	ldrh	r3, [r5, #0]
 8000a52:	b123      	cbz	r3, 8000a5e <NOS_UART_ParsePacket+0x80>
    {
        if(message->channel.data != 0)
 8000a54:	886b      	ldrh	r3, [r5, #2]
 8000a56:	b113      	cbz	r3, 8000a5e <NOS_UART_ParsePacket+0x80>
        {
            if(message->byteCount.data != 0)
 8000a58:	88ab      	ldrh	r3, [r5, #4]
 8000a5a:	b103      	cbz	r3, 8000a5e <NOS_UART_ParsePacket+0x80>
                return true;            
            }
        }
    }

}
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	bd38      	pop	{r3, r4, r5, pc}

08000a60 <NOS_UART_PacketApprovedNotice>:

bool NOS_UART_PacketApprovedNotice(UART_Message* message,UART_HandleTypeDef* uart)
{
 8000a60:	b500      	push	{lr}
 8000a62:	b093      	sub	sp, #76	@ 0x4c
 8000a64:	4686      	mov	lr, r0
 8000a66:	4608      	mov	r0, r1
    UART_Message approvalMessage;

    approvalMessage.address.data = message->address.data;
 8000a68:	f8be 3000 	ldrh.w	r3, [lr]
 8000a6c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
    approvalMessage.byteCount.data = message->address.data;
 8000a70:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
    approvalMessage.channel.data = message->address.data;
 8000a74:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
    approvalMessage.command.data = message->address.data;
 8000a78:	930c      	str	r3, [sp, #48]	@ 0x30
    approvalMessage.packetId.data = message->packetId.data;
 8000a7a:	f8de 3008 	ldr.w	r3, [lr, #8]
 8000a7e:	930b      	str	r3, [sp, #44]	@ 0x2c
    for(int i = 0; i < 16; i++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	2b0f      	cmp	r3, #15
 8000a84:	dc0a      	bgt.n	8000a9c <NOS_UART_PacketApprovedNotice+0x3c>
    {
        approvalMessage.data[i] = message->data[i];
 8000a86:	eb0e 0203 	add.w	r2, lr, r3
 8000a8a:	f892 c010 	ldrb.w	ip, [r2, #16]
 8000a8e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8000a92:	446a      	add	r2, sp
 8000a94:	f802 cc14 	strb.w	ip, [r2, #-20]
    for(int i = 0; i < 16; i++)
 8000a98:	3301      	adds	r3, #1
 8000a9a:	e7f2      	b.n	8000a82 <NOS_UART_PacketApprovedNotice+0x22>
    }

    uint8_t buff[32];
    uint8_t* ptr = &approvalMessage;

    for(int i = 0; i < 32; i++)
 8000a9c:	2300      	movs	r3, #0
    uint8_t* ptr = &approvalMessage;
 8000a9e:	aa09      	add	r2, sp, #36	@ 0x24
 8000aa0:	e008      	b.n	8000ab4 <NOS_UART_PacketApprovedNotice+0x54>
    {
        buff[i] = *ptr;
 8000aa2:	f812 eb01 	ldrb.w	lr, [r2], #1
 8000aa6:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8000aaa:	eb0d 0c01 	add.w	ip, sp, r1
 8000aae:	f80c ec44 	strb.w	lr, [ip, #-68]
    for(int i = 0; i < 32; i++)
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	2b1f      	cmp	r3, #31
 8000ab6:	ddf4      	ble.n	8000aa2 <NOS_UART_PacketApprovedNotice+0x42>
        ptr++;
    }

    HAL_UART_Transmit(uart,buff,32,1000);
 8000ab8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000abc:	2220      	movs	r2, #32
 8000abe:	a901      	add	r1, sp, #4
 8000ac0:	f002 faeb 	bl	800309a <HAL_UART_Transmit>

}
 8000ac4:	b013      	add	sp, #76	@ 0x4c
 8000ac6:	f85d fb04 	ldr.w	pc, [sp], #4

08000aca <NOS_UART_CheckReceive>:


bool NOS_UART_CheckReceive(NOS_UART_Struct* data)
{
    return data->rx_flag;   
 8000aca:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
}
 8000ace:	7980      	ldrb	r0, [r0, #6]
 8000ad0:	4770      	bx	lr

08000ad2 <NOS_UART_EndReceive>:
    return data->fuckBuff;
}

void NOS_UART_EndReceive(NOS_UART_Struct* data)
{
    data->rx_flag = false;
 8000ad2:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	7183      	strb	r3, [r0, #6]
}
 8000ada:	4770      	bx	lr

08000adc <NOS_WS2812B_Strip_FullInit>:
#include "NOS_BaseColors.h"
#include "WS2812B_Effects.h"

void NOS_WS2812B_Strip_FullInit(WS2812B_Strip* strip,uint8_t* buff,PixelColor* pixels,int lenght)
{
    strip->pixels = pixels;
 8000adc:	6042      	str	r2, [r0, #4]
    strip->frameBuffer = buff;
 8000ade:	6001      	str	r1, [r0, #0]
    strip->pixelCount = lenght;
 8000ae0:	6083      	str	r3, [r0, #8]
    strip->bright = 100;
 8000ae2:	2364      	movs	r3, #100	@ 0x64
 8000ae4:	60c3      	str	r3, [r0, #12]
    strip->effectsCounter = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f880 3150 	strb.w	r3, [r0, #336]	@ 0x150
}
 8000aec:	4770      	bx	lr

08000aee <NOS_WS2812B_Strip_CoreSetPixel>:

void NOS_WS2812B_Strip_CoreSetPixel(WS2812B_Strip* strip,int pixelPos,uint8_t r, uint8_t g, uint8_t b)
{
 8000aee:	b410      	push	{r4}
    if(strip->frameBuffer != NULL && pixelPos <= strip->pixelCount)
 8000af0:	6804      	ldr	r4, [r0, #0]
 8000af2:	b174      	cbz	r4, 8000b12 <NOS_WS2812B_Strip_CoreSetPixel+0x24>
 8000af4:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8000af8:	458c      	cmp	ip, r1
 8000afa:	db0a      	blt.n	8000b12 <NOS_WS2812B_Strip_CoreSetPixel+0x24>
    {
        strip->frameBuffer[pixelPos * 3] = r;
 8000afc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000b00:	5462      	strb	r2, [r4, r1]
        strip->frameBuffer[pixelPos * 3 + 1] = g;
 8000b02:	6804      	ldr	r4, [r0, #0]
 8000b04:	1c4a      	adds	r2, r1, #1
 8000b06:	54a3      	strb	r3, [r4, r2]
        strip->frameBuffer[pixelPos * 3 + 2] = b;
 8000b08:	6803      	ldr	r3, [r0, #0]
 8000b0a:	3102      	adds	r1, #2
 8000b0c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000b10:	545a      	strb	r2, [r3, r1]
    }
}
 8000b12:	bc10      	pop	{r4}
 8000b14:	4770      	bx	lr

08000b16 <NOS_WS2812B_Strip_SetPixel>:

void NOS_WS2812B_Strip_SetPixel(WS2812B_Strip* strip,int pixelPos,uint8_t r, uint8_t g, uint8_t b)
{
 8000b16:	b410      	push	{r4}
    if(strip->pixels != NULL && pixelPos <= strip->pixelCount)
 8000b18:	6844      	ldr	r4, [r0, #4]
 8000b1a:	b174      	cbz	r4, 8000b3a <NOS_WS2812B_Strip_SetPixel+0x24>
 8000b1c:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8000b20:	458c      	cmp	ip, r1
 8000b22:	db0a      	blt.n	8000b3a <NOS_WS2812B_Strip_SetPixel+0x24>
    {
        strip->pixels[pixelPos].R = r;
 8000b24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000b28:	5462      	strb	r2, [r4, r1]
        strip->pixels[pixelPos].G = g;
 8000b2a:	6842      	ldr	r2, [r0, #4]
 8000b2c:	440a      	add	r2, r1
 8000b2e:	7053      	strb	r3, [r2, #1]
        strip->pixels[pixelPos].B = b;
 8000b30:	6843      	ldr	r3, [r0, #4]
 8000b32:	440b      	add	r3, r1
 8000b34:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8000b38:	709a      	strb	r2, [r3, #2]
    }         
}
 8000b3a:	bc10      	pop	{r4}
 8000b3c:	4770      	bx	lr
	...

08000b40 <NOS_WS2812B_Strip_Update>:
        NOS_WS2812B_Strip_SetPixel(strip,i,0,0,0);
    }
}

void NOS_WS2812B_Strip_Update(WS2812B_Strip* strip)
{
 8000b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b44:	b083      	sub	sp, #12
 8000b46:	4607      	mov	r7, r0
    float coef = (float)strip->bright / 100;
 8000b48:	68c0      	ldr	r0, [r0, #12]
 8000b4a:	f7ff fb99 	bl	8000280 <__aeabi_i2f>
 8000b4e:	491b      	ldr	r1, [pc, #108]	@ (8000bbc <NOS_WS2812B_Strip_Update+0x7c>)
 8000b50:	f7ff fc9e 	bl	8000490 <__aeabi_fdiv>
 8000b54:	4680      	mov	r8, r0
    for(int i = 0; i < strip->pixelCount; i++)
 8000b56:	2400      	movs	r4, #0
 8000b58:	e029      	b.n	8000bae <NOS_WS2812B_Strip_Update+0x6e>
    {
        uint8_t currR = (float)strip->pixels[i].R * coef;
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000b60:	eb02 0903 	add.w	r9, r2, r3
 8000b64:	5cd0      	ldrb	r0, [r2, r3]
 8000b66:	f7ff fb87 	bl	8000278 <__aeabi_ui2f>
 8000b6a:	4641      	mov	r1, r8
 8000b6c:	f7ff fbdc 	bl	8000328 <__aeabi_fmul>
 8000b70:	f7ff fd2a 	bl	80005c8 <__aeabi_f2uiz>
 8000b74:	b2c5      	uxtb	r5, r0
        uint8_t currG = (float)strip->pixels[i].G * coef;
 8000b76:	f899 0001 	ldrb.w	r0, [r9, #1]
 8000b7a:	f7ff fb7d 	bl	8000278 <__aeabi_ui2f>
 8000b7e:	4641      	mov	r1, r8
 8000b80:	f7ff fbd2 	bl	8000328 <__aeabi_fmul>
 8000b84:	f7ff fd20 	bl	80005c8 <__aeabi_f2uiz>
 8000b88:	b2c6      	uxtb	r6, r0
        uint8_t currB = (float)strip->pixels[i].B * coef;
 8000b8a:	f899 0002 	ldrb.w	r0, [r9, #2]
 8000b8e:	f7ff fb73 	bl	8000278 <__aeabi_ui2f>
 8000b92:	4641      	mov	r1, r8
 8000b94:	f7ff fbc8 	bl	8000328 <__aeabi_fmul>
 8000b98:	f7ff fd16 	bl	80005c8 <__aeabi_f2uiz>
 8000b9c:	b2c0      	uxtb	r0, r0
        NOS_WS2812B_Strip_CoreSetPixel(strip,i,currR,currG,currB);
 8000b9e:	9000      	str	r0, [sp, #0]
 8000ba0:	4633      	mov	r3, r6
 8000ba2:	462a      	mov	r2, r5
 8000ba4:	4621      	mov	r1, r4
 8000ba6:	4638      	mov	r0, r7
 8000ba8:	f7ff ffa1 	bl	8000aee <NOS_WS2812B_Strip_CoreSetPixel>
    for(int i = 0; i < strip->pixelCount; i++)
 8000bac:	3401      	adds	r4, #1
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	42a3      	cmp	r3, r4
 8000bb2:	dcd2      	bgt.n	8000b5a <NOS_WS2812B_Strip_Update+0x1a>
    }

}
 8000bb4:	b003      	add	sp, #12
 8000bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bba:	bf00      	nop
 8000bbc:	42c80000 	.word	0x42c80000

08000bc0 <NOS_WS2812B_Strip_ColorFill>:
        currPixel++;
    }
}

void NOS_WS2812B_Strip_ColorFill(WS2812B_Strip* strip,PixelColor color)
{
 8000bc0:	b530      	push	{r4, r5, lr}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	4605      	mov	r5, r0
 8000bc6:	9103      	str	r1, [sp, #12]
    for(int i = 0; i < strip->pixelCount; i++)
 8000bc8:	2400      	movs	r4, #0
 8000bca:	e00b      	b.n	8000be4 <NOS_WS2812B_Strip_ColorFill+0x24>
    {
        NOS_WS2812B_Strip_SetPixel(strip,i,color.R,color.G,color.B);
 8000bcc:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8000bd6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8000bda:	4621      	mov	r1, r4
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f7ff ff9a 	bl	8000b16 <NOS_WS2812B_Strip_SetPixel>
    for(int i = 0; i < strip->pixelCount; i++)
 8000be2:	3401      	adds	r4, #1
 8000be4:	68ab      	ldr	r3, [r5, #8]
 8000be6:	42a3      	cmp	r3, r4
 8000be8:	dcf0      	bgt.n	8000bcc <NOS_WS2812B_Strip_ColorFill+0xc>
    }
}
 8000bea:	b005      	add	sp, #20
 8000bec:	bd30      	pop	{r4, r5, pc}

08000bee <NOS_WS2812B_Strip_SetBright>:
    NOS_WS2812B_Strip_SetPixel(strip,pixelPos,color.R,color.G,color.B);
}

void NOS_WS2812B_Strip_SetBright(WS2812B_Strip* strip,uint8_t bright)
{
    strip->bright = bright;
 8000bee:	60c1      	str	r1, [r0, #12]
}
 8000bf0:	4770      	bx	lr

08000bf2 <NOS_WS2812B_Strip_Effect_Breathe_Init>:

void NOS_WS2812B_Strip_Effect_Breathe_Init(Effect_Struct* effect,uint16_t speed,uint16_t step,uint16_t minValue,uint16_t maxValue)
{
 8000bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	460f      	mov	r7, r1
 8000bfa:	4615      	mov	r5, r2
 8000bfc:	461e      	mov	r6, r3
 8000bfe:	f8bd 8018 	ldrh.w	r8, [sp, #24]
        NOS_Math_SinValue_Init(&effect->value,minValue,maxValue,step);
 8000c02:	4613      	mov	r3, r2
 8000c04:	4642      	mov	r2, r8
 8000c06:	4631      	mov	r1, r6
 8000c08:	f7ff fdbe 	bl	8000788 <NOS_Math_SinValue_Init>
        effect->minValue = minValue;
 8000c0c:	8366      	strh	r6, [r4, #26]
        effect->maxValue = maxValue;
 8000c0e:	f8a4 801c 	strh.w	r8, [r4, #28]
        effect->speed.data = speed;
 8000c12:	82a7      	strh	r7, [r4, #20]
        effect->step.data = step;
 8000c14:	82e5      	strh	r5, [r4, #22]
        effect->enabled = true;
 8000c16:	2301      	movs	r3, #1
 8000c18:	77a3      	strb	r3, [r4, #30]
        effect->effectId = 0x20;   
 8000c1a:	2320      	movs	r3, #32
 8000c1c:	77e3      	strb	r3, [r4, #31]
}
 8000c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000c22 <NOS_WS2812B_Strip_Effect_Breathe_Handler>:
    }
}

void NOS_WS2812B_Strip_Effect_Breathe_Handler(WS2812B_Strip* strip,Effect_Struct* effect)
{
    if(strip != NULL)
 8000c22:	b1d0      	cbz	r0, 8000c5a <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x38>
{
 8000c24:	b538      	push	{r3, r4, r5, lr}
 8000c26:	460c      	mov	r4, r1
 8000c28:	4605      	mov	r5, r0
    {
        if(effect != NULL)
 8000c2a:	b141      	cbz	r1, 8000c3e <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x1c>
        {
            if(effect->enabled)
 8000c2c:	7f8b      	ldrb	r3, [r1, #30]
 8000c2e:	b133      	cbz	r3, 8000c3e <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x1c>
            {
                if(effect->timer > effect->speed.data)
 8000c30:	8b0a      	ldrh	r2, [r1, #24]
 8000c32:	8a8b      	ldrh	r3, [r1, #20]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d803      	bhi.n	8000c40 <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x1e>
                    NOS_Math_SinValue_Handler(&effect->value);
                    NOS_WS2812B_Strip_SetBright(strip,effect->value.value);
                    NOS_WS2812B_Strip_Update(strip);
                    effect->timer = 0;
                }
                effect->timer++;
 8000c38:	8b23      	ldrh	r3, [r4, #24]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	8323      	strh	r3, [r4, #24]
            }
        }
    }
}
 8000c3e:	bd38      	pop	{r3, r4, r5, pc}
                    NOS_Math_SinValue_Handler(&effect->value);
 8000c40:	4608      	mov	r0, r1
 8000c42:	f7ff fd83 	bl	800074c <NOS_Math_SinValue_Handler>
                    NOS_WS2812B_Strip_SetBright(strip,effect->value.value);
 8000c46:	7821      	ldrb	r1, [r4, #0]
 8000c48:	4628      	mov	r0, r5
 8000c4a:	f7ff ffd0 	bl	8000bee <NOS_WS2812B_Strip_SetBright>
                    NOS_WS2812B_Strip_Update(strip);
 8000c4e:	4628      	mov	r0, r5
 8000c50:	f7ff ff76 	bl	8000b40 <NOS_WS2812B_Strip_Update>
                    effect->timer = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	8323      	strh	r3, [r4, #24]
 8000c58:	e7ee      	b.n	8000c38 <NOS_WS2812B_Strip_Effect_Breathe_Handler+0x16>
 8000c5a:	4770      	bx	lr

08000c5c <NOS_WS2812B_Strip_Effect_Rainbow_Init>:
        }
    }
}

void NOS_WS2812B_Strip_Effect_Rainbow_Init(Effect_Struct* effect,uint16_t speed,uint16_t step,uint16_t minValue,uint16_t maxValue)
{
 8000c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c60:	4604      	mov	r4, r0
 8000c62:	460f      	mov	r7, r1
 8000c64:	4615      	mov	r5, r2
 8000c66:	461e      	mov	r6, r3
 8000c68:	f8bd 8018 	ldrh.w	r8, [sp, #24]
        NOS_Math_SinValue_Init(&effect->value,minValue,maxValue,step);
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	4642      	mov	r2, r8
 8000c70:	4631      	mov	r1, r6
 8000c72:	f7ff fd89 	bl	8000788 <NOS_Math_SinValue_Init>
        effect->minValue = minValue;
 8000c76:	8366      	strh	r6, [r4, #26]
        effect->maxValue = maxValue;
 8000c78:	f8a4 801c 	strh.w	r8, [r4, #28]
        effect->speed.data = speed;
 8000c7c:	82a7      	strh	r7, [r4, #20]
        effect->step.data = step;
 8000c7e:	82e5      	strh	r5, [r4, #22]
        effect->enabled = true;
 8000c80:	2301      	movs	r3, #1
 8000c82:	77a3      	strb	r3, [r4, #30]
        effect->effectId = 0x21;  
 8000c84:	2321      	movs	r3, #33	@ 0x21
 8000c86:	77e3      	strb	r3, [r4, #31]
}
 8000c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000c8c <NOS_WS2812B_Strip_Effects_AddEffect>:
{
 8000c8c:	b084      	sub	sp, #16
 8000c8e:	b510      	push	{r4, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	4604      	mov	r4, r0
 8000c94:	a805      	add	r0, sp, #20
 8000c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if(strip->effectsCounter < 10)
 8000c9a:	f894 0150 	ldrb.w	r0, [r4, #336]	@ 0x150
 8000c9e:	2809      	cmp	r0, #9
 8000ca0:	d80a      	bhi.n	8000cb8 <NOS_WS2812B_Strip_Effects_AddEffect+0x2c>
        switch(effect.effectId)
 8000ca2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8000ca6:	2b20      	cmp	r3, #32
 8000ca8:	d00b      	beq.n	8000cc2 <NOS_WS2812B_Strip_Effects_AddEffect+0x36>
 8000caa:	2b21      	cmp	r3, #33	@ 0x21
 8000cac:	d018      	beq.n	8000ce0 <NOS_WS2812B_Strip_Effects_AddEffect+0x54>
        strip->effectsCounter++;
 8000cae:	f894 3150 	ldrb.w	r3, [r4, #336]	@ 0x150
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	f884 3150 	strb.w	r3, [r4, #336]	@ 0x150
}
 8000cb8:	b002      	add	sp, #8
 8000cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cbe:	b004      	add	sp, #16
 8000cc0:	4770      	bx	lr
                NOS_WS2812B_Strip_Effect_Breathe_Init(&strip->effects[strip->effectsCounter],effect.speed.data,effect.step.data,effect.minValue,effect.maxValue);
 8000cc2:	0140      	lsls	r0, r0, #5
 8000cc4:	3010      	adds	r0, #16
 8000cc6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8000cd0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8000cd4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8000cd8:	4420      	add	r0, r4
 8000cda:	f7ff ff8a 	bl	8000bf2 <NOS_WS2812B_Strip_Effect_Breathe_Init>
                break;
 8000cde:	e7e6      	b.n	8000cae <NOS_WS2812B_Strip_Effects_AddEffect+0x22>
                NOS_WS2812B_Strip_Effect_Rainbow_Init(&strip->effects[strip->effectsCounter],effect.speed.data,effect.step.data,effect.minValue,effect.maxValue);
 8000ce0:	0140      	lsls	r0, r0, #5
 8000ce2:	3010      	adds	r0, #16
 8000ce4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8000cee:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8000cf2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8000cf6:	4420      	add	r0, r4
 8000cf8:	f7ff ffb0 	bl	8000c5c <NOS_WS2812B_Strip_Effect_Rainbow_Init>
                break;
 8000cfc:	e7d7      	b.n	8000cae <NOS_WS2812B_Strip_Effects_AddEffect+0x22>

08000cfe <NOS_WS2812B_Strip_Effects_UpdateEffect>:
{
 8000cfe:	b084      	sub	sp, #16
 8000d00:	b500      	push	{lr}
 8000d02:	b083      	sub	sp, #12
 8000d04:	f10d 0c14 	add.w	ip, sp, #20
 8000d08:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8000d0c:	f89d 3034 	ldrb.w	r3, [sp, #52]	@ 0x34
    if(pos < 10)
 8000d10:	2b09      	cmp	r3, #9
 8000d12:	d805      	bhi.n	8000d20 <NOS_WS2812B_Strip_Effects_UpdateEffect+0x22>
        switch(effect.effectId)
 8000d14:	f89d 2033 	ldrb.w	r2, [sp, #51]	@ 0x33
 8000d18:	2a20      	cmp	r2, #32
 8000d1a:	d006      	beq.n	8000d2a <NOS_WS2812B_Strip_Effects_UpdateEffect+0x2c>
 8000d1c:	2a21      	cmp	r2, #33	@ 0x21
 8000d1e:	d014      	beq.n	8000d4a <NOS_WS2812B_Strip_Effects_UpdateEffect+0x4c>
}
 8000d20:	b003      	add	sp, #12
 8000d22:	f85d eb04 	ldr.w	lr, [sp], #4
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
                NOS_WS2812B_Strip_Effect_Breathe_Init(&strip->effects[pos],effect.speed.data,effect.step.data,effect.minValue,effect.maxValue);
 8000d2a:	015b      	lsls	r3, r3, #5
 8000d2c:	f103 0c10 	add.w	ip, r3, #16
 8000d30:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8000d3a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8000d3e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8000d42:	4460      	add	r0, ip
 8000d44:	f7ff ff55 	bl	8000bf2 <NOS_WS2812B_Strip_Effect_Breathe_Init>
                break;
 8000d48:	e7ea      	b.n	8000d20 <NOS_WS2812B_Strip_Effects_UpdateEffect+0x22>
                NOS_WS2812B_Strip_Effect_Rainbow_Init(&strip->effects[pos],effect.speed.data,effect.step.data,effect.minValue,effect.maxValue);
 8000d4a:	015b      	lsls	r3, r3, #5
 8000d4c:	f103 0c10 	add.w	ip, r3, #16
 8000d50:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8000d5a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8000d5e:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8000d62:	4460      	add	r0, ip
 8000d64:	f7ff ff7a 	bl	8000c5c <NOS_WS2812B_Strip_Effect_Rainbow_Init>
}
 8000d68:	e7da      	b.n	8000d20 <NOS_WS2812B_Strip_Effects_UpdateEffect+0x22>
	...

08000d6c <NOS_WS2812B_Strip_Effect_Rainbow_Handler>:

void NOS_WS2812B_Strip_Effect_Rainbow_Handler(WS2812B_Strip* strip,Effect_Struct* effect)
{
    if(strip != NULL)
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	f000 8101 	beq.w	8000f74 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x208>
{
 8000d72:	b570      	push	{r4, r5, r6, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	460c      	mov	r4, r1
 8000d78:	4605      	mov	r5, r0
    {
        if(effect != NULL)
 8000d7a:	b141      	cbz	r1, 8000d8e <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x22>
        {
            if(effect->enabled)
 8000d7c:	7f8b      	ldrb	r3, [r1, #30]
 8000d7e:	b133      	cbz	r3, 8000d8e <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x22>
            {
                if(effect->timer > effect->speed.data)
 8000d80:	8b0a      	ldrh	r2, [r1, #24]
 8000d82:	8a8b      	ldrh	r3, [r1, #20]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d804      	bhi.n	8000d92 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x26>

                    NOS_WS2812B_Strip_ColorFill(strip,curr);
                    NOS_WS2812B_Strip_Update(strip);
                    effect->timer = 0;
                }
                effect->timer++;
 8000d88:	8b23      	ldrh	r3, [r4, #24]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	8323      	strh	r3, [r4, #24]
            }
        }
    }
}
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd70      	pop	{r4, r5, r6, pc}
                    NOS_Math_SinValue_Handler(&effect->value);
 8000d92:	4608      	mov	r0, r1
 8000d94:	f7ff fcda 	bl	800074c <NOS_Math_SinValue_Handler>
                    uint16_t number = NOS_Math_GetSinValue(&effect->value);
 8000d98:	4620      	mov	r0, r4
 8000d9a:	f7ff fcd5 	bl	8000748 <NOS_Math_GetSinValue>
 8000d9e:	b282      	uxth	r2, r0
                    uint8_t iteration = number / 0x7F;
 8000da0:	4b75      	ldr	r3, [pc, #468]	@ (8000f78 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x20c>)
 8000da2:	fba3 1302 	umull	r1, r3, r3, r2
 8000da6:	1ad1      	subs	r1, r2, r3
 8000da8:	eb03 0051 	add.w	r0, r3, r1, lsr #1
 8000dac:	f3c0 1087 	ubfx	r0, r0, #6, #8
                    PixelColor curr = { 0,0,0 };
 8000db0:	2300      	movs	r3, #0
 8000db2:	f88d 3004 	strb.w	r3, [sp, #4]
 8000db6:	f88d 3005 	strb.w	r3, [sp, #5]
 8000dba:	f88d 3006 	strb.w	r3, [sp, #6]
                    number = number - 0x7F * iteration;
 8000dbe:	eba0 13c0 	sub.w	r3, r0, r0, lsl #7
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29e      	uxth	r6, r3
                    switch (iteration)
 8000dc8:	280b      	cmp	r0, #11
 8000dca:	d815      	bhi.n	8000df8 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8c>
 8000dcc:	e8df f000 	tbb	[pc, r0]
 8000dd0:	3f2f1e06 	.word	0x3f2f1e06
 8000dd4:	80705f50 	.word	0x80705f50
 8000dd8:	c1b1a091 	.word	0xc1b1a091
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000ddc:	f7ff fc38 	bl	8000650 <NOS_GetBaseColor>
 8000de0:	f88d 0004 	strb.w	r0, [sp, #4]
 8000de4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000de8:	f88d 3005 	strb.w	r3, [sp, #5]
 8000dec:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000df0:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.G = number;
 8000df4:	f88d 6005 	strb.w	r6, [sp, #5]
                    NOS_WS2812B_Strip_ColorFill(strip,curr);
 8000df8:	9901      	ldr	r1, [sp, #4]
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	f7ff fee0 	bl	8000bc0 <NOS_WS2812B_Strip_ColorFill>
                    NOS_WS2812B_Strip_Update(strip);
 8000e00:	4628      	mov	r0, r5
 8000e02:	f7ff fe9d 	bl	8000b40 <NOS_WS2812B_Strip_Update>
                    effect->timer = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	8323      	strh	r3, [r4, #24]
 8000e0a:	e7bd      	b.n	8000d88 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x1c>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000e0c:	f7ff fc20 	bl	8000650 <NOS_GetBaseColor>
 8000e10:	f88d 0004 	strb.w	r0, [sp, #4]
 8000e14:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000e18:	f88d 3005 	strb.w	r3, [sp, #5]
 8000e1c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000e20:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.G = 0x7F + number;
 8000e24:	f106 037f 	add.w	r3, r6, #127	@ 0x7f
 8000e28:	f88d 3005 	strb.w	r3, [sp, #5]
                        break;
 8000e2c:	e7e4      	b.n	8000df8 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8c>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000e2e:	f7ff fc0f 	bl	8000650 <NOS_GetBaseColor>
 8000e32:	f88d 0004 	strb.w	r0, [sp, #4]
 8000e36:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000e3a:	f88d 3005 	strb.w	r3, [sp, #5]
 8000e3e:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000e42:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.B = 0xFF - number;
 8000e46:	43f3      	mvns	r3, r6
 8000e48:	f88d 3006 	strb.w	r3, [sp, #6]
                        break;
 8000e4c:	e7d4      	b.n	8000df8 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8c>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000e4e:	f7ff fbff 	bl	8000650 <NOS_GetBaseColor>
 8000e52:	f88d 0004 	strb.w	r0, [sp, #4]
 8000e56:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000e5a:	f88d 3005 	strb.w	r3, [sp, #5]
 8000e5e:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000e62:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.B = 0x7F - number;
 8000e66:	f1c6 037f 	rsb	r3, r6, #127	@ 0x7f
 8000e6a:	f88d 3006 	strb.w	r3, [sp, #6]
                        break;
 8000e6e:	e7c3      	b.n	8000df8 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8c>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000e70:	f7ff fbee 	bl	8000650 <NOS_GetBaseColor>
 8000e74:	f88d 0004 	strb.w	r0, [sp, #4]
 8000e78:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000e7c:	f88d 3005 	strb.w	r3, [sp, #5]
 8000e80:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000e84:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.R = number;
 8000e88:	f88d 6004 	strb.w	r6, [sp, #4]
                        break;
 8000e8c:	e7b4      	b.n	8000df8 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8c>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000e8e:	f7ff fbdf 	bl	8000650 <NOS_GetBaseColor>
 8000e92:	f88d 0004 	strb.w	r0, [sp, #4]
 8000e96:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000e9a:	f88d 3005 	strb.w	r3, [sp, #5]
 8000e9e:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000ea2:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.R = 0x7F + number;
 8000ea6:	f106 037f 	add.w	r3, r6, #127	@ 0x7f
 8000eaa:	f88d 3004 	strb.w	r3, [sp, #4]
                        break;
 8000eae:	e7a3      	b.n	8000df8 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8c>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000eb0:	f7ff fbce 	bl	8000650 <NOS_GetBaseColor>
 8000eb4:	f88d 0004 	strb.w	r0, [sp, #4]
 8000eb8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000ebc:	f88d 3005 	strb.w	r3, [sp, #5]
 8000ec0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000ec4:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.G = 0xFF - number;
 8000ec8:	43f3      	mvns	r3, r6
 8000eca:	f88d 3005 	strb.w	r3, [sp, #5]
                        break;
 8000ece:	e793      	b.n	8000df8 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8c>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000ed0:	f7ff fbbe 	bl	8000650 <NOS_GetBaseColor>
 8000ed4:	f88d 0004 	strb.w	r0, [sp, #4]
 8000ed8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000edc:	f88d 3005 	strb.w	r3, [sp, #5]
 8000ee0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000ee4:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.G = 0x7F - number;
 8000ee8:	f1c6 037f 	rsb	r3, r6, #127	@ 0x7f
 8000eec:	f88d 3005 	strb.w	r3, [sp, #5]
                        break;
 8000ef0:	e782      	b.n	8000df8 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8c>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000ef2:	f7ff fbad 	bl	8000650 <NOS_GetBaseColor>
 8000ef6:	f88d 0004 	strb.w	r0, [sp, #4]
 8000efa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000efe:	f88d 3005 	strb.w	r3, [sp, #5]
 8000f02:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000f06:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.B = number;
 8000f0a:	f88d 6006 	strb.w	r6, [sp, #6]
                        break;
 8000f0e:	e773      	b.n	8000df8 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8c>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000f10:	f7ff fb9e 	bl	8000650 <NOS_GetBaseColor>
 8000f14:	f88d 0004 	strb.w	r0, [sp, #4]
 8000f18:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000f1c:	f88d 3005 	strb.w	r3, [sp, #5]
 8000f20:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000f24:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.B = 0x7F + number;
 8000f28:	f106 037f 	add.w	r3, r6, #127	@ 0x7f
 8000f2c:	f88d 3006 	strb.w	r3, [sp, #6]
                        break;
 8000f30:	e762      	b.n	8000df8 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8c>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000f32:	f7ff fb8d 	bl	8000650 <NOS_GetBaseColor>
 8000f36:	f88d 0004 	strb.w	r0, [sp, #4]
 8000f3a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000f3e:	f88d 3005 	strb.w	r3, [sp, #5]
 8000f42:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000f46:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.R = 0xFF - number;
 8000f4a:	43f3      	mvns	r3, r6
 8000f4c:	f88d 3004 	strb.w	r3, [sp, #4]
                        break;
 8000f50:	e752      	b.n	8000df8 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8c>
                        curr = NOS_GetBaseColor((NOS_BaseColors)iteration);
 8000f52:	f7ff fb7d 	bl	8000650 <NOS_GetBaseColor>
 8000f56:	f88d 0004 	strb.w	r0, [sp, #4]
 8000f5a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8000f5e:	f88d 3005 	strb.w	r3, [sp, #5]
 8000f62:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8000f66:	f88d 0006 	strb.w	r0, [sp, #6]
                        curr.R = 0x7F - number;
 8000f6a:	f1c6 037f 	rsb	r3, r6, #127	@ 0x7f
 8000f6e:	f88d 3004 	strb.w	r3, [sp, #4]
                        break;
 8000f72:	e741      	b.n	8000df8 <NOS_WS2812B_Strip_Effect_Rainbow_Handler+0x8c>
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	02040811 	.word	0x02040811

08000f7c <NOS_WS2812B_Strip_Effects_Handler>:
{
 8000f7c:	b538      	push	{r3, r4, r5, lr}
 8000f7e:	4605      	mov	r5, r0
    for(int i = 0; i < strip->effectsCounter; i++)
 8000f80:	2400      	movs	r4, #0
 8000f82:	e006      	b.n	8000f92 <NOS_WS2812B_Strip_Effects_Handler+0x16>
                NOS_WS2812B_Strip_Effect_Breathe_Handler(strip,&strip->effects[i]);
 8000f84:	0161      	lsls	r1, r4, #5
 8000f86:	3110      	adds	r1, #16
 8000f88:	4429      	add	r1, r5
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	f7ff fe49 	bl	8000c22 <NOS_WS2812B_Strip_Effect_Breathe_Handler>
    for(int i = 0; i < strip->effectsCounter; i++)
 8000f90:	3401      	adds	r4, #1
 8000f92:	f895 3150 	ldrb.w	r3, [r5, #336]	@ 0x150
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	dd0e      	ble.n	8000fb8 <NOS_WS2812B_Strip_Effects_Handler+0x3c>
        switch(strip->effects[i].effectId)
 8000f9a:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8000f9e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000fa2:	2b20      	cmp	r3, #32
 8000fa4:	d0ee      	beq.n	8000f84 <NOS_WS2812B_Strip_Effects_Handler+0x8>
 8000fa6:	2b21      	cmp	r3, #33	@ 0x21
 8000fa8:	d1f2      	bne.n	8000f90 <NOS_WS2812B_Strip_Effects_Handler+0x14>
                NOS_WS2812B_Strip_Effect_Rainbow_Handler(strip,&strip->effects[i]);
 8000faa:	0161      	lsls	r1, r4, #5
 8000fac:	3110      	adds	r1, #16
 8000fae:	4429      	add	r1, r5
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	f7ff fedb 	bl	8000d6c <NOS_WS2812B_Strip_Effect_Rainbow_Handler>
                break;
 8000fb6:	e7eb      	b.n	8000f90 <NOS_WS2812B_Strip_Effects_Handler+0x14>
}
 8000fb8:	bd38      	pop	{r3, r4, r5, pc}
	...

08000fbc <visInit>:
			frameBuffer[i*3 + 2] = 0;
	}
}

void visInit()
{
 8000fbc:	b508      	push	{r3, lr}
		// Set output channel/pin, GPIO_PIN_0 = 0, for GPIO_PIN_5 = 5 - this has to correspond to WS2812B_PINS
		ws2812b.item[0].channel = 4;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <visInit+0x30>)
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	731a      	strb	r2, [r3, #12]
		ws2812b.item[0].frameBufferPointer = frameBuffer1;
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <visInit+0x34>)
 8000fc6:	601a      	str	r2, [r3, #0]
	    ws2812b.item[0].frameBufferSize = sizeof(frameBuffer1);
 8000fc8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000fcc:	605a      	str	r2, [r3, #4]
		ws2812b.item[1].channel = 5;
 8000fce:	2105      	movs	r1, #5
 8000fd0:	7719      	strb	r1, [r3, #28]
		ws2812b.item[1].frameBufferPointer = frameBuffer2;
 8000fd2:	4908      	ldr	r1, [pc, #32]	@ (8000ff4 <visInit+0x38>)
 8000fd4:	6119      	str	r1, [r3, #16]
	    ws2812b.item[1].frameBufferSize = sizeof(frameBuffer2);
 8000fd6:	615a      	str	r2, [r3, #20]
		ws2812b.item[2].channel = 6;
 8000fd8:	2106      	movs	r1, #6
 8000fda:	f883 102c 	strb.w	r1, [r3, #44]	@ 0x2c
		ws2812b.item[2].frameBufferPointer = frameBuffer3;
 8000fde:	4906      	ldr	r1, [pc, #24]	@ (8000ff8 <visInit+0x3c>)
 8000fe0:	6219      	str	r1, [r3, #32]
	    ws2812b.item[2].frameBufferSize = sizeof(frameBuffer3);
 8000fe2:	625a      	str	r2, [r3, #36]	@ 0x24
	ws2812b_init();
 8000fe4:	f000 fae8 	bl	80015b8 <ws2812b_init>
}
 8000fe8:	bd08      	pop	{r3, pc}
 8000fea:	bf00      	nop
 8000fec:	20000ae0 	.word	0x20000ae0
 8000ff0:	20000630 	.word	0x20000630
 8000ff4:	20000330 	.word	0x20000330
 8000ff8:	20000030 	.word	0x20000030

08000ffc <visHandle>:


void visHandle()
{
 8000ffc:	b508      	push	{r3, lr}

	if(ws2812b.transferComplete)
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <visHandle+0x1c>)
 8001000:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001004:	b903      	cbnz	r3, 8001008 <visHandle+0xc>

		// Signal that buffer is changed and transfer new data
		ws2812b.startTransfer = 1;
		ws2812b_handle();
	}
}
 8001006:	bd08      	pop	{r3, pc}
		ws2812b.startTransfer = 1;
 8001008:	4b03      	ldr	r3, [pc, #12]	@ (8001018 <visHandle+0x1c>)
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		ws2812b_handle();
 8001010:	f000 fae0 	bl	80015d4 <ws2812b_handle>
}
 8001014:	e7f7      	b.n	8001006 <visHandle+0xa>
 8001016:	bf00      	nop
 8001018:	20000ae0 	.word	0x20000ae0

0800101c <ws2812b_set_pixel>:
}



static void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
{
 800101c:	b470      	push	{r4, r5, r6}

	// Apply gamma
	red = gammaTable[red];
 800101e:	4e2e      	ldr	r6, [pc, #184]	@ (80010d8 <ws2812b_set_pixel+0xbc>)
 8001020:	5cb4      	ldrb	r4, [r6, r2]
	green = gammaTable[green];
 8001022:	5cf5      	ldrb	r5, [r6, r3]
	blue = gammaTable[blue];
 8001024:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001028:	5cf2      	ldrb	r2, [r6, r3]


	uint32_t calcCol = (column*24);
 800102a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	uint32_t invRed = ~red;
 800102e:	43e4      	mvns	r4, r4
	uint32_t invGreen = ~green;
 8001030:	43ed      	mvns	r5, r5
	uint32_t invBlue = ~blue;
 8001032:	43d2      	mvns	r2, r2
	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invRed)<<7) & 0x80)>>7)<<row);
	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
#elif defined(SETPIX_4)

	// Bitband optimizations with pure increments, 5us interrupts
	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 8001034:	4929      	ldr	r1, [pc, #164]	@ (80010dc <ws2812b_set_pixel+0xc0>)
 8001036:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800103a:	f101 4161 	add.w	r1, r1, #3774873600	@ 0xe1000000
 800103e:	f501 1180 	add.w	r1, r1, #1048576	@ 0x100000
 8001042:	014e      	lsls	r6, r1, #5
 8001044:	0083      	lsls	r3, r0, #2
 8001046:	eb03 1341 	add.w	r3, r3, r1, lsl #5

	*bitBand =  (invGreen >> 7);
 800104a:	09e9      	lsrs	r1, r5, #7
 800104c:	f846 1020 	str.w	r1, [r6, r0, lsl #2]
	bitBand+=16;

	*bitBand = (invGreen >> 6);
 8001050:	09a9      	lsrs	r1, r5, #6
 8001052:	6419      	str	r1, [r3, #64]	@ 0x40
	bitBand+=16;

	*bitBand = (invGreen >> 5);
 8001054:	0969      	lsrs	r1, r5, #5
 8001056:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
	bitBand+=16;

	*bitBand = (invGreen >> 4);
 800105a:	0929      	lsrs	r1, r5, #4
 800105c:	f8c3 10c0 	str.w	r1, [r3, #192]	@ 0xc0
	bitBand+=16;

	*bitBand = (invGreen >> 3);
 8001060:	08e9      	lsrs	r1, r5, #3
 8001062:	f8c3 1100 	str.w	r1, [r3, #256]	@ 0x100
	bitBand+=16;

	*bitBand = (invGreen >> 2);
 8001066:	08a9      	lsrs	r1, r5, #2
 8001068:	f8c3 1140 	str.w	r1, [r3, #320]	@ 0x140
	bitBand+=16;

	*bitBand = (invGreen >> 1);
 800106c:	0869      	lsrs	r1, r5, #1
 800106e:	f8c3 1180 	str.w	r1, [r3, #384]	@ 0x180
	bitBand+=16;

	*bitBand = (invGreen >> 0);
 8001072:	f8c3 51c0 	str.w	r5, [r3, #448]	@ 0x1c0
	bitBand+=16;

	// RED
	*bitBand =  (invRed >> 7);
 8001076:	09e1      	lsrs	r1, r4, #7
 8001078:	f8c3 1200 	str.w	r1, [r3, #512]	@ 0x200
	bitBand+=16;

	*bitBand = (invRed >> 6);
 800107c:	09a1      	lsrs	r1, r4, #6
 800107e:	f8c3 1240 	str.w	r1, [r3, #576]	@ 0x240
	bitBand+=16;

	*bitBand = (invRed >> 5);
 8001082:	0961      	lsrs	r1, r4, #5
 8001084:	f8c3 1280 	str.w	r1, [r3, #640]	@ 0x280
	bitBand+=16;

	*bitBand = (invRed >> 4);
 8001088:	0921      	lsrs	r1, r4, #4
 800108a:	f8c3 12c0 	str.w	r1, [r3, #704]	@ 0x2c0
	bitBand+=16;

	*bitBand = (invRed >> 3);
 800108e:	08e1      	lsrs	r1, r4, #3
 8001090:	f8c3 1300 	str.w	r1, [r3, #768]	@ 0x300
	bitBand+=16;

	*bitBand = (invRed >> 2);
 8001094:	08a1      	lsrs	r1, r4, #2
 8001096:	f8c3 1340 	str.w	r1, [r3, #832]	@ 0x340
	bitBand+=16;

	*bitBand = (invRed >> 1);
 800109a:	0861      	lsrs	r1, r4, #1
 800109c:	f8c3 1380 	str.w	r1, [r3, #896]	@ 0x380
	bitBand+=16;

	*bitBand = (invRed >> 0);
 80010a0:	f8c3 43c0 	str.w	r4, [r3, #960]	@ 0x3c0
	bitBand+=16;

	// BLUE
	*bitBand =  (invBlue >> 7);
 80010a4:	09d1      	lsrs	r1, r2, #7
 80010a6:	f8c3 1400 	str.w	r1, [r3, #1024]	@ 0x400
	bitBand+=16;

	*bitBand = (invBlue >> 6);
 80010aa:	0991      	lsrs	r1, r2, #6
 80010ac:	f8c3 1440 	str.w	r1, [r3, #1088]	@ 0x440
	bitBand+=16;

	*bitBand = (invBlue >> 5);
 80010b0:	0951      	lsrs	r1, r2, #5
 80010b2:	f8c3 1480 	str.w	r1, [r3, #1152]	@ 0x480
	bitBand+=16;

	*bitBand = (invBlue >> 4);
 80010b6:	0911      	lsrs	r1, r2, #4
 80010b8:	f8c3 14c0 	str.w	r1, [r3, #1216]	@ 0x4c0
	bitBand+=16;

	*bitBand = (invBlue >> 3);
 80010bc:	08d1      	lsrs	r1, r2, #3
 80010be:	f8c3 1500 	str.w	r1, [r3, #1280]	@ 0x500
	bitBand+=16;

	*bitBand = (invBlue >> 2);
 80010c2:	0891      	lsrs	r1, r2, #2
 80010c4:	f8c3 1540 	str.w	r1, [r3, #1344]	@ 0x540
	bitBand+=16;

	*bitBand = (invBlue >> 1);
 80010c8:	0851      	lsrs	r1, r2, #1
 80010ca:	f8c3 1580 	str.w	r1, [r3, #1408]	@ 0x580
	bitBand+=16;

	*bitBand = (invBlue >> 0);
 80010ce:	f8c3 25c0 	str.w	r2, [r3, #1472]	@ 0x5c0
    ws2812bDmaBitBuffer[5] = cur5;
    ws2812bDmaBitBuffer[6] = cur6;
    ws2812bDmaBitBuffer[7] = cur7;

#endif
}
 80010d2:	bc70      	pop	{r4, r5, r6}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	0800363c 	.word	0x0800363c
 80010dc:	20000a80 	.word	0x20000a80

080010e0 <loadNextFramebufferData>:
{
 80010e0:	b570      	push	{r4, r5, r6, lr}
 80010e2:	b082      	sub	sp, #8
	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80010e4:	6805      	ldr	r5, [r0, #0]
 80010e6:	6884      	ldr	r4, [r0, #8]
 80010e8:	1c63      	adds	r3, r4, #1
 80010ea:	6083      	str	r3, [r0, #8]
 80010ec:	5d2a      	ldrb	r2, [r5, r4]
	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80010ee:	1ca6      	adds	r6, r4, #2
 80010f0:	6086      	str	r6, [r0, #8]
 80010f2:	5ceb      	ldrb	r3, [r5, r3]
	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 80010f4:	3403      	adds	r4, #3
 80010f6:	6084      	str	r4, [r0, #8]
 80010f8:	5dad      	ldrb	r5, [r5, r6]
	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 80010fa:	6846      	ldr	r6, [r0, #4]
 80010fc:	42b4      	cmp	r4, r6
 80010fe:	d006      	beq.n	800110e <loadNextFramebufferData+0x2e>
	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 8001100:	9500      	str	r5, [sp, #0]
 8001102:	b289      	uxth	r1, r1
 8001104:	7b00      	ldrb	r0, [r0, #12]
 8001106:	f7ff ff89 	bl	800101c <ws2812b_set_pixel>
}
 800110a:	b002      	add	sp, #8
 800110c:	bd70      	pop	{r4, r5, r6, pc}
		bItem->frameBufferCounter = 0;
 800110e:	2400      	movs	r4, #0
 8001110:	6084      	str	r4, [r0, #8]
 8001112:	e7f5      	b.n	8001100 <loadNextFramebufferData+0x20>

08001114 <DMA_TransferCompleteHandler>:
		LED5_PORT->BSRR = LED5_PIN;
 8001114:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <DMA_TransferCompleteHandler+0x94>)
 8001116:	2202      	movs	r2, #2
 8001118:	611a      	str	r2, [r3, #16]
	ws2812b.repeatCounter++;
 800111a:	4a24      	ldr	r2, [pc, #144]	@ (80011ac <DMA_TransferCompleteHandler+0x98>)
 800111c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800111e:	3301      	adds	r3, #1
 8001120:	6393      	str	r3, [r2, #56]	@ 0x38
	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS / 2)
 8001122:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8001126:	d002      	beq.n	800112e <DMA_TransferCompleteHandler+0x1a>
{
 8001128:	b510      	push	{r4, lr}
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 800112a:	2400      	movs	r4, #0
 800112c:	e036      	b.n	800119c <DMA_TransferCompleteHandler+0x88>
		ws2812b.repeatCounter = 0;
 800112e:	4613      	mov	r3, r2
 8001130:	2200      	movs	r2, #0
 8001132:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_ENABLE_IT(&Tim2Handle, TIM_IT_UPDATE);
 8001134:	4a1e      	ldr	r2, [pc, #120]	@ (80011b0 <DMA_TransferCompleteHandler+0x9c>)
 8001136:	6811      	ldr	r1, [r2, #0]
 8001138:	68cb      	ldr	r3, [r1, #12]
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	60cb      	str	r3, [r1, #12]
		__HAL_DMA_DISABLE(&dmaUpdate);
 8001140:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <DMA_TransferCompleteHandler+0xa0>)
 8001142:	6819      	ldr	r1, [r3, #0]
 8001144:	680b      	ldr	r3, [r1, #0]
 8001146:	f023 0301 	bic.w	r3, r3, #1
 800114a:	600b      	str	r3, [r1, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 800114c:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <DMA_TransferCompleteHandler+0xa4>)
 800114e:	6819      	ldr	r1, [r3, #0]
 8001150:	680b      	ldr	r3, [r1, #0]
 8001152:	f023 0301 	bic.w	r3, r3, #1
 8001156:	600b      	str	r3, [r1, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 8001158:	4b18      	ldr	r3, [pc, #96]	@ (80011bc <DMA_TransferCompleteHandler+0xa8>)
 800115a:	6819      	ldr	r1, [r3, #0]
 800115c:	680b      	ldr	r3, [r1, #0]
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	600b      	str	r3, [r1, #0]
		__HAL_TIM_DISABLE_DMA(&Tim2Handle, TIM_DMA_UPDATE);
 8001164:	6813      	ldr	r3, [r2, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800116c:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&Tim2Handle, TIM_DMA_CC1);
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001174:	60da      	str	r2, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&Tim2Handle, TIM_DMA_CC2);
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800117c:	60da      	str	r2, [r3, #12]
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <DMA_TransferCompleteHandler+0xac>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <DMA_TransferCompleteHandler+0x94>)
 8001184:	611a      	str	r2, [r3, #16]
		LED5_PORT->BRR = LED5_PIN;
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <DMA_TransferCompleteHandler+0x94>)
 8001188:	2202      	movs	r2, #2
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	4770      	bx	lr
			loadNextFramebufferData(&ws2812b.item[i], 1);
 800118e:	2101      	movs	r1, #1
 8001190:	4806      	ldr	r0, [pc, #24]	@ (80011ac <DMA_TransferCompleteHandler+0x98>)
 8001192:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8001196:	f7ff ffa3 	bl	80010e0 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 800119a:	3401      	adds	r4, #1
 800119c:	2c02      	cmp	r4, #2
 800119e:	d9f6      	bls.n	800118e <DMA_TransferCompleteHandler+0x7a>
		LED5_PORT->BRR = LED5_PIN;
 80011a0:	4b01      	ldr	r3, [pc, #4]	@ (80011a8 <DMA_TransferCompleteHandler+0x94>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	615a      	str	r2, [r3, #20]
}
 80011a6:	bd10      	pop	{r4, pc}
 80011a8:	40010800 	.word	0x40010800
 80011ac:	20000ae0 	.word	0x20000ae0
 80011b0:	20000a38 	.word	0x20000a38
 80011b4:	200009b8 	.word	0x200009b8
 80011b8:	20000974 	.word	0x20000974
 80011bc:	20000930 	.word	0x20000930
 80011c0:	20000000 	.word	0x20000000

080011c4 <WS2812_sendbuf>:
{
 80011c4:	b538      	push	{r3, r4, r5, lr}
	ws2812b.transferComplete = 0;
 80011c6:	2500      	movs	r5, #0
 80011c8:	4b28      	ldr	r3, [pc, #160]	@ (800126c <WS2812_sendbuf+0xa8>)
 80011ca:	f883 5030 	strb.w	r5, [r3, #48]	@ 0x30
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80011ce:	e00c      	b.n	80011ea <WS2812_sendbuf+0x26>
		ws2812b.item[i].frameBufferCounter = 0;
 80011d0:	4c26      	ldr	r4, [pc, #152]	@ (800126c <WS2812_sendbuf+0xa8>)
 80011d2:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 80011d6:	2100      	movs	r1, #0
 80011d8:	60a1      	str	r1, [r4, #8]
		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 80011da:	4620      	mov	r0, r4
 80011dc:	f7ff ff80 	bl	80010e0 <loadNextFramebufferData>
		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 80011e0:	2101      	movs	r1, #1
 80011e2:	4620      	mov	r0, r4
 80011e4:	f7ff ff7c 	bl	80010e0 <loadNextFramebufferData>
	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80011e8:	3501      	adds	r5, #1
 80011ea:	2d02      	cmp	r5, #2
 80011ec:	d9f0      	bls.n	80011d0 <WS2812_sendbuf+0xc>
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TC2 | DMA_FLAG_HT2 | DMA_FLAG_TE2);
 80011ee:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <WS2812_sendbuf+0xac>)
 80011f0:	22e0      	movs	r2, #224	@ 0xe0
 80011f2:	605a      	str	r2, [r3, #4]
	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TC5 | DMA_FLAG_HT5 | DMA_FLAG_TE5);
 80011f4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011f8:	605a      	str	r2, [r3, #4]
	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TC7 | DMA_FLAG_HT7 | DMA_FLAG_TE7);
 80011fa:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80011fe:	605a      	str	r2, [r3, #4]
	dmaUpdate.Instance->CNDTR = BUFFER_SIZE;
 8001200:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <WS2812_sendbuf+0xb0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2230      	movs	r2, #48	@ 0x30
 8001206:	605a      	str	r2, [r3, #4]
	dmaCC1.Instance->CNDTR = BUFFER_SIZE;
 8001208:	4c1b      	ldr	r4, [pc, #108]	@ (8001278 <WS2812_sendbuf+0xb4>)
 800120a:	6821      	ldr	r1, [r4, #0]
 800120c:	604a      	str	r2, [r1, #4]
	dmaCC2.Instance->CNDTR = BUFFER_SIZE;
 800120e:	481b      	ldr	r0, [pc, #108]	@ (800127c <WS2812_sendbuf+0xb8>)
 8001210:	6801      	ldr	r1, [r0, #0]
 8001212:	604a      	str	r2, [r1, #4]
	__HAL_TIM_CLEAR_FLAG(&Tim2Handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | TIM_FLAG_CC4);
 8001214:	491a      	ldr	r1, [pc, #104]	@ (8001280 <WS2812_sendbuf+0xbc>)
 8001216:	680a      	ldr	r2, [r1, #0]
 8001218:	f06f 051f 	mvn.w	r5, #31
 800121c:	6115      	str	r5, [r2, #16]
	__HAL_DMA_ENABLE(&dmaUpdate);
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC1);
 8001226:	6822      	ldr	r2, [r4, #0]
 8001228:	6813      	ldr	r3, [r2, #0]
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6013      	str	r3, [r2, #0]
	__HAL_DMA_ENABLE(&dmaCC2);
 8001230:	6802      	ldr	r2, [r0, #0]
 8001232:	6813      	ldr	r3, [r2, #0]
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6013      	str	r3, [r2, #0]
	__HAL_TIM_ENABLE_DMA(&Tim2Handle, TIM_DMA_UPDATE);
 800123a:	680b      	ldr	r3, [r1, #0]
 800123c:	68da      	ldr	r2, [r3, #12]
 800123e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001242:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&Tim2Handle, TIM_DMA_CC1);
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800124a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&Tim2Handle, TIM_DMA_CC2);
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001252:	60da      	str	r2, [r3, #12]
	TIM2->CNT = tim_period-1;
 8001254:	4a0b      	ldr	r2, [pc, #44]	@ (8001284 <WS2812_sendbuf+0xc0>)
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	3a01      	subs	r2, #1
 800125a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800125e:	624a      	str	r2, [r1, #36]	@ 0x24
	__HAL_TIM_ENABLE(&Tim2Handle);
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]
}
 8001268:	bd38      	pop	{r3, r4, r5, pc}
 800126a:	bf00      	nop
 800126c:	20000ae0 	.word	0x20000ae0
 8001270:	40020000 	.word	0x40020000
 8001274:	200009b8 	.word	0x200009b8
 8001278:	20000974 	.word	0x20000974
 800127c:	20000930 	.word	0x20000930
 8001280:	20000a38 	.word	0x20000a38
 8001284:	200009fc 	.word	0x200009fc

08001288 <DMA_TransferHalfHandler>:
{
 8001288:	b510      	push	{r4, lr}
 800128a:	b082      	sub	sp, #8
		LED4_PORT->BSRR = LED4_PIN;
 800128c:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <DMA_TransferHalfHandler+0x48>)
 800128e:	2201      	movs	r2, #1
 8001290:	611a      	str	r2, [r3, #16]
	if(ws2812b.repeatCounter != (WS2812B_NUMBER_OF_LEDS / 2 - 1))
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <DMA_TransferHalfHandler+0x4c>)
 8001294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001296:	f240 137f 	movw	r3, #383	@ 0x17f
 800129a:	429a      	cmp	r2, r3
 800129c:	d00f      	beq.n	80012be <DMA_TransferHalfHandler+0x36>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 800129e:	2400      	movs	r4, #0
 80012a0:	e006      	b.n	80012b0 <DMA_TransferHalfHandler+0x28>
			loadNextFramebufferData(&ws2812b.item[i], 0);
 80012a2:	2100      	movs	r1, #0
 80012a4:	480b      	ldr	r0, [pc, #44]	@ (80012d4 <DMA_TransferHalfHandler+0x4c>)
 80012a6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80012aa:	f7ff ff19 	bl	80010e0 <loadNextFramebufferData>
		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 80012ae:	3401      	adds	r4, #1
 80012b0:	2c02      	cmp	r4, #2
 80012b2:	d9f6      	bls.n	80012a2 <DMA_TransferHalfHandler+0x1a>
		LED4_PORT->BRR = LED4_PIN;
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <DMA_TransferHalfHandler+0x48>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	615a      	str	r2, [r3, #20]
}
 80012ba:	b002      	add	sp, #8
 80012bc:	bd10      	pop	{r4, pc}
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 80012be:	2000      	movs	r0, #0
 80012c0:	9000      	str	r0, [sp, #0]
 80012c2:	4603      	mov	r3, r0
 80012c4:	4602      	mov	r2, r0
 80012c6:	4601      	mov	r1, r0
 80012c8:	f7ff fea8 	bl	800101c <ws2812b_set_pixel>
 80012cc:	e7f2      	b.n	80012b4 <DMA_TransferHalfHandler+0x2c>
 80012ce:	bf00      	nop
 80012d0:	40010800 	.word	0x40010800
 80012d4:	20000ae0 	.word	0x20000ae0

080012d8 <ws2812b_gpio_init>:
{
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	b087      	sub	sp, #28
	WS2812B_GPIO_CLK_ENABLE();
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <ws2812b_gpio_init+0x54>)
 80012de:	699a      	ldr	r2, [r3, #24]
 80012e0:	f042 0204 	orr.w	r2, r2, #4
 80012e4:	619a      	str	r2, [r3, #24]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Pin       = WS2812B_PINS;
 80012f0:	2370      	movs	r3, #112	@ 0x70
 80012f2:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
 80012f4:	2501      	movs	r5, #1
 80012f6:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80012f8:	2700      	movs	r7, #0
 80012fa:	9704      	str	r7, [sp, #16]
	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 80012fc:	2602      	movs	r6, #2
 80012fe:	9605      	str	r6, [sp, #20]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 8001300:	4c0b      	ldr	r4, [pc, #44]	@ (8001330 <ws2812b_gpio_init+0x58>)
 8001302:	a902      	add	r1, sp, #8
 8001304:	4620      	mov	r0, r4
 8001306:	f000 fe27 	bl	8001f58 <HAL_GPIO_Init>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	9503      	str	r5, [sp, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	9704      	str	r7, [sp, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	9305      	str	r3, [sp, #20]
		GPIO_InitStruct.Pin = LED4_PIN;
 8001312:	9502      	str	r5, [sp, #8]
		HAL_GPIO_Init(LED4_PORT, &GPIO_InitStruct);
 8001314:	a902      	add	r1, sp, #8
 8001316:	4620      	mov	r0, r4
 8001318:	f000 fe1e 	bl	8001f58 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = LED5_PIN;
 800131c:	9602      	str	r6, [sp, #8]
		HAL_GPIO_Init(LED5_PORT, &GPIO_InitStruct);
 800131e:	a902      	add	r1, sp, #8
 8001320:	4620      	mov	r0, r4
 8001322:	f000 fe19 	bl	8001f58 <HAL_GPIO_Init>
}
 8001326:	b007      	add	sp, #28
 8001328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	40010800 	.word	0x40010800

08001334 <DMA_init>:
{
 8001334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001338:	b083      	sub	sp, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 800133a:	4b34      	ldr	r3, [pc, #208]	@ (800140c <DMA_init+0xd8>)
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	f042 0201 	orr.w	r2, r2, #1
 8001342:	615a      	str	r2, [r3, #20]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	9b01      	ldr	r3, [sp, #4]
	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800134e:	4c30      	ldr	r4, [pc, #192]	@ (8001410 <DMA_init+0xdc>)
 8001350:	f04f 0910 	mov.w	r9, #16
 8001354:	f8c4 9004 	str.w	r9, [r4, #4]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 8001358:	2500      	movs	r5, #0
 800135a:	60a5      	str	r5, [r4, #8]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 800135c:	60e5      	str	r5, [r4, #12]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800135e:	f44f 7800 	mov.w	r8, #512	@ 0x200
 8001362:	f8c4 8010 	str.w	r8, [r4, #16]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001366:	f44f 6b00 	mov.w	fp, #2048	@ 0x800
 800136a:	f8c4 b014 	str.w	fp, [r4, #20]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 800136e:	2720      	movs	r7, #32
 8001370:	61a7      	str	r7, [r4, #24]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001372:	f44f 5640 	mov.w	r6, #12288	@ 0x3000
 8001376:	61e6      	str	r6, [r4, #28]
	dmaUpdate.Instance = DMA1_Channel2;
 8001378:	4b26      	ldr	r3, [pc, #152]	@ (8001414 <DMA_init+0xe0>)
 800137a:	6023      	str	r3, [r4, #0]
	HAL_DMA_Init(&dmaUpdate);
 800137c:	4620      	mov	r0, r4
 800137e:	f000 fc3f 	bl	8001c00 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 8001382:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8001418 <DMA_init+0xe4>
 8001386:	2330      	movs	r3, #48	@ 0x30
 8001388:	4652      	mov	r2, sl
 800138a:	4924      	ldr	r1, [pc, #144]	@ (800141c <DMA_init+0xe8>)
 800138c:	4620      	mov	r0, r4
 800138e:	f000 fc6d 	bl	8001c6c <HAL_DMA_Start>
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001392:	4c23      	ldr	r4, [pc, #140]	@ (8001420 <DMA_init+0xec>)
 8001394:	f8c4 9004 	str.w	r9, [r4, #4]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001398:	60a5      	str	r5, [r4, #8]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 800139a:	2380      	movs	r3, #128	@ 0x80
 800139c:	60e3      	str	r3, [r4, #12]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800139e:	f8c4 8010 	str.w	r8, [r4, #16]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013a6:	6163      	str	r3, [r4, #20]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 80013a8:	61a7      	str	r7, [r4, #24]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013aa:	61e6      	str	r6, [r4, #28]
	dmaCC1.Instance = DMA1_Channel5;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <DMA_init+0xf0>)
 80013ae:	6023      	str	r3, [r4, #0]
	HAL_DMA_Init(&dmaCC1);
 80013b0:	4620      	mov	r0, r4
 80013b2:	f000 fc25 	bl	8001c00 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&WS2812B_PORT->BRR, BUFFER_SIZE);
 80013b6:	2330      	movs	r3, #48	@ 0x30
 80013b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001428 <DMA_init+0xf4>)
 80013ba:	491c      	ldr	r1, [pc, #112]	@ (800142c <DMA_init+0xf8>)
 80013bc:	4620      	mov	r0, r4
 80013be:	f000 fc55 	bl	8001c6c <HAL_DMA_Start>
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c2:	4c1b      	ldr	r4, [pc, #108]	@ (8001430 <DMA_init+0xfc>)
 80013c4:	f8c4 9004 	str.w	r9, [r4, #4]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c8:	60a5      	str	r5, [r4, #8]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 80013ca:	60e5      	str	r5, [r4, #12]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013cc:	f8c4 8010 	str.w	r8, [r4, #16]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013d0:	f8c4 b014 	str.w	fp, [r4, #20]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 80013d4:	61a7      	str	r7, [r4, #24]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013d6:	61e6      	str	r6, [r4, #28]
	dmaCC2.Instance = DMA1_Channel7;
 80013d8:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <DMA_init+0x100>)
 80013da:	6023      	str	r3, [r4, #0]
	HAL_DMA_Init(&dmaCC2);
 80013dc:	4620      	mov	r0, r4
 80013de:	f000 fc0f 	bl	8001c00 <HAL_DMA_Init>
	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <DMA_init+0x104>)
 80013e4:	62a3      	str	r3, [r4, #40]	@ 0x28
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <DMA_init+0x108>)
 80013e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80013ea:	462a      	mov	r2, r5
 80013ec:	4629      	mov	r1, r5
 80013ee:	2011      	movs	r0, #17
 80013f0:	f000 fbbe 	bl	8001b70 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80013f4:	2011      	movs	r0, #17
 80013f6:	f000 fbcb 	bl	8001b90 <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 80013fa:	2330      	movs	r3, #48	@ 0x30
 80013fc:	4652      	mov	r2, sl
 80013fe:	4910      	ldr	r1, [pc, #64]	@ (8001440 <DMA_init+0x10c>)
 8001400:	4620      	mov	r0, r4
 8001402:	f000 fc5c 	bl	8001cbe <HAL_DMA_Start_IT>
}
 8001406:	b003      	add	sp, #12
 8001408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800140c:	40021000 	.word	0x40021000
 8001410:	200009b8 	.word	0x200009b8
 8001414:	4002001c 	.word	0x4002001c
 8001418:	40010810 	.word	0x40010810
 800141c:	20000004 	.word	0x20000004
 8001420:	20000974 	.word	0x20000974
 8001424:	40020058 	.word	0x40020058
 8001428:	40010814 	.word	0x40010814
 800142c:	20000a80 	.word	0x20000a80
 8001430:	20000930 	.word	0x20000930
 8001434:	40020080 	.word	0x40020080
 8001438:	08001115 	.word	0x08001115
 800143c:	08001289 	.word	0x08001289
 8001440:	20000000 	.word	0x20000000

08001444 <TIM2_init>:
{
 8001444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001448:	b082      	sub	sp, #8
	__HAL_RCC_TIM2_CLK_ENABLE();
 800144a:	4b2b      	ldr	r3, [pc, #172]	@ (80014f8 <TIM2_init+0xb4>)
 800144c:	69da      	ldr	r2, [r3, #28]
 800144e:	f042 0201 	orr.w	r2, r2, #1
 8001452:	61da      	str	r2, [r3, #28]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	9b01      	ldr	r3, [sp, #4]
	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 800145e:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <TIM2_init+0xb8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	4a26      	ldr	r2, [pc, #152]	@ (8001500 <TIM2_init+0xbc>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	4a25      	ldr	r2, [pc, #148]	@ (8001504 <TIM2_init+0xc0>)
 800146e:	6013      	str	r3, [r2, #0]
	uint32_t cc1 = (10 * tim_period) / 36;
 8001470:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001474:	004a      	lsls	r2, r1, #1
 8001476:	4f24      	ldr	r7, [pc, #144]	@ (8001508 <TIM2_init+0xc4>)
 8001478:	fba7 1702 	umull	r1, r7, r7, r2
 800147c:	08ff      	lsrs	r7, r7, #3
	uint32_t cc2 = (10 * tim_period) / 15;
 800147e:	4923      	ldr	r1, [pc, #140]	@ (800150c <TIM2_init+0xc8>)
 8001480:	fba1 1202 	umull	r1, r2, r1, r2
 8001484:	08d6      	lsrs	r6, r2, #3
	Tim2Handle.Instance = TIM2;
 8001486:	4d22      	ldr	r5, [pc, #136]	@ (8001510 <TIM2_init+0xcc>)
 8001488:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800148c:	602a      	str	r2, [r5, #0]
	Tim2Handle.Init.Period            = tim_period;
 800148e:	60eb      	str	r3, [r5, #12]
	Tim2Handle.Init.RepetitionCounter = 0;
 8001490:	2400      	movs	r4, #0
 8001492:	616c      	str	r4, [r5, #20]
	Tim2Handle.Init.Prescaler         = 0;
 8001494:	606c      	str	r4, [r5, #4]
	Tim2Handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8001496:	612c      	str	r4, [r5, #16]
	Tim2Handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8001498:	60ac      	str	r4, [r5, #8]
	HAL_TIM_PWM_Init(&Tim2Handle);
 800149a:	4628      	mov	r0, r5
 800149c:	f001 fb9a 	bl	8002bd4 <HAL_TIM_PWM_Init>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014a0:	4622      	mov	r2, r4
 80014a2:	4621      	mov	r1, r4
 80014a4:	201c      	movs	r0, #28
 80014a6:	f000 fb63 	bl	8001b70 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014aa:	201c      	movs	r0, #28
 80014ac:	f000 fb70 	bl	8001b90 <HAL_NVIC_EnableIRQ>
	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 80014b0:	4918      	ldr	r1, [pc, #96]	@ (8001514 <TIM2_init+0xd0>)
 80014b2:	f04f 0860 	mov.w	r8, #96	@ 0x60
 80014b6:	f8c1 8000 	str.w	r8, [r1]
	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 80014ba:	608c      	str	r4, [r1, #8]
	tim2OC1.Pulse        = cc1;
 80014bc:	604f      	str	r7, [r1, #4]
	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 80014be:	60cc      	str	r4, [r1, #12]
	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 80014c0:	610c      	str	r4, [r1, #16]
	HAL_TIM_PWM_ConfigChannel(&Tim2Handle, &tim2OC1, TIM_CHANNEL_1);
 80014c2:	4622      	mov	r2, r4
 80014c4:	4628      	mov	r0, r5
 80014c6:	f001 fbdf 	bl	8002c88 <HAL_TIM_PWM_ConfigChannel>
	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 80014ca:	4913      	ldr	r1, [pc, #76]	@ (8001518 <TIM2_init+0xd4>)
 80014cc:	f8c1 8000 	str.w	r8, [r1]
	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 80014d0:	608c      	str	r4, [r1, #8]
	tim2OC2.Pulse        = cc2;
 80014d2:	604e      	str	r6, [r1, #4]
	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 80014d4:	60cc      	str	r4, [r1, #12]
	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 80014d6:	610c      	str	r4, [r1, #16]
	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 80014d8:	614c      	str	r4, [r1, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014da:	618c      	str	r4, [r1, #24]
	HAL_TIM_PWM_ConfigChannel(&Tim2Handle, &tim2OC2, TIM_CHANNEL_2);
 80014dc:	2204      	movs	r2, #4
 80014de:	4628      	mov	r0, r5
 80014e0:	f001 fbd2 	bl	8002c88 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_Base_Start(&Tim2Handle);
 80014e4:	4628      	mov	r0, r5
 80014e6:	f001 fa51 	bl	800298c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&Tim2Handle, TIM_CHANNEL_1);
 80014ea:	4621      	mov	r1, r4
 80014ec:	4628      	mov	r0, r5
 80014ee:	f001 fc49 	bl	8002d84 <HAL_TIM_PWM_Start>
}
 80014f2:	b002      	add	sp, #8
 80014f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014f8:	40021000 	.word	0x40021000
 80014fc:	20000010 	.word	0x20000010
 8001500:	014f8b59 	.word	0x014f8b59
 8001504:	200009fc 	.word	0x200009fc
 8001508:	38e38e39 	.word	0x38e38e39
 800150c:	88888889 	.word	0x88888889
 8001510:	20000a38 	.word	0x20000a38
 8001514:	20000a1c 	.word	0x20000a1c
 8001518:	20000a00 	.word	0x20000a00

0800151c <DMA1_Channel2_IRQHandler>:
{
 800151c:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&dmaUpdate);
 800151e:	4802      	ldr	r0, [pc, #8]	@ (8001528 <DMA1_Channel2_IRQHandler+0xc>)
 8001520:	f000 fc78 	bl	8001e14 <HAL_DMA_IRQHandler>
}
 8001524:	bd08      	pop	{r3, pc}
 8001526:	bf00      	nop
 8001528:	200009b8 	.word	0x200009b8

0800152c <DMA1_Channel5_IRQHandler>:
{
 800152c:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&dmaCC1);
 800152e:	4802      	ldr	r0, [pc, #8]	@ (8001538 <DMA1_Channel5_IRQHandler+0xc>)
 8001530:	f000 fc70 	bl	8001e14 <HAL_DMA_IRQHandler>
}
 8001534:	bd08      	pop	{r3, pc}
 8001536:	bf00      	nop
 8001538:	20000974 	.word	0x20000974

0800153c <DMA1_Channel7_IRQHandler>:
{
 800153c:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&dmaCC2);
 800153e:	4802      	ldr	r0, [pc, #8]	@ (8001548 <DMA1_Channel7_IRQHandler+0xc>)
 8001540:	f000 fc68 	bl	8001e14 <HAL_DMA_IRQHandler>
}
 8001544:	bd08      	pop	{r3, pc}
 8001546:	bf00      	nop
 8001548:	20000930 	.word	0x20000930

0800154c <TIM2_IRQHandler>:
{
 800154c:	b508      	push	{r3, lr}
	HAL_TIM_IRQHandler(&Tim2Handle);
 800154e:	4802      	ldr	r0, [pc, #8]	@ (8001558 <TIM2_IRQHandler+0xc>)
 8001550:	f001 fa4f 	bl	80029f2 <HAL_TIM_IRQHandler>
}
 8001554:	bd08      	pop	{r3, pc}
 8001556:	bf00      	nop
 8001558:	20000a38 	.word	0x20000a38

0800155c <HAL_TIM_PeriodElapsedCallback>:
	if (ws2812b.timerPeriodCounter < (uint8_t)WS2812_RESET_PERIOD)
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800155e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001560:	2b0b      	cmp	r3, #11
 8001562:	d803      	bhi.n	800156c <HAL_TIM_PeriodElapsedCallback+0x10>
		ws2812b.timerPeriodCounter++;
 8001564:	3301      	adds	r3, #1
 8001566:	4a12      	ldr	r2, [pc, #72]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001568:	6353      	str	r3, [r2, #52]	@ 0x34
 800156a:	4770      	bx	lr
		ws2812b.timerPeriodCounter = 0;
 800156c:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800156e:	2200      	movs	r2, #0
 8001570:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_DISABLE(&Tim2Handle);
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6a19      	ldr	r1, [r3, #32]
 8001578:	f241 1211 	movw	r2, #4369	@ 0x1111
 800157c:	4211      	tst	r1, r2
 800157e:	d108      	bne.n	8001592 <HAL_TIM_PeriodElapsedCallback+0x36>
 8001580:	6a19      	ldr	r1, [r3, #32]
 8001582:	f240 4244 	movw	r2, #1092	@ 0x444
 8001586:	4211      	tst	r1, r2
 8001588:	d103      	bne.n	8001592 <HAL_TIM_PeriodElapsedCallback+0x36>
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f022 0201 	bic.w	r2, r2, #1
 8001590:	601a      	str	r2, [r3, #0]
		TIM2->CR1 = 0; // disable timer
 8001592:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
		__HAL_TIM_DISABLE_IT(&Tim2Handle, TIM_IT_UPDATE);
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68d3      	ldr	r3, [r2, #12]
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	60d3      	str	r3, [r2, #12]
		ws2812b.transferComplete = 1;
 80015a6:	4b02      	ldr	r3, [pc, #8]	@ (80015b0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 80015ae:	4770      	bx	lr
 80015b0:	20000ae0 	.word	0x20000ae0
 80015b4:	20000a38 	.word	0x20000a38

080015b8 <ws2812b_init>:


void ws2812b_init()
{
 80015b8:	b508      	push	{r3, lr}

	ws2812b_gpio_init();
 80015ba:	f7ff fe8d 	bl	80012d8 <ws2812b_gpio_init>
	//void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue);
	DMA_init();
 80015be:	f7ff feb9 	bl	8001334 <DMA_init>
	TIM2_init();
 80015c2:	f7ff ff3f 	bl	8001444 <TIM2_init>
	// Need to start the first transfer
	ws2812b.transferComplete = 1;
 80015c6:	4b02      	ldr	r3, [pc, #8]	@ (80015d0 <ws2812b_init+0x18>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 80015ce:	bd08      	pop	{r3, pc}
 80015d0:	20000ae0 	.word	0x20000ae0

080015d4 <ws2812b_handle>:


void ws2812b_handle()
{
 80015d4:	b508      	push	{r3, lr}
	if(ws2812b.startTransfer) {
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <ws2812b_handle+0x1c>)
 80015d8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80015dc:	b903      	cbnz	r3, 80015e0 <ws2812b_handle+0xc>
		ws2812b.startTransfer = 0;
		WS2812_sendbuf();
	}

}
 80015de:	bd08      	pop	{r3, pc}
		ws2812b.startTransfer = 0;
 80015e0:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <ws2812b_handle+0x1c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		WS2812_sendbuf();
 80015e8:	f7ff fdec 	bl	80011c4 <WS2812_sendbuf>
}
 80015ec:	e7f7      	b.n	80015de <ws2812b_handle+0xa>
 80015ee:	bf00      	nop
 80015f0:	20000ae0 	.word	0x20000ae0

080015f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f4:	b530      	push	{r4, r5, lr}
 80015f6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	2400      	movs	r4, #0
 80015fa:	9402      	str	r4, [sp, #8]
 80015fc:	9403      	str	r4, [sp, #12]
 80015fe:	9404      	str	r4, [sp, #16]
 8001600:	9405      	str	r4, [sp, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <MX_GPIO_Init+0x60>)
 8001604:	699a      	ldr	r2, [r3, #24]
 8001606:	f042 0210 	orr.w	r2, r2, #16
 800160a:	619a      	str	r2, [r3, #24]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	f002 0210 	and.w	r2, r2, #16
 8001612:	9200      	str	r2, [sp, #0]
 8001614:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	699a      	ldr	r2, [r3, #24]
 8001618:	f042 0204 	orr.w	r2, r2, #4
 800161c:	619a      	str	r2, [r3, #24]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	9b01      	ldr	r3, [sp, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001628:	4d0b      	ldr	r5, [pc, #44]	@ (8001658 <MX_GPIO_Init+0x64>)
 800162a:	4622      	mov	r2, r4
 800162c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001630:	4628      	mov	r0, r5
 8001632:	f000 fd9f 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001636:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800163a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2302      	movs	r3, #2
 8001644:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001646:	a902      	add	r1, sp, #8
 8001648:	4628      	mov	r0, r5
 800164a:	f000 fc85 	bl	8001f58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800164e:	b007      	add	sp, #28
 8001650:	bd30      	pop	{r4, r5, pc}
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000
 8001658:	40011000 	.word	0x40011000

0800165c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 800165c:	b508      	push	{r3, lr}
 800165e:	4601      	mov	r1, r0
    NOS_UART_ReceiveHandler(&UART2,huart);
 8001660:	4803      	ldr	r0, [pc, #12]	@ (8001670 <HAL_UART_RxCpltCallback+0x14>)
 8001662:	f7ff f99b 	bl	800099c <NOS_UART_ReceiveHandler>
    receive = true;
 8001666:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <HAL_UART_RxCpltCallback+0x18>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
}
 800166c:	bd08      	pop	{r3, pc}
 800166e:	bf00      	nop
 8001670:	20000b78 	.word	0x20000b78
 8001674:	20000b1d 	.word	0x20000b1d

08001678 <SysTick_Handler>:

/* USER CODE BEGIN 4 */
void SysTick_Handler(void)
{
 8001678:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167a:	f000 fa21 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick = true;
 800167e:	4b02      	ldr	r3, [pc, #8]	@ (8001688 <SysTick_Handler+0x10>)
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001684:	bd08      	pop	{r3, pc}
 8001686:	bf00      	nop
 8001688:	20000b1c 	.word	0x20000b1c

0800168c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800168e:	e7fe      	b.n	800168e <Error_Handler+0x2>

08001690 <MX_USART2_UART_Init>:
{
 8001690:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8001692:	480a      	ldr	r0, [pc, #40]	@ (80016bc <MX_USART2_UART_Init+0x2c>)
 8001694:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <MX_USART2_UART_Init+0x30>)
 8001696:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8001698:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800169c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	2300      	movs	r3, #0
 80016a0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a6:	220c      	movs	r2, #12
 80016a8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ae:	f001 fcc4 	bl	800303a <HAL_UART_Init>
 80016b2:	b900      	cbnz	r0, 80016b6 <MX_USART2_UART_Init+0x26>
}
 80016b4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80016b6:	f7ff ffe9 	bl	800168c <Error_Handler>
 80016ba:	bf00      	nop
 80016bc:	2000246c 	.word	0x2000246c
 80016c0:	40004400 	.word	0x40004400

080016c4 <SystemClock_Config>:
{
 80016c4:	b500      	push	{lr}
 80016c6:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c8:	2228      	movs	r2, #40	@ 0x28
 80016ca:	2100      	movs	r1, #0
 80016cc:	a806      	add	r0, sp, #24
 80016ce:	f001 ff7c 	bl	80035ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d2:	2300      	movs	r3, #0
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	9303      	str	r3, [sp, #12]
 80016da:	9304      	str	r3, [sp, #16]
 80016dc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016de:	2302      	movs	r3, #2
 80016e0:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e2:	2201      	movs	r2, #1
 80016e4:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e6:	2210      	movs	r2, #16
 80016e8:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ea:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016ec:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80016f0:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f2:	a806      	add	r0, sp, #24
 80016f4:	f000 fdc0 	bl	8002278 <HAL_RCC_OscConfig>
 80016f8:	b980      	cbnz	r0, 800171c <SystemClock_Config+0x58>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016fa:	230f      	movs	r3, #15
 80016fc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fe:	2102      	movs	r1, #2
 8001700:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001706:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800170a:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800170e:	a801      	add	r0, sp, #4
 8001710:	f000 ffe4 	bl	80026dc <HAL_RCC_ClockConfig>
 8001714:	b920      	cbnz	r0, 8001720 <SystemClock_Config+0x5c>
}
 8001716:	b011      	add	sp, #68	@ 0x44
 8001718:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800171c:	f7ff ffb6 	bl	800168c <Error_Handler>
    Error_Handler();
 8001720:	f7ff ffb4 	bl	800168c <Error_Handler>

08001724 <main>:
{
 8001724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001728:	b08a      	sub	sp, #40	@ 0x28
  HAL_Init();
 800172a:	f000 f9b7 	bl	8001a9c <HAL_Init>
  SystemClock_Config();
 800172e:	f7ff ffc9 	bl	80016c4 <SystemClock_Config>
  MX_GPIO_Init();
 8001732:	f7ff ff5f 	bl	80015f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001736:	f7ff ffab 	bl	8001690 <MX_USART2_UART_Init>
  HAL_UART_Receive_IT(&huart2,UART2.rx_buff,1);
 800173a:	f8df 82c0 	ldr.w	r8, [pc, #704]	@ 80019fc <main+0x2d8>
 800173e:	4cb0      	ldr	r4, [pc, #704]	@ (8001a00 <main+0x2dc>)
 8001740:	2201      	movs	r2, #1
 8001742:	4641      	mov	r1, r8
 8001744:	4620      	mov	r0, r4
 8001746:	f001 fef6 	bl	8003536 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart2,"HELLO",sizeof("HELLO"),1000);
 800174a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174e:	2206      	movs	r2, #6
 8001750:	49ac      	ldr	r1, [pc, #688]	@ (8001a04 <main+0x2e0>)
 8001752:	4620      	mov	r0, r4
 8001754:	f001 fca1 	bl	800309a <HAL_UART_Transmit>
  visInit();
 8001758:	f7ff fc30 	bl	8000fbc <visInit>
  NOS_WS2812B_Strip_FullInit(&stripA,&frameBuffer1,&pixelsA,128);
 800175c:	4faa      	ldr	r7, [pc, #680]	@ (8001a08 <main+0x2e4>)
 800175e:	2380      	movs	r3, #128	@ 0x80
 8001760:	4aaa      	ldr	r2, [pc, #680]	@ (8001a0c <main+0x2e8>)
 8001762:	49ab      	ldr	r1, [pc, #684]	@ (8001a10 <main+0x2ec>)
 8001764:	4638      	mov	r0, r7
 8001766:	f7ff f9b9 	bl	8000adc <NOS_WS2812B_Strip_FullInit>
  NOS_WS2812B_Strip_FullInit(&stripB,&frameBuffer2,&pixelsB,48);
 800176a:	4eaa      	ldr	r6, [pc, #680]	@ (8001a14 <main+0x2f0>)
 800176c:	2330      	movs	r3, #48	@ 0x30
 800176e:	4aaa      	ldr	r2, [pc, #680]	@ (8001a18 <main+0x2f4>)
 8001770:	49aa      	ldr	r1, [pc, #680]	@ (8001a1c <main+0x2f8>)
 8001772:	4630      	mov	r0, r6
 8001774:	f7ff f9b2 	bl	8000adc <NOS_WS2812B_Strip_FullInit>
  NOS_WS2812B_Strip_FullInit(&stripC,&frameBuffer3,&pixelsC,48);
 8001778:	4da9      	ldr	r5, [pc, #676]	@ (8001a20 <main+0x2fc>)
 800177a:	2330      	movs	r3, #48	@ 0x30
 800177c:	4aa9      	ldr	r2, [pc, #676]	@ (8001a24 <main+0x300>)
 800177e:	49aa      	ldr	r1, [pc, #680]	@ (8001a28 <main+0x304>)
 8001780:	4628      	mov	r0, r5
 8001782:	f7ff f9ab 	bl	8000adc <NOS_WS2812B_Strip_FullInit>
  NOS_TimeEvent_Init(&tetrisUpdateEvent, 50);
 8001786:	2132      	movs	r1, #50	@ 0x32
 8001788:	48a8      	ldr	r0, [pc, #672]	@ (8001a2c <main+0x308>)
 800178a:	f7ff f8a4 	bl	80008d6 <NOS_TimeEvent_Init>
  NOS_TimeEvent_Init(&screenUpdateEvent, 20);
 800178e:	2114      	movs	r1, #20
 8001790:	48a7      	ldr	r0, [pc, #668]	@ (8001a30 <main+0x30c>)
 8001792:	f7ff f8a0 	bl	80008d6 <NOS_TimeEvent_Init>
  NOS_TimeEvent_Init(&uartTestEvent, 1000);
 8001796:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800179a:	48a6      	ldr	r0, [pc, #664]	@ (8001a34 <main+0x310>)
 800179c:	f7ff f89b 	bl	80008d6 <NOS_TimeEvent_Init>
  NOS_Math_SinValue_Init(&bright,65,75,1);
 80017a0:	2301      	movs	r3, #1
 80017a2:	224b      	movs	r2, #75	@ 0x4b
 80017a4:	2141      	movs	r1, #65	@ 0x41
 80017a6:	48a4      	ldr	r0, [pc, #656]	@ (8001a38 <main+0x314>)
 80017a8:	f7fe ffee 	bl	8000788 <NOS_Math_SinValue_Init>
  NOS_UART_ReceiveAbort(&UART2,&huart2);
 80017ac:	4621      	mov	r1, r4
 80017ae:	4640      	mov	r0, r8
 80017b0:	f7ff f8b9 	bl	8000926 <NOS_UART_ReceiveAbort>
  NOS_WS2812B_Strip_Effect_Breathe_Init(&breatheA,100,1,60,80);
 80017b4:	4ca1      	ldr	r4, [pc, #644]	@ (8001a3c <main+0x318>)
 80017b6:	2350      	movs	r3, #80	@ 0x50
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	233c      	movs	r3, #60	@ 0x3c
 80017bc:	2201      	movs	r2, #1
 80017be:	2164      	movs	r1, #100	@ 0x64
 80017c0:	4620      	mov	r0, r4
 80017c2:	f7ff fa16 	bl	8000bf2 <NOS_WS2812B_Strip_Effect_Breathe_Init>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripA,breatheA);
 80017c6:	46ec      	mov	ip, sp
 80017c8:	f104 0e0c 	add.w	lr, r4, #12
 80017cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80017d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80017d4:	f8de 3000 	ldr.w	r3, [lr]
 80017d8:	f8cc 3000 	str.w	r3, [ip]
 80017dc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80017e0:	4638      	mov	r0, r7
 80017e2:	f7ff fa53 	bl	8000c8c <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripB,breatheA);
 80017e6:	46ec      	mov	ip, sp
 80017e8:	f104 0e0c 	add.w	lr, r4, #12
 80017ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80017f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80017f4:	f8de 3000 	ldr.w	r3, [lr]
 80017f8:	f8cc 3000 	str.w	r3, [ip]
 80017fc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001800:	4630      	mov	r0, r6
 8001802:	f7ff fa43 	bl	8000c8c <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripC,breatheA);
 8001806:	46ec      	mov	ip, sp
 8001808:	f104 0e0c 	add.w	lr, r4, #12
 800180c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001810:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001814:	f8de 3000 	ldr.w	r3, [lr]
 8001818:	f8cc 3000 	str.w	r3, [ip]
 800181c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001820:	4628      	mov	r0, r5
 8001822:	f7ff fa33 	bl	8000c8c <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effect_Rainbow_Init(&breatheA,1000,1,200,800);
 8001826:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	23c8      	movs	r3, #200	@ 0xc8
 800182e:	2201      	movs	r2, #1
 8001830:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001834:	4620      	mov	r0, r4
 8001836:	f7ff fa11 	bl	8000c5c <NOS_WS2812B_Strip_Effect_Rainbow_Init>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripA,breatheA);
 800183a:	46ec      	mov	ip, sp
 800183c:	f104 0e0c 	add.w	lr, r4, #12
 8001840:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001844:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001848:	f8de 3000 	ldr.w	r3, [lr]
 800184c:	f8cc 3000 	str.w	r3, [ip]
 8001850:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001854:	4638      	mov	r0, r7
 8001856:	f7ff fa19 	bl	8000c8c <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripB,breatheA);
 800185a:	46ec      	mov	ip, sp
 800185c:	f104 0e0c 	add.w	lr, r4, #12
 8001860:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001864:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001868:	f8de 3000 	ldr.w	r3, [lr]
 800186c:	f8cc 3000 	str.w	r3, [ip]
 8001870:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001874:	4630      	mov	r0, r6
 8001876:	f7ff fa09 	bl	8000c8c <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_Effects_AddEffect(&stripC,breatheA);
 800187a:	46ec      	mov	ip, sp
 800187c:	f104 0e0c 	add.w	lr, r4, #12
 8001880:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001884:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001888:	f8de 3000 	ldr.w	r3, [lr]
 800188c:	f8cc 3000 	str.w	r3, [ip]
 8001890:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001894:	4628      	mov	r0, r5
 8001896:	f7ff f9f9 	bl	8000c8c <NOS_WS2812B_Strip_Effects_AddEffect>
  NOS_WS2812B_Strip_ColorFill(&stripA,NOS_GetBaseColor(RED));
 800189a:	2008      	movs	r0, #8
 800189c:	f7fe fed8 	bl	8000650 <NOS_GetBaseColor>
 80018a0:	f88d 001c 	strb.w	r0, [sp, #28]
 80018a4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80018a8:	f88d 301d 	strb.w	r3, [sp, #29]
 80018ac:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80018b0:	f88d 001e 	strb.w	r0, [sp, #30]
 80018b4:	9907      	ldr	r1, [sp, #28]
 80018b6:	4638      	mov	r0, r7
 80018b8:	f7ff f982 	bl	8000bc0 <NOS_WS2812B_Strip_ColorFill>
  NOS_WS2812B_Strip_ColorFill(&stripB,NOS_GetBaseColor(RED));
 80018bc:	2008      	movs	r0, #8
 80018be:	f7fe fec7 	bl	8000650 <NOS_GetBaseColor>
 80018c2:	f88d 0020 	strb.w	r0, [sp, #32]
 80018c6:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80018ca:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 80018ce:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80018d2:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80018d6:	9908      	ldr	r1, [sp, #32]
 80018d8:	4630      	mov	r0, r6
 80018da:	f7ff f971 	bl	8000bc0 <NOS_WS2812B_Strip_ColorFill>
  NOS_WS2812B_Strip_ColorFill(&stripC,NOS_GetBaseColor(RED));  
 80018de:	2008      	movs	r0, #8
 80018e0:	f7fe feb6 	bl	8000650 <NOS_GetBaseColor>
 80018e4:	f88d 0024 	strb.w	r0, [sp, #36]	@ 0x24
 80018e8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80018ec:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
 80018f0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 80018f4:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 80018f8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80018fa:	4628      	mov	r0, r5
 80018fc:	f7ff f960 	bl	8000bc0 <NOS_WS2812B_Strip_ColorFill>
  NOS_WS2812B_Strip_Update(&stripA);
 8001900:	4638      	mov	r0, r7
 8001902:	f7ff f91d 	bl	8000b40 <NOS_WS2812B_Strip_Update>
  NOS_WS2812B_Strip_Update(&stripB);
 8001906:	4630      	mov	r0, r6
 8001908:	f7ff f91a 	bl	8000b40 <NOS_WS2812B_Strip_Update>
  NOS_WS2812B_Strip_Update(&stripC);
 800190c:	4628      	mov	r0, r5
 800190e:	f7ff f917 	bl	8000b40 <NOS_WS2812B_Strip_Update>
  int receiveTime = 0;
 8001912:	e01c      	b.n	800194e <main+0x22a>
          NOS_TimeEvent_TickHandler(&screenUpdateEvent);
 8001914:	4846      	ldr	r0, [pc, #280]	@ (8001a30 <main+0x30c>)
 8001916:	f7fe ffe5 	bl	80008e4 <NOS_TimeEvent_TickHandler>
          NOS_WS2812B_Strip_Effects_Handler(&stripA);
 800191a:	483b      	ldr	r0, [pc, #236]	@ (8001a08 <main+0x2e4>)
 800191c:	f7ff fb2e 	bl	8000f7c <NOS_WS2812B_Strip_Effects_Handler>
          NOS_WS2812B_Strip_Effects_Handler(&stripB);
 8001920:	483c      	ldr	r0, [pc, #240]	@ (8001a14 <main+0x2f0>)
 8001922:	f7ff fb2b 	bl	8000f7c <NOS_WS2812B_Strip_Effects_Handler>
          NOS_WS2812B_Strip_Effects_Handler(&stripC);
 8001926:	483e      	ldr	r0, [pc, #248]	@ (8001a20 <main+0x2fc>)
 8001928:	f7ff fb28 	bl	8000f7c <NOS_WS2812B_Strip_Effects_Handler>
          tick = false;
 800192c:	4b44      	ldr	r3, [pc, #272]	@ (8001a40 <main+0x31c>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
    if(NOS_UART_CheckReceive(&UART2))
 8001932:	4832      	ldr	r0, [pc, #200]	@ (80019fc <main+0x2d8>)
 8001934:	f7ff f8c9 	bl	8000aca <NOS_UART_CheckReceive>
 8001938:	b9f0      	cbnz	r0, 8001978 <main+0x254>
    if (NOS_TimeEvent_Check(&tetrisUpdateEvent))
 800193a:	483c      	ldr	r0, [pc, #240]	@ (8001a2c <main+0x308>)
 800193c:	f7fe ffdd 	bl	80008fa <NOS_TimeEvent_Check>
 8001940:	2800      	cmp	r0, #0
 8001942:	d148      	bne.n	80019d6 <main+0x2b2>
    if (NOS_TimeEvent_Check(&screenUpdateEvent))
 8001944:	483a      	ldr	r0, [pc, #232]	@ (8001a30 <main+0x30c>)
 8001946:	f7fe ffd8 	bl	80008fa <NOS_TimeEvent_Check>
 800194a:	2800      	cmp	r0, #0
 800194c:	d147      	bne.n	80019de <main+0x2ba>
    if(tick)
 800194e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a40 <main+0x31c>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0ed      	beq.n	8001932 <main+0x20e>
          UART2.lastReceivedByteTime++;
 8001956:	4a3b      	ldr	r2, [pc, #236]	@ (8001a44 <main+0x320>)
 8001958:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800195a:	3301      	adds	r3, #1
 800195c:	6253      	str	r3, [r2, #36]	@ 0x24
          if(UART2.startReceive && UART2.lastReceivedByteTime > 20)
 800195e:	7c12      	ldrb	r2, [r2, #16]
 8001960:	2a00      	cmp	r2, #0
 8001962:	d0d7      	beq.n	8001914 <main+0x1f0>
 8001964:	2b14      	cmp	r3, #20
 8001966:	ddd5      	ble.n	8001914 <main+0x1f0>
                UART2.index = 0;
 8001968:	4824      	ldr	r0, [pc, #144]	@ (80019fc <main+0x2d8>)
 800196a:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
                NOS_UART_ReceiveReset(&UART2);
 8001972:	f7fe ffcd 	bl	8000910 <NOS_UART_ReceiveReset>
 8001976:	e7cd      	b.n	8001914 <main+0x1f0>
      if(NOS_UART_ParsePacket(&UART2,&lastMessage))
 8001978:	4933      	ldr	r1, [pc, #204]	@ (8001a48 <main+0x324>)
 800197a:	4820      	ldr	r0, [pc, #128]	@ (80019fc <main+0x2d8>)
 800197c:	f7ff f82f 	bl	80009de <NOS_UART_ParsePacket>
 8001980:	b118      	cbz	r0, 800198a <main+0x266>
      switch (lastMessage.channel.data)
 8001982:	4b31      	ldr	r3, [pc, #196]	@ (8001a48 <main+0x324>)
 8001984:	885b      	ldrh	r3, [r3, #2]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d017      	beq.n	80019ba <main+0x296>
      NOS_UART_EndReceive(&UART2);
 800198a:	481c      	ldr	r0, [pc, #112]	@ (80019fc <main+0x2d8>)
 800198c:	f7ff f8a1 	bl	8000ad2 <NOS_UART_EndReceive>
      HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001990:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001994:	482d      	ldr	r0, [pc, #180]	@ (8001a4c <main+0x328>)
 8001996:	f000 fbf3 	bl	8002180 <HAL_GPIO_TogglePin>
      NOS_UART_PacketApprovedNotice(&lastMessage,&huart2);
 800199a:	4919      	ldr	r1, [pc, #100]	@ (8001a00 <main+0x2dc>)
 800199c:	482a      	ldr	r0, [pc, #168]	@ (8001a48 <main+0x324>)
 800199e:	f7ff f85f 	bl	8000a60 <NOS_UART_PacketApprovedNotice>
      NOS_WS2812B_Strip_Update(&stripA);
 80019a2:	4819      	ldr	r0, [pc, #100]	@ (8001a08 <main+0x2e4>)
 80019a4:	f7ff f8cc 	bl	8000b40 <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripB);
 80019a8:	481a      	ldr	r0, [pc, #104]	@ (8001a14 <main+0x2f0>)
 80019aa:	f7ff f8c9 	bl	8000b40 <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripC);
 80019ae:	481c      	ldr	r0, [pc, #112]	@ (8001a20 <main+0x2fc>)
 80019b0:	f7ff f8c6 	bl	8000b40 <NOS_WS2812B_Strip_Update>
      visHandle();
 80019b4:	f7ff fb22 	bl	8000ffc <visHandle>
 80019b8:	e7bf      	b.n	800193a <main+0x216>
        NOS_Strip_UART_ParseCommand(&stripA,&lastMessage);
 80019ba:	4c23      	ldr	r4, [pc, #140]	@ (8001a48 <main+0x324>)
 80019bc:	4621      	mov	r1, r4
 80019be:	4812      	ldr	r0, [pc, #72]	@ (8001a08 <main+0x2e4>)
 80019c0:	f7fe feeb 	bl	800079a <NOS_Strip_UART_ParseCommand>
        NOS_Strip_UART_ParseCommand(&stripB,&lastMessage);
 80019c4:	4621      	mov	r1, r4
 80019c6:	4813      	ldr	r0, [pc, #76]	@ (8001a14 <main+0x2f0>)
 80019c8:	f7fe fee7 	bl	800079a <NOS_Strip_UART_ParseCommand>
        NOS_Strip_UART_ParseCommand(&stripC,&lastMessage);
 80019cc:	4621      	mov	r1, r4
 80019ce:	4814      	ldr	r0, [pc, #80]	@ (8001a20 <main+0x2fc>)
 80019d0:	f7fe fee3 	bl	800079a <NOS_Strip_UART_ParseCommand>
        break;
 80019d4:	e7d9      	b.n	800198a <main+0x266>
      NOS_TimeEvent_FinishEvent(&tetrisUpdateEvent);
 80019d6:	4815      	ldr	r0, [pc, #84]	@ (8001a2c <main+0x308>)
 80019d8:	f7fe ff96 	bl	8000908 <NOS_TimeEvent_FinishEvent>
 80019dc:	e7b2      	b.n	8001944 <main+0x220>
      NOS_WS2812B_Strip_Update(&stripA);
 80019de:	480a      	ldr	r0, [pc, #40]	@ (8001a08 <main+0x2e4>)
 80019e0:	f7ff f8ae 	bl	8000b40 <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripB);
 80019e4:	480b      	ldr	r0, [pc, #44]	@ (8001a14 <main+0x2f0>)
 80019e6:	f7ff f8ab 	bl	8000b40 <NOS_WS2812B_Strip_Update>
      NOS_WS2812B_Strip_Update(&stripC);
 80019ea:	480d      	ldr	r0, [pc, #52]	@ (8001a20 <main+0x2fc>)
 80019ec:	f7ff f8a8 	bl	8000b40 <NOS_WS2812B_Strip_Update>
      visHandle();
 80019f0:	f7ff fb04 	bl	8000ffc <visHandle>
      NOS_TimeEvent_FinishEvent(&screenUpdateEvent);
 80019f4:	480e      	ldr	r0, [pc, #56]	@ (8001a30 <main+0x30c>)
 80019f6:	f7fe ff87 	bl	8000908 <NOS_TimeEvent_FinishEvent>
 80019fa:	e7a8      	b.n	800194e <main+0x22a>
 80019fc:	20000b78 	.word	0x20000b78
 8001a00:	2000246c 	.word	0x2000246c
 8001a04:	0800373c 	.word	0x0800373c
 8001a08:	200022f4 	.word	0x200022f4
 8001a0c:	20001ecc 	.word	0x20001ecc
 8001a10:	20000630 	.word	0x20000630
 8001a14:	200021a0 	.word	0x200021a0
 8001a18:	20001d4c 	.word	0x20001d4c
 8001a1c:	20000330 	.word	0x20000330
 8001a20:	2000204c 	.word	0x2000204c
 8001a24:	20001bcc 	.word	0x20001bcc
 8001a28:	20000030 	.word	0x20000030
 8001a2c:	20002460 	.word	0x20002460
 8001a30:	20002454 	.word	0x20002454
 8001a34:	20002448 	.word	0x20002448
 8001a38:	20000b64 	.word	0x20000b64
 8001a3c:	20000b44 	.word	0x20000b44
 8001a40:	20000b1c 	.word	0x20000b1c
 8001a44:	20001b78 	.word	0x20001b78
 8001a48:	20000b20 	.word	0x20000b20
 8001a4c:	40011000 	.word	0x40011000

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b510      	push	{r4, lr}
 8001a52:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a54:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <HAL_InitTick+0x40>)
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a60:	4a0c      	ldr	r2, [pc, #48]	@ (8001a94 <HAL_InitTick+0x44>)
 8001a62:	6810      	ldr	r0, [r2, #0]
 8001a64:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a68:	f000 f8a0 	bl	8001bac <HAL_SYSTICK_Config>
 8001a6c:	b968      	cbnz	r0, 8001a8a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6e:	2c0f      	cmp	r4, #15
 8001a70:	d901      	bls.n	8001a76 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001a72:	2001      	movs	r0, #1
 8001a74:	e00a      	b.n	8001a8c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a76:	2200      	movs	r2, #0
 8001a78:	4621      	mov	r1, r4
 8001a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7e:	f000 f877 	bl	8001b70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a82:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_InitTick+0x48>)
 8001a84:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a86:	2000      	movs	r0, #0
 8001a88:	e000      	b.n	8001a8c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001a8a:	2001      	movs	r0, #1
}
 8001a8c:	bd10      	pop	{r4, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008
 8001a94:	20000010 	.word	0x20000010
 8001a98:	2000000c 	.word	0x2000000c

08001a9c <HAL_Init>:
{
 8001a9c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a9e:	4a07      	ldr	r2, [pc, #28]	@ (8001abc <HAL_Init+0x20>)
 8001aa0:	6813      	ldr	r3, [r2, #0]
 8001aa2:	f043 0310 	orr.w	r3, r3, #16
 8001aa6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f000 f84f 	bl	8001b4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f7ff ffce 	bl	8001a50 <HAL_InitTick>
  HAL_MspInit();
 8001ab4:	f000 fb6e 	bl	8002194 <HAL_MspInit>
}
 8001ab8:	2000      	movs	r0, #0
 8001aba:	bd08      	pop	{r3, pc}
 8001abc:	40022000 	.word	0x40022000

08001ac0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ac0:	4a03      	ldr	r2, [pc, #12]	@ (8001ad0 <HAL_IncTick+0x10>)
 8001ac2:	6811      	ldr	r1, [r2, #0]
 8001ac4:	4b03      	ldr	r3, [pc, #12]	@ (8001ad4 <HAL_IncTick+0x14>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	440b      	add	r3, r1
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	200024b4 	.word	0x200024b4
 8001ad4:	20000008 	.word	0x20000008

08001ad8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ad8:	4b01      	ldr	r3, [pc, #4]	@ (8001ae0 <HAL_GetTick+0x8>)
 8001ada:	6818      	ldr	r0, [r3, #0]
}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	200024b4 	.word	0x200024b4

08001ae4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	db08      	blt.n	8001afa <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	0109      	lsls	r1, r1, #4
 8001aea:	b2c9      	uxtb	r1, r1
 8001aec:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001af0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001af4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001af8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	f000 000f 	and.w	r0, r0, #15
 8001afe:	0109      	lsls	r1, r1, #4
 8001b00:	b2c9      	uxtb	r1, r1
 8001b02:	4b01      	ldr	r3, [pc, #4]	@ (8001b08 <__NVIC_SetPriority+0x24>)
 8001b04:	5419      	strb	r1, [r3, r0]
  }
}
 8001b06:	4770      	bx	lr
 8001b08:	e000ed14 	.word	0xe000ed14

08001b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b0e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b12:	f1c0 0c07 	rsb	ip, r0, #7
 8001b16:	f1bc 0f04 	cmp.w	ip, #4
 8001b1a:	bf28      	it	cs
 8001b1c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b20:	1d03      	adds	r3, r0, #4
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d90f      	bls.n	8001b46 <NVIC_EncodePriority+0x3a>
 8001b26:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	f04f 3eff 	mov.w	lr, #4294967295
 8001b2c:	fa0e f00c 	lsl.w	r0, lr, ip
 8001b30:	ea21 0100 	bic.w	r1, r1, r0
 8001b34:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b36:	fa0e fe03 	lsl.w	lr, lr, r3
 8001b3a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001b3e:	ea41 0002 	orr.w	r0, r1, r2
 8001b42:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	2300      	movs	r3, #0
 8001b48:	e7ee      	b.n	8001b28 <NVIC_EncodePriority+0x1c>
	...

08001b4c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4a07      	ldr	r2, [pc, #28]	@ (8001b6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b4e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b50:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b54:	041b      	lsls	r3, r3, #16
 8001b56:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b58:	0200      	lsls	r0, r0, #8
 8001b5a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b5e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001b68:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b70:	b510      	push	{r4, lr}
 8001b72:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <HAL_NVIC_SetPriority+0x1c>)
 8001b76:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b78:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001b7c:	f7ff ffc6 	bl	8001b0c <NVIC_EncodePriority>
 8001b80:	4601      	mov	r1, r0
 8001b82:	4620      	mov	r0, r4
 8001b84:	f7ff ffae 	bl	8001ae4 <__NVIC_SetPriority>
}
 8001b88:	bd10      	pop	{r4, pc}
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b90:	2800      	cmp	r0, #0
 8001b92:	db07      	blt.n	8001ba4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b94:	f000 021f 	and.w	r2, r0, #31
 8001b98:	0940      	lsrs	r0, r0, #5
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	4093      	lsls	r3, r2
 8001b9e:	4a02      	ldr	r2, [pc, #8]	@ (8001ba8 <HAL_NVIC_EnableIRQ+0x18>)
 8001ba0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bac:	3801      	subs	r0, #1
 8001bae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001bb2:	d20b      	bcs.n	8001bcc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001bb8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	4a05      	ldr	r2, [pc, #20]	@ (8001bd0 <HAL_SYSTICK_Config+0x24>)
 8001bbc:	21f0      	movs	r1, #240	@ 0xf0
 8001bbe:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bca:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001bcc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd4:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bd6:	2401      	movs	r4, #1
 8001bd8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001bda:	40ac      	lsls	r4, r5
 8001bdc:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8001bde:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001be0:	6804      	ldr	r4, [r0, #0]
 8001be2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001be4:	6843      	ldr	r3, [r0, #4]
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d005      	beq.n	8001bf6 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001bea:	6803      	ldr	r3, [r0, #0]
 8001bec:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001bee:	6803      	ldr	r3, [r0, #0]
 8001bf0:	60da      	str	r2, [r3, #12]
  }
}
 8001bf2:	bc30      	pop	{r4, r5}
 8001bf4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001bf6:	6803      	ldr	r3, [r0, #0]
 8001bf8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001bfa:	6803      	ldr	r3, [r0, #0]
 8001bfc:	60d9      	str	r1, [r3, #12]
 8001bfe:	e7f8      	b.n	8001bf2 <DMA_SetConfig+0x1e>

08001c00 <HAL_DMA_Init>:
  if(hdma == NULL)
 8001c00:	b360      	cbz	r0, 8001c5c <HAL_DMA_Init+0x5c>
{
 8001c02:	b410      	push	{r4}
 8001c04:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c06:	6801      	ldr	r1, [r0, #0]
 8001c08:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <HAL_DMA_Init+0x60>)
 8001c0a:	440b      	add	r3, r1
 8001c0c:	4815      	ldr	r0, [pc, #84]	@ (8001c64 <HAL_DMA_Init+0x64>)
 8001c0e:	fba0 0303 	umull	r0, r3, r0, r3
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c18:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <HAL_DMA_Init+0x68>)
 8001c1a:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  tmp = hdma->Instance->CCR;
 8001c22:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c24:	f420 507f 	bic.w	r0, r0, #16320	@ 0x3fc0
 8001c28:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
  tmp |=  hdma->Init.Direction        |
 8001c2c:	6853      	ldr	r3, [r2, #4]
 8001c2e:	6894      	ldr	r4, [r2, #8]
 8001c30:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c32:	68d4      	ldr	r4, [r2, #12]
 8001c34:	4323      	orrs	r3, r4
 8001c36:	6914      	ldr	r4, [r2, #16]
 8001c38:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3a:	6954      	ldr	r4, [r2, #20]
 8001c3c:	4323      	orrs	r3, r4
 8001c3e:	6994      	ldr	r4, [r2, #24]
 8001c40:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c42:	69d4      	ldr	r4, [r2, #28]
 8001c44:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001c46:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8001c48:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	6390      	str	r0, [r2, #56]	@ 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001c54:	f882 0020 	strb.w	r0, [r2, #32]
}
 8001c58:	bc10      	pop	{r4}
 8001c5a:	4770      	bx	lr
    return HAL_ERROR;
 8001c5c:	2001      	movs	r0, #1
}
 8001c5e:	4770      	bx	lr
 8001c60:	bffdfff8 	.word	0xbffdfff8
 8001c64:	cccccccd 	.word	0xcccccccd
 8001c68:	40020000 	.word	0x40020000

08001c6c <HAL_DMA_Start>:
{
 8001c6c:	b570      	push	{r4, r5, r6, lr}
 8001c6e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001c70:	f890 0020 	ldrb.w	r0, [r0, #32]
 8001c74:	2801      	cmp	r0, #1
 8001c76:	d020      	beq.n	8001cba <HAL_DMA_Start+0x4e>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c7e:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 8001c82:	b2c0      	uxtb	r0, r0
 8001c84:	2801      	cmp	r0, #1
 8001c86:	d004      	beq.n	8001c92 <HAL_DMA_Start+0x26>
   __HAL_UNLOCK(hdma);  
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f884 3020 	strb.w	r3, [r4, #32]
   status = HAL_BUSY;
 8001c8e:	2002      	movs	r0, #2
}
 8001c90:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c92:	2002      	movs	r0, #2
 8001c94:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c98:	2500      	movs	r5, #0
 8001c9a:	63a5      	str	r5, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 8001c9c:	6826      	ldr	r6, [r4, #0]
 8001c9e:	6830      	ldr	r0, [r6, #0]
 8001ca0:	f020 0001 	bic.w	r0, r0, #1
 8001ca4:	6030      	str	r0, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f7ff ff94 	bl	8001bd4 <DMA_SetConfig>
    __HAL_DMA_ENABLE(hdma);
 8001cac:	6822      	ldr	r2, [r4, #0]
 8001cae:	6813      	ldr	r3, [r2, #0]
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb6:	4628      	mov	r0, r5
 8001cb8:	e7ea      	b.n	8001c90 <HAL_DMA_Start+0x24>
  __HAL_LOCK(hdma);
 8001cba:	2002      	movs	r0, #2
 8001cbc:	e7e8      	b.n	8001c90 <HAL_DMA_Start+0x24>

08001cbe <HAL_DMA_Start_IT>:
{
 8001cbe:	b538      	push	{r3, r4, r5, lr}
 8001cc0:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001cc2:	f890 0020 	ldrb.w	r0, [r0, #32]
 8001cc6:	2801      	cmp	r0, #1
 8001cc8:	d032      	beq.n	8001d30 <HAL_DMA_Start_IT+0x72>
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cd0:	f894 0021 	ldrb.w	r0, [r4, #33]	@ 0x21
 8001cd4:	b2c0      	uxtb	r0, r0
 8001cd6:	2801      	cmp	r0, #1
 8001cd8:	d004      	beq.n	8001ce4 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8001ce0:	2002      	movs	r0, #2
}
 8001ce2:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f884 0021 	strb.w	r0, [r4, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cea:	2000      	movs	r0, #0
 8001cec:	63a0      	str	r0, [r4, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 8001cee:	6825      	ldr	r5, [r4, #0]
 8001cf0:	6828      	ldr	r0, [r5, #0]
 8001cf2:	f020 0001 	bic.w	r0, r0, #1
 8001cf6:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f7ff ff6b 	bl	8001bd4 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8001cfe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001d00:	b15b      	cbz	r3, 8001d1a <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d02:	6822      	ldr	r2, [r4, #0]
 8001d04:	6813      	ldr	r3, [r2, #0]
 8001d06:	f043 030e 	orr.w	r3, r3, #14
 8001d0a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001d0c:	6822      	ldr	r2, [r4, #0]
 8001d0e:	6813      	ldr	r3, [r2, #0]
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d16:	2000      	movs	r0, #0
 8001d18:	e7e3      	b.n	8001ce2 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d1a:	6822      	ldr	r2, [r4, #0]
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	f023 0304 	bic.w	r3, r3, #4
 8001d22:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d24:	6822      	ldr	r2, [r4, #0]
 8001d26:	6813      	ldr	r3, [r2, #0]
 8001d28:	f043 030a 	orr.w	r3, r3, #10
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e7ed      	b.n	8001d0c <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8001d30:	2002      	movs	r0, #2
 8001d32:	e7d6      	b.n	8001ce2 <HAL_DMA_Start_IT+0x24>

08001d34 <HAL_DMA_Abort>:
{
 8001d34:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d36:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	2a02      	cmp	r2, #2
 8001d3e:	d006      	beq.n	8001d4e <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d40:	2204      	movs	r2, #4
 8001d42:	6382      	str	r2, [r0, #56]	@ 0x38
    __HAL_UNLOCK(hdma);
 8001d44:	2200      	movs	r2, #0
 8001d46:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d4e:	6801      	ldr	r1, [r0, #0]
 8001d50:	680a      	ldr	r2, [r1, #0]
 8001d52:	f022 020e 	bic.w	r2, r2, #14
 8001d56:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8001d58:	6801      	ldr	r1, [r0, #0]
 8001d5a:	680a      	ldr	r2, [r1, #0]
 8001d5c:	f022 0201 	bic.w	r2, r2, #1
 8001d60:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d62:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001d64:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8001d66:	2101      	movs	r1, #1
 8001d68:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6c:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  __HAL_UNLOCK(hdma);      
 8001d72:	2000      	movs	r0, #0
 8001d74:	f883 0020 	strb.w	r0, [r3, #32]
}
 8001d78:	4770      	bx	lr
	...

08001d7c <HAL_DMA_Abort_IT>:
{  
 8001d7c:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d7e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d003      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d88:	2304      	movs	r3, #4
 8001d8a:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8001d8c:	2001      	movs	r0, #1
}
 8001d8e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d90:	6802      	ldr	r2, [r0, #0]
 8001d92:	6813      	ldr	r3, [r2, #0]
 8001d94:	f023 030e 	bic.w	r3, r3, #14
 8001d98:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001d9a:	6802      	ldr	r2, [r0, #0]
 8001d9c:	6813      	ldr	r3, [r2, #0]
 8001d9e:	f023 0301 	bic.w	r3, r3, #1
 8001da2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001da4:	6803      	ldr	r3, [r0, #0]
 8001da6:	4a19      	ldr	r2, [pc, #100]	@ (8001e0c <HAL_DMA_Abort_IT+0x90>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d014      	beq.n	8001dd6 <HAL_DMA_Abort_IT+0x5a>
 8001dac:	3214      	adds	r2, #20
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01f      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x76>
 8001db2:	3214      	adds	r2, #20
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d01e      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x7a>
 8001db8:	3214      	adds	r2, #20
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01e      	beq.n	8001dfc <HAL_DMA_Abort_IT+0x80>
 8001dbe:	3214      	adds	r2, #20
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d01e      	beq.n	8001e02 <HAL_DMA_Abort_IT+0x86>
 8001dc4:	3214      	adds	r2, #20
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d002      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x54>
 8001dca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001dce:	e003      	b.n	8001dd8 <HAL_DMA_Abort_IT+0x5c>
 8001dd0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001dd4:	e000      	b.n	8001dd8 <HAL_DMA_Abort_IT+0x5c>
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <HAL_DMA_Abort_IT+0x94>)
 8001dda:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8001de2:	2300      	movs	r3, #0
 8001de4:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001de8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001dea:	b16b      	cbz	r3, 8001e08 <HAL_DMA_Abort_IT+0x8c>
      hdma->XferAbortCallback(hdma);
 8001dec:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2000      	movs	r0, #0
 8001df0:	e7cd      	b.n	8001d8e <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001df2:	2210      	movs	r2, #16
 8001df4:	e7f0      	b.n	8001dd8 <HAL_DMA_Abort_IT+0x5c>
 8001df6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dfa:	e7ed      	b.n	8001dd8 <HAL_DMA_Abort_IT+0x5c>
 8001dfc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e00:	e7ea      	b.n	8001dd8 <HAL_DMA_Abort_IT+0x5c>
 8001e02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e06:	e7e7      	b.n	8001dd8 <HAL_DMA_Abort_IT+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 8001e08:	2000      	movs	r0, #0
 8001e0a:	e7c0      	b.n	8001d8e <HAL_DMA_Abort_IT+0x12>
 8001e0c:	40020008 	.word	0x40020008
 8001e10:	40020000 	.word	0x40020000

08001e14 <HAL_DMA_IRQHandler>:
{
 8001e14:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e16:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8001e18:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001e1a:	6804      	ldr	r4, [r0, #0]
 8001e1c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e1e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001e20:	2304      	movs	r3, #4
 8001e22:	408b      	lsls	r3, r1
 8001e24:	4213      	tst	r3, r2
 8001e26:	d035      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x80>
 8001e28:	f015 0f04 	tst.w	r5, #4
 8001e2c:	d032      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	f013 0f20 	tst.w	r3, #32
 8001e34:	d103      	bne.n	8001e3e <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e3e:	6803      	ldr	r3, [r0, #0]
 8001e40:	4a43      	ldr	r2, [pc, #268]	@ (8001f50 <HAL_DMA_IRQHandler+0x13c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d014      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x5c>
 8001e46:	3214      	adds	r2, #20
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d018      	beq.n	8001e7e <HAL_DMA_IRQHandler+0x6a>
 8001e4c:	3214      	adds	r2, #20
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d017      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x6e>
 8001e52:	3214      	adds	r2, #20
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d017      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x74>
 8001e58:	3214      	adds	r2, #20
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d017      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x7a>
 8001e5e:	3214      	adds	r2, #20
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d002      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x56>
 8001e64:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e68:	e003      	b.n	8001e72 <HAL_DMA_IRQHandler+0x5e>
 8001e6a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e6e:	e000      	b.n	8001e72 <HAL_DMA_IRQHandler+0x5e>
 8001e70:	2204      	movs	r2, #4
 8001e72:	4b38      	ldr	r3, [pc, #224]	@ (8001f54 <HAL_DMA_IRQHandler+0x140>)
 8001e74:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001e76:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001e78:	b103      	cbz	r3, 8001e7c <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8001e7a:	4798      	blx	r3
}
 8001e7c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e7e:	2240      	movs	r2, #64	@ 0x40
 8001e80:	e7f7      	b.n	8001e72 <HAL_DMA_IRQHandler+0x5e>
 8001e82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e86:	e7f4      	b.n	8001e72 <HAL_DMA_IRQHandler+0x5e>
 8001e88:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e8c:	e7f1      	b.n	8001e72 <HAL_DMA_IRQHandler+0x5e>
 8001e8e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e92:	e7ee      	b.n	8001e72 <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e94:	2302      	movs	r3, #2
 8001e96:	408b      	lsls	r3, r1
 8001e98:	4213      	tst	r3, r2
 8001e9a:	d03c      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x102>
 8001e9c:	f015 0f02 	tst.w	r5, #2
 8001ea0:	d039      	beq.n	8001f16 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	f013 0f20 	tst.w	r3, #32
 8001ea8:	d106      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	f023 030a 	bic.w	r3, r3, #10
 8001eb0:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001eb8:	6803      	ldr	r3, [r0, #0]
 8001eba:	4a25      	ldr	r2, [pc, #148]	@ (8001f50 <HAL_DMA_IRQHandler+0x13c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d014      	beq.n	8001eea <HAL_DMA_IRQHandler+0xd6>
 8001ec0:	3214      	adds	r2, #20
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d01c      	beq.n	8001f00 <HAL_DMA_IRQHandler+0xec>
 8001ec6:	3214      	adds	r2, #20
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d01b      	beq.n	8001f04 <HAL_DMA_IRQHandler+0xf0>
 8001ecc:	3214      	adds	r2, #20
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01b      	beq.n	8001f0a <HAL_DMA_IRQHandler+0xf6>
 8001ed2:	3214      	adds	r2, #20
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d01b      	beq.n	8001f10 <HAL_DMA_IRQHandler+0xfc>
 8001ed8:	3214      	adds	r2, #20
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d002      	beq.n	8001ee4 <HAL_DMA_IRQHandler+0xd0>
 8001ede:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ee2:	e003      	b.n	8001eec <HAL_DMA_IRQHandler+0xd8>
 8001ee4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001ee8:	e000      	b.n	8001eec <HAL_DMA_IRQHandler+0xd8>
 8001eea:	2202      	movs	r2, #2
 8001eec:	4b19      	ldr	r3, [pc, #100]	@ (8001f54 <HAL_DMA_IRQHandler+0x140>)
 8001eee:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001ef6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0bf      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8001efc:	4798      	blx	r3
 8001efe:	e7bd      	b.n	8001e7c <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f00:	2220      	movs	r2, #32
 8001f02:	e7f3      	b.n	8001eec <HAL_DMA_IRQHandler+0xd8>
 8001f04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f08:	e7f0      	b.n	8001eec <HAL_DMA_IRQHandler+0xd8>
 8001f0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f0e:	e7ed      	b.n	8001eec <HAL_DMA_IRQHandler+0xd8>
 8001f10:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f14:	e7ea      	b.n	8001eec <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f16:	2308      	movs	r3, #8
 8001f18:	408b      	lsls	r3, r1
 8001f1a:	4213      	tst	r3, r2
 8001f1c:	d0ae      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x68>
 8001f1e:	f015 0f08 	tst.w	r5, #8
 8001f22:	d0ab      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	f023 030e 	bic.w	r3, r3, #14
 8001f2a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f2c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001f2e:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001f30:	2301      	movs	r3, #1
 8001f32:	fa03 f202 	lsl.w	r2, r3, r2
 8001f36:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f38:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001f3a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001f44:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d098      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8001f4a:	4798      	blx	r3
  return;
 8001f4c:	e796      	b.n	8001e7c <HAL_DMA_IRQHandler+0x68>
 8001f4e:	bf00      	nop
 8001f50:	40020008 	.word	0x40020008
 8001f54:	40020000 	.word	0x40020000

08001f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f58:	b570      	push	{r4, r5, r6, lr}
 8001f5a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f5c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001f5e:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f60:	e0a2      	b.n	80020a8 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f62:	4d7e      	ldr	r5, [pc, #504]	@ (800215c <HAL_GPIO_Init+0x204>)
 8001f64:	42ab      	cmp	r3, r5
 8001f66:	d010      	beq.n	8001f8a <HAL_GPIO_Init+0x32>
 8001f68:	d907      	bls.n	8001f7a <HAL_GPIO_Init+0x22>
 8001f6a:	4d7d      	ldr	r5, [pc, #500]	@ (8002160 <HAL_GPIO_Init+0x208>)
 8001f6c:	42ab      	cmp	r3, r5
 8001f6e:	d00c      	beq.n	8001f8a <HAL_GPIO_Init+0x32>
 8001f70:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8001f74:	42ab      	cmp	r3, r5
 8001f76:	d008      	beq.n	8001f8a <HAL_GPIO_Init+0x32>
 8001f78:	e013      	b.n	8001fa2 <HAL_GPIO_Init+0x4a>
 8001f7a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001f7e:	42ab      	cmp	r3, r5
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x32>
 8001f82:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8001f86:	42ab      	cmp	r3, r5
 8001f88:	d107      	bne.n	8001f9a <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f8a:	688b      	ldr	r3, [r1, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d055      	beq.n	800203c <HAL_GPIO_Init+0xe4>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d04e      	beq.n	8002032 <HAL_GPIO_Init+0xda>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001f94:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f96:	2408      	movs	r4, #8
 8001f98:	e003      	b.n	8001fa2 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8001f9a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001f9e:	42ab      	cmp	r3, r5
 8001fa0:	d0f3      	beq.n	8001f8a <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fa2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8001fa6:	d84b      	bhi.n	8002040 <HAL_GPIO_Init+0xe8>
 8001fa8:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001faa:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fae:	6833      	ldr	r3, [r6, #0]
 8001fb0:	250f      	movs	r5, #15
 8001fb2:	4095      	lsls	r5, r2
 8001fb4:	ea23 0305 	bic.w	r3, r3, r5
 8001fb8:	fa04 f202 	lsl.w	r2, r4, r2
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fc0:	684b      	ldr	r3, [r1, #4]
 8001fc2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001fc6:	d06d      	beq.n	80020a4 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fc8:	4b66      	ldr	r3, [pc, #408]	@ (8002164 <HAL_GPIO_Init+0x20c>)
 8001fca:	699a      	ldr	r2, [r3, #24]
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	619a      	str	r2, [r3, #24]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001fdc:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8001fe0:	1c95      	adds	r5, r2, #2
 8001fe2:	4b61      	ldr	r3, [pc, #388]	@ (8002168 <HAL_GPIO_Init+0x210>)
 8001fe4:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fe8:	f00c 0503 	and.w	r5, ip, #3
 8001fec:	00ad      	lsls	r5, r5, #2
 8001fee:	230f      	movs	r3, #15
 8001ff0:	40ab      	lsls	r3, r5
 8001ff2:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800216c <HAL_GPIO_Init+0x214>)
 8001ff8:	4298      	cmp	r0, r3
 8001ffa:	d028      	beq.n	800204e <HAL_GPIO_Init+0xf6>
 8001ffc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002000:	4298      	cmp	r0, r3
 8002002:	f000 808d 	beq.w	8002120 <HAL_GPIO_Init+0x1c8>
 8002006:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800200a:	4298      	cmp	r0, r3
 800200c:	f000 808a 	beq.w	8002124 <HAL_GPIO_Init+0x1cc>
 8002010:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002014:	4298      	cmp	r0, r3
 8002016:	d018      	beq.n	800204a <HAL_GPIO_Init+0xf2>
 8002018:	2304      	movs	r3, #4
 800201a:	e019      	b.n	8002050 <HAL_GPIO_Init+0xf8>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800201c:	68cc      	ldr	r4, [r1, #12]
          break;
 800201e:	e7c0      	b.n	8001fa2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002020:	68cc      	ldr	r4, [r1, #12]
 8002022:	3404      	adds	r4, #4
          break;
 8002024:	e7bd      	b.n	8001fa2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002026:	68cc      	ldr	r4, [r1, #12]
 8002028:	3408      	adds	r4, #8
          break;
 800202a:	e7ba      	b.n	8001fa2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800202c:	68cc      	ldr	r4, [r1, #12]
 800202e:	340c      	adds	r4, #12
          break;
 8002030:	e7b7      	b.n	8001fa2 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8002032:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002034:	2408      	movs	r4, #8
 8002036:	e7b4      	b.n	8001fa2 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002038:	2400      	movs	r4, #0
 800203a:	e7b2      	b.n	8001fa2 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800203c:	2404      	movs	r4, #4
 800203e:	e7b0      	b.n	8001fa2 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002040:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002042:	f1ac 0208 	sub.w	r2, ip, #8
 8002046:	0092      	lsls	r2, r2, #2
 8002048:	e7b1      	b.n	8001fae <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800204a:	2303      	movs	r3, #3
 800204c:	e000      	b.n	8002050 <HAL_GPIO_Init+0xf8>
 800204e:	2300      	movs	r3, #0
 8002050:	40ab      	lsls	r3, r5
 8002052:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8002054:	3202      	adds	r2, #2
 8002056:	4d44      	ldr	r5, [pc, #272]	@ (8002168 <HAL_GPIO_Init+0x210>)
 8002058:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800205c:	684b      	ldr	r3, [r1, #4]
 800205e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8002062:	d061      	beq.n	8002128 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002064:	4a42      	ldr	r2, [pc, #264]	@ (8002170 <HAL_GPIO_Init+0x218>)
 8002066:	6893      	ldr	r3, [r2, #8]
 8002068:	ea43 030e 	orr.w	r3, r3, lr
 800206c:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800206e:	684b      	ldr	r3, [r1, #4]
 8002070:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002074:	d05e      	beq.n	8002134 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002076:	4a3e      	ldr	r2, [pc, #248]	@ (8002170 <HAL_GPIO_Init+0x218>)
 8002078:	68d3      	ldr	r3, [r2, #12]
 800207a:	ea43 030e 	orr.w	r3, r3, lr
 800207e:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002080:	684b      	ldr	r3, [r1, #4]
 8002082:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002086:	d05b      	beq.n	8002140 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002088:	4a39      	ldr	r2, [pc, #228]	@ (8002170 <HAL_GPIO_Init+0x218>)
 800208a:	6853      	ldr	r3, [r2, #4]
 800208c:	ea43 030e 	orr.w	r3, r3, lr
 8002090:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002092:	684b      	ldr	r3, [r1, #4]
 8002094:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002098:	d058      	beq.n	800214c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800209a:	4a35      	ldr	r2, [pc, #212]	@ (8002170 <HAL_GPIO_Init+0x218>)
 800209c:	6813      	ldr	r3, [r2, #0]
 800209e:	ea43 030e 	orr.w	r3, r3, lr
 80020a2:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 80020a4:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a8:	680b      	ldr	r3, [r1, #0]
 80020aa:	fa33 f20c 	lsrs.w	r2, r3, ip
 80020ae:	d053      	beq.n	8002158 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 80020b0:	2201      	movs	r2, #1
 80020b2:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 80020ba:	ea32 0303 	bics.w	r3, r2, r3
 80020be:	d1f1      	bne.n	80020a4 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 80020c0:	684b      	ldr	r3, [r1, #4]
 80020c2:	2b12      	cmp	r3, #18
 80020c4:	f63f af4d 	bhi.w	8001f62 <HAL_GPIO_Init+0xa>
 80020c8:	2b12      	cmp	r3, #18
 80020ca:	f63f af6a 	bhi.w	8001fa2 <HAL_GPIO_Init+0x4a>
 80020ce:	a501      	add	r5, pc, #4	@ (adr r5, 80020d4 <HAL_GPIO_Init+0x17c>)
 80020d0:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 80020d4:	08001f8b 	.word	0x08001f8b
 80020d8:	0800201d 	.word	0x0800201d
 80020dc:	08002027 	.word	0x08002027
 80020e0:	08002039 	.word	0x08002039
 80020e4:	08001fa3 	.word	0x08001fa3
 80020e8:	08001fa3 	.word	0x08001fa3
 80020ec:	08001fa3 	.word	0x08001fa3
 80020f0:	08001fa3 	.word	0x08001fa3
 80020f4:	08001fa3 	.word	0x08001fa3
 80020f8:	08001fa3 	.word	0x08001fa3
 80020fc:	08001fa3 	.word	0x08001fa3
 8002100:	08001fa3 	.word	0x08001fa3
 8002104:	08001fa3 	.word	0x08001fa3
 8002108:	08001fa3 	.word	0x08001fa3
 800210c:	08001fa3 	.word	0x08001fa3
 8002110:	08001fa3 	.word	0x08001fa3
 8002114:	08001fa3 	.word	0x08001fa3
 8002118:	08002021 	.word	0x08002021
 800211c:	0800202d 	.word	0x0800202d
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002120:	2301      	movs	r3, #1
 8002122:	e795      	b.n	8002050 <HAL_GPIO_Init+0xf8>
 8002124:	2302      	movs	r3, #2
 8002126:	e793      	b.n	8002050 <HAL_GPIO_Init+0xf8>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002128:	4a11      	ldr	r2, [pc, #68]	@ (8002170 <HAL_GPIO_Init+0x218>)
 800212a:	6893      	ldr	r3, [r2, #8]
 800212c:	ea23 030e 	bic.w	r3, r3, lr
 8002130:	6093      	str	r3, [r2, #8]
 8002132:	e79c      	b.n	800206e <HAL_GPIO_Init+0x116>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002134:	4a0e      	ldr	r2, [pc, #56]	@ (8002170 <HAL_GPIO_Init+0x218>)
 8002136:	68d3      	ldr	r3, [r2, #12]
 8002138:	ea23 030e 	bic.w	r3, r3, lr
 800213c:	60d3      	str	r3, [r2, #12]
 800213e:	e79f      	b.n	8002080 <HAL_GPIO_Init+0x128>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002140:	4a0b      	ldr	r2, [pc, #44]	@ (8002170 <HAL_GPIO_Init+0x218>)
 8002142:	6853      	ldr	r3, [r2, #4]
 8002144:	ea23 030e 	bic.w	r3, r3, lr
 8002148:	6053      	str	r3, [r2, #4]
 800214a:	e7a2      	b.n	8002092 <HAL_GPIO_Init+0x13a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800214c:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <HAL_GPIO_Init+0x218>)
 800214e:	6813      	ldr	r3, [r2, #0]
 8002150:	ea23 030e 	bic.w	r3, r3, lr
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e7a5      	b.n	80020a4 <HAL_GPIO_Init+0x14c>
  }
}
 8002158:	b002      	add	sp, #8
 800215a:	bd70      	pop	{r4, r5, r6, pc}
 800215c:	10220000 	.word	0x10220000
 8002160:	10310000 	.word	0x10310000
 8002164:	40021000 	.word	0x40021000
 8002168:	40010000 	.word	0x40010000
 800216c:	40010800 	.word	0x40010800
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002174:	b10a      	cbz	r2, 800217a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002176:	6101      	str	r1, [r0, #16]
 8002178:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800217a:	0409      	lsls	r1, r1, #16
 800217c:	6101      	str	r1, [r0, #16]
  }
}
 800217e:	4770      	bx	lr

08002180 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002180:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002182:	ea01 0203 	and.w	r2, r1, r3
 8002186:	ea21 0103 	bic.w	r1, r1, r3
 800218a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800218e:	6101      	str	r1, [r0, #16]
}
 8002190:	4770      	bx	lr
	...

08002194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002194:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002196:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <HAL_MspInit+0x2c>)
 8002198:	699a      	ldr	r2, [r3, #24]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	619a      	str	r2, [r3, #24]
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	f002 0201 	and.w	r2, r2, #1
 80021a6:	9200      	str	r2, [sp, #0]
 80021a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80021b0:	61da      	str	r2, [r3, #28]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021bc:	b002      	add	sp, #8
 80021be:	4770      	bx	lr
 80021c0:	40021000 	.word	0x40021000

080021c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c4:	b530      	push	{r4, r5, lr}
 80021c6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	2300      	movs	r3, #0
 80021ca:	9302      	str	r3, [sp, #8]
 80021cc:	9303      	str	r3, [sp, #12]
 80021ce:	9304      	str	r3, [sp, #16]
 80021d0:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART2)
 80021d2:	6802      	ldr	r2, [r0, #0]
 80021d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <HAL_UART_MspInit+0x80>)
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021da:	b007      	add	sp, #28
 80021dc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80021de:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80021e8:	61da      	str	r2, [r3, #28]
 80021ea:	69da      	ldr	r2, [r3, #28]
 80021ec:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80021f0:	9200      	str	r2, [sp, #0]
 80021f2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f4:	699a      	ldr	r2, [r3, #24]
 80021f6:	f042 0204 	orr.w	r2, r2, #4
 80021fa:	619a      	str	r2, [r3, #24]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002206:	2304      	movs	r3, #4
 8002208:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	4d0d      	ldr	r5, [pc, #52]	@ (8002248 <HAL_UART_MspInit+0x84>)
 8002214:	a902      	add	r1, sp, #8
 8002216:	4628      	mov	r0, r5
 8002218:	f7ff fe9e 	bl	8001f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800221c:	2308      	movs	r3, #8
 800221e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002220:	2400      	movs	r4, #0
 8002222:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	eb0d 0103 	add.w	r1, sp, r3
 800222a:	4628      	mov	r0, r5
 800222c:	f7ff fe94 	bl	8001f58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002230:	4622      	mov	r2, r4
 8002232:	4621      	mov	r1, r4
 8002234:	2026      	movs	r0, #38	@ 0x26
 8002236:	f7ff fc9b 	bl	8001b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800223a:	2026      	movs	r0, #38	@ 0x26
 800223c:	f7ff fca8 	bl	8001b90 <HAL_NVIC_EnableIRQ>
}
 8002240:	e7cb      	b.n	80021da <HAL_UART_MspInit+0x16>
 8002242:	bf00      	nop
 8002244:	40004400 	.word	0x40004400
 8002248:	40010800 	.word	0x40010800

0800224c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800224c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800224e:	4b08      	ldr	r3, [pc, #32]	@ (8002270 <RCC_Delay+0x24>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a08      	ldr	r2, [pc, #32]	@ (8002274 <RCC_Delay+0x28>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	0a5b      	lsrs	r3, r3, #9
 800225a:	fb00 f303 	mul.w	r3, r0, r3
 800225e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002260:	bf00      	nop
  }
  while (Delay --);
 8002262:	9b01      	ldr	r3, [sp, #4]
 8002264:	1e5a      	subs	r2, r3, #1
 8002266:	9201      	str	r2, [sp, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f9      	bne.n	8002260 <RCC_Delay+0x14>
}
 800226c:	b002      	add	sp, #8
 800226e:	4770      	bx	lr
 8002270:	20000010 	.word	0x20000010
 8002274:	10624dd3 	.word	0x10624dd3

08002278 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002278:	2800      	cmp	r0, #0
 800227a:	f000 81f1 	beq.w	8002660 <HAL_RCC_OscConfig+0x3e8>
{
 800227e:	b570      	push	{r4, r5, r6, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002284:	6803      	ldr	r3, [r0, #0]
 8002286:	f013 0f01 	tst.w	r3, #1
 800228a:	d02c      	beq.n	80022e6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800228c:	4b99      	ldr	r3, [pc, #612]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b04      	cmp	r3, #4
 8002296:	d01d      	beq.n	80022d4 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002298:	4b96      	ldr	r3, [pc, #600]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d012      	beq.n	80022ca <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a4:	6863      	ldr	r3, [r4, #4]
 80022a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022aa:	d041      	beq.n	8002330 <HAL_RCC_OscConfig+0xb8>
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d155      	bne.n	800235c <HAL_RCC_OscConfig+0xe4>
 80022b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80022b4:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	e037      	b.n	800233a <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022ca:	4b8a      	ldr	r3, [pc, #552]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80022d2:	d0e7      	beq.n	80022a4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	4b87      	ldr	r3, [pc, #540]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_OscConfig+0x6e>
 80022de:	6863      	ldr	r3, [r4, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 81bf 	beq.w	8002664 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	f013 0f02 	tst.w	r3, #2
 80022ec:	d075      	beq.n	80023da <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ee:	4b81      	ldr	r3, [pc, #516]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f013 0f0c 	tst.w	r3, #12
 80022f6:	d05f      	beq.n	80023b8 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022f8:	4b7e      	ldr	r3, [pc, #504]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	d054      	beq.n	80023ae <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002304:	6923      	ldr	r3, [r4, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 808a 	beq.w	8002420 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 800230c:	4b7a      	ldr	r3, [pc, #488]	@ (80024f8 <HAL_RCC_OscConfig+0x280>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002312:	f7ff fbe1 	bl	8001ad8 <HAL_GetTick>
 8002316:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	4b76      	ldr	r3, [pc, #472]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f013 0f02 	tst.w	r3, #2
 8002320:	d175      	bne.n	800240e <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002322:	f7ff fbd9 	bl	8001ad8 <HAL_GetTick>
 8002326:	1b40      	subs	r0, r0, r5
 8002328:	2802      	cmp	r0, #2
 800232a:	d9f5      	bls.n	8002318 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 800232c:	2003      	movs	r0, #3
 800232e:	e19e      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002330:	4a70      	ldr	r2, [pc, #448]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002332:	6813      	ldr	r3, [r2, #0]
 8002334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002338:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800233a:	6863      	ldr	r3, [r4, #4]
 800233c:	b343      	cbz	r3, 8002390 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 800233e:	f7ff fbcb 	bl	8001ad8 <HAL_GetTick>
 8002342:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002344:	4b6b      	ldr	r3, [pc, #428]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800234c:	d1cb      	bne.n	80022e6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800234e:	f7ff fbc3 	bl	8001ad8 <HAL_GetTick>
 8002352:	1b40      	subs	r0, r0, r5
 8002354:	2864      	cmp	r0, #100	@ 0x64
 8002356:	d9f5      	bls.n	8002344 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002358:	2003      	movs	r0, #3
 800235a:	e188      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002360:	d009      	beq.n	8002376 <HAL_RCC_OscConfig+0xfe>
 8002362:	4b64      	ldr	r3, [pc, #400]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	e7e1      	b.n	800233a <HAL_RCC_OscConfig+0xc2>
 8002376:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800237a:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	e7d4      	b.n	800233a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002390:	f7ff fba2 	bl	8001ad8 <HAL_GetTick>
 8002394:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	4b57      	ldr	r3, [pc, #348]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800239e:	d0a2      	beq.n	80022e6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7ff fb9a 	bl	8001ad8 <HAL_GetTick>
 80023a4:	1b40      	subs	r0, r0, r5
 80023a6:	2864      	cmp	r0, #100	@ 0x64
 80023a8:	d9f5      	bls.n	8002396 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80023aa:	2003      	movs	r0, #3
 80023ac:	e15f      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023ae:	4b51      	ldr	r3, [pc, #324]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80023b6:	d1a5      	bne.n	8002304 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b8:	4b4e      	ldr	r3, [pc, #312]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f013 0f02 	tst.w	r3, #2
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_OscConfig+0x152>
 80023c2:	6923      	ldr	r3, [r4, #16]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	f040 814f 	bne.w	8002668 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	4a4a      	ldr	r2, [pc, #296]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80023cc:	6813      	ldr	r3, [r2, #0]
 80023ce:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80023d2:	6961      	ldr	r1, [r4, #20]
 80023d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023d8:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	f013 0f08 	tst.w	r3, #8
 80023e0:	d033      	beq.n	800244a <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e2:	69a3      	ldr	r3, [r4, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d05c      	beq.n	80024a2 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80023e8:	4b43      	ldr	r3, [pc, #268]	@ (80024f8 <HAL_RCC_OscConfig+0x280>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80023f0:	f7ff fb72 	bl	8001ad8 <HAL_GetTick>
 80023f4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f6:	4b3f      	ldr	r3, [pc, #252]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80023f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fa:	f013 0f02 	tst.w	r3, #2
 80023fe:	d121      	bne.n	8002444 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002400:	f7ff fb6a 	bl	8001ad8 <HAL_GetTick>
 8002404:	1b40      	subs	r0, r0, r5
 8002406:	2802      	cmp	r0, #2
 8002408:	d9f5      	bls.n	80023f6 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 800240a:	2003      	movs	r0, #3
 800240c:	e12f      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240e:	4a39      	ldr	r2, [pc, #228]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002410:	6813      	ldr	r3, [r2, #0]
 8002412:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002416:	6961      	ldr	r1, [r4, #20]
 8002418:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e7dc      	b.n	80023da <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002420:	4b35      	ldr	r3, [pc, #212]	@ (80024f8 <HAL_RCC_OscConfig+0x280>)
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002426:	f7ff fb57 	bl	8001ad8 <HAL_GetTick>
 800242a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242c:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f013 0f02 	tst.w	r3, #2
 8002434:	d0d1      	beq.n	80023da <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002436:	f7ff fb4f 	bl	8001ad8 <HAL_GetTick>
 800243a:	1b40      	subs	r0, r0, r5
 800243c:	2802      	cmp	r0, #2
 800243e:	d9f5      	bls.n	800242c <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002440:	2003      	movs	r0, #3
 8002442:	e114      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8002444:	2001      	movs	r0, #1
 8002446:	f7ff ff01 	bl	800224c <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	f013 0f04 	tst.w	r3, #4
 8002450:	f000 8096 	beq.w	8002580 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002454:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800245c:	d134      	bne.n	80024c8 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b25      	ldr	r3, [pc, #148]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002466:	61da      	str	r2, [r3, #28]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002472:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	4b21      	ldr	r3, [pc, #132]	@ (80024fc <HAL_RCC_OscConfig+0x284>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800247c:	d026      	beq.n	80024cc <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247e:	68e3      	ldr	r3, [r4, #12]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d03d      	beq.n	8002500 <HAL_RCC_OscConfig+0x288>
 8002484:	2b00      	cmp	r3, #0
 8002486:	d153      	bne.n	8002530 <HAL_RCC_OscConfig+0x2b8>
 8002488:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800248c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002490:	6a1a      	ldr	r2, [r3, #32]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	621a      	str	r2, [r3, #32]
 8002498:	6a1a      	ldr	r2, [r3, #32]
 800249a:	f022 0204 	bic.w	r2, r2, #4
 800249e:	621a      	str	r2, [r3, #32]
 80024a0:	e033      	b.n	800250a <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <HAL_RCC_OscConfig+0x280>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80024aa:	f7ff fb15 	bl	8001ad8 <HAL_GetTick>
 80024ae:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b0:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80024b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b4:	f013 0f02 	tst.w	r3, #2
 80024b8:	d0c7      	beq.n	800244a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ba:	f7ff fb0d 	bl	8001ad8 <HAL_GetTick>
 80024be:	1b40      	subs	r0, r0, r5
 80024c0:	2802      	cmp	r0, #2
 80024c2:	d9f5      	bls.n	80024b0 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 80024c4:	2003      	movs	r0, #3
 80024c6:	e0d2      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80024c8:	2500      	movs	r5, #0
 80024ca:	e7d3      	b.n	8002474 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024cc:	4a0b      	ldr	r2, [pc, #44]	@ (80024fc <HAL_RCC_OscConfig+0x284>)
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80024d6:	f7ff faff 	bl	8001ad8 <HAL_GetTick>
 80024da:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	4b07      	ldr	r3, [pc, #28]	@ (80024fc <HAL_RCC_OscConfig+0x284>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80024e4:	d1cb      	bne.n	800247e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e6:	f7ff faf7 	bl	8001ad8 <HAL_GetTick>
 80024ea:	1b80      	subs	r0, r0, r6
 80024ec:	2864      	cmp	r0, #100	@ 0x64
 80024ee:	d9f5      	bls.n	80024dc <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 80024f0:	2003      	movs	r0, #3
 80024f2:	e0bc      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
 80024f4:	40021000 	.word	0x40021000
 80024f8:	42420000 	.word	0x42420000
 80024fc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002500:	4a5f      	ldr	r2, [pc, #380]	@ (8002680 <HAL_RCC_OscConfig+0x408>)
 8002502:	6a13      	ldr	r3, [r2, #32]
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800250a:	68e3      	ldr	r3, [r4, #12]
 800250c:	b333      	cbz	r3, 800255c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800250e:	f7ff fae3 	bl	8001ad8 <HAL_GetTick>
 8002512:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	4b5a      	ldr	r3, [pc, #360]	@ (8002680 <HAL_RCC_OscConfig+0x408>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f013 0f02 	tst.w	r3, #2
 800251c:	d12f      	bne.n	800257e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251e:	f7ff fadb 	bl	8001ad8 <HAL_GetTick>
 8002522:	1b80      	subs	r0, r0, r6
 8002524:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002528:	4298      	cmp	r0, r3
 800252a:	d9f3      	bls.n	8002514 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 800252c:	2003      	movs	r0, #3
 800252e:	e09e      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002530:	2b05      	cmp	r3, #5
 8002532:	d009      	beq.n	8002548 <HAL_RCC_OscConfig+0x2d0>
 8002534:	4b52      	ldr	r3, [pc, #328]	@ (8002680 <HAL_RCC_OscConfig+0x408>)
 8002536:	6a1a      	ldr	r2, [r3, #32]
 8002538:	f022 0201 	bic.w	r2, r2, #1
 800253c:	621a      	str	r2, [r3, #32]
 800253e:	6a1a      	ldr	r2, [r3, #32]
 8002540:	f022 0204 	bic.w	r2, r2, #4
 8002544:	621a      	str	r2, [r3, #32]
 8002546:	e7e0      	b.n	800250a <HAL_RCC_OscConfig+0x292>
 8002548:	4b4d      	ldr	r3, [pc, #308]	@ (8002680 <HAL_RCC_OscConfig+0x408>)
 800254a:	6a1a      	ldr	r2, [r3, #32]
 800254c:	f042 0204 	orr.w	r2, r2, #4
 8002550:	621a      	str	r2, [r3, #32]
 8002552:	6a1a      	ldr	r2, [r3, #32]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	621a      	str	r2, [r3, #32]
 800255a:	e7d6      	b.n	800250a <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 800255c:	f7ff fabc 	bl	8001ad8 <HAL_GetTick>
 8002560:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002562:	4b47      	ldr	r3, [pc, #284]	@ (8002680 <HAL_RCC_OscConfig+0x408>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f013 0f02 	tst.w	r3, #2
 800256a:	d008      	beq.n	800257e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256c:	f7ff fab4 	bl	8001ad8 <HAL_GetTick>
 8002570:	1b80      	subs	r0, r0, r6
 8002572:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002576:	4298      	cmp	r0, r3
 8002578:	d9f3      	bls.n	8002562 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800257a:	2003      	movs	r0, #3
 800257c:	e077      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800257e:	b9e5      	cbnz	r5, 80025ba <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002580:	69e3      	ldr	r3, [r4, #28]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d072      	beq.n	800266c <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002586:	4a3e      	ldr	r2, [pc, #248]	@ (8002680 <HAL_RCC_OscConfig+0x408>)
 8002588:	6852      	ldr	r2, [r2, #4]
 800258a:	f002 020c 	and.w	r2, r2, #12
 800258e:	2a08      	cmp	r2, #8
 8002590:	d056      	beq.n	8002640 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002592:	2b02      	cmp	r3, #2
 8002594:	d017      	beq.n	80025c6 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8002596:	4b3b      	ldr	r3, [pc, #236]	@ (8002684 <HAL_RCC_OscConfig+0x40c>)
 8002598:	2200      	movs	r2, #0
 800259a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800259c:	f7ff fa9c 	bl	8001ad8 <HAL_GetTick>
 80025a0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a2:	4b37      	ldr	r3, [pc, #220]	@ (8002680 <HAL_RCC_OscConfig+0x408>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80025aa:	d047      	beq.n	800263c <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7ff fa94 	bl	8001ad8 <HAL_GetTick>
 80025b0:	1b00      	subs	r0, r0, r4
 80025b2:	2802      	cmp	r0, #2
 80025b4:	d9f5      	bls.n	80025a2 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80025b6:	2003      	movs	r0, #3
 80025b8:	e059      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ba:	4a31      	ldr	r2, [pc, #196]	@ (8002680 <HAL_RCC_OscConfig+0x408>)
 80025bc:	69d3      	ldr	r3, [r2, #28]
 80025be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c2:	61d3      	str	r3, [r2, #28]
 80025c4:	e7dc      	b.n	8002580 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80025c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002684 <HAL_RCC_OscConfig+0x40c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80025cc:	f7ff fa84 	bl	8001ad8 <HAL_GetTick>
 80025d0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002680 <HAL_RCC_OscConfig+0x408>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80025da:	d006      	beq.n	80025ea <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7ff fa7c 	bl	8001ad8 <HAL_GetTick>
 80025e0:	1b40      	subs	r0, r0, r5
 80025e2:	2802      	cmp	r0, #2
 80025e4:	d9f5      	bls.n	80025d2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80025e6:	2003      	movs	r0, #3
 80025e8:	e041      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025ea:	6a23      	ldr	r3, [r4, #32]
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f0:	d01a      	beq.n	8002628 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f2:	4923      	ldr	r1, [pc, #140]	@ (8002680 <HAL_RCC_OscConfig+0x408>)
 80025f4:	684b      	ldr	r3, [r1, #4]
 80025f6:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80025fa:	6a22      	ldr	r2, [r4, #32]
 80025fc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80025fe:	4302      	orrs	r2, r0
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002604:	4b1f      	ldr	r3, [pc, #124]	@ (8002684 <HAL_RCC_OscConfig+0x40c>)
 8002606:	2201      	movs	r2, #1
 8002608:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800260a:	f7ff fa65 	bl	8001ad8 <HAL_GetTick>
 800260e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002610:	4b1b      	ldr	r3, [pc, #108]	@ (8002680 <HAL_RCC_OscConfig+0x408>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002618:	d10e      	bne.n	8002638 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261a:	f7ff fa5d 	bl	8001ad8 <HAL_GetTick>
 800261e:	1b00      	subs	r0, r0, r4
 8002620:	2802      	cmp	r0, #2
 8002622:	d9f5      	bls.n	8002610 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8002624:	2003      	movs	r0, #3
 8002626:	e022      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002628:	4a15      	ldr	r2, [pc, #84]	@ (8002680 <HAL_RCC_OscConfig+0x408>)
 800262a:	6853      	ldr	r3, [r2, #4]
 800262c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002630:	68a1      	ldr	r1, [r4, #8]
 8002632:	430b      	orrs	r3, r1
 8002634:	6053      	str	r3, [r2, #4]
 8002636:	e7dc      	b.n	80025f2 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8002638:	2000      	movs	r0, #0
 800263a:	e018      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
 800263c:	2000      	movs	r0, #0
 800263e:	e016      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002640:	2b01      	cmp	r3, #1
 8002642:	d016      	beq.n	8002672 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8002644:	4b0e      	ldr	r3, [pc, #56]	@ (8002680 <HAL_RCC_OscConfig+0x408>)
 8002646:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002648:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 800264c:	6a22      	ldr	r2, [r4, #32]
 800264e:	4291      	cmp	r1, r2
 8002650:	d111      	bne.n	8002676 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002652:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002656:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002658:	4293      	cmp	r3, r2
 800265a:	d10e      	bne.n	800267a <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 800265c:	2000      	movs	r0, #0
 800265e:	e006      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8002660:	2001      	movs	r0, #1
}
 8002662:	4770      	bx	lr
        return HAL_ERROR;
 8002664:	2001      	movs	r0, #1
 8002666:	e002      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8002668:	2001      	movs	r0, #1
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 800266c:	2000      	movs	r0, #0
}
 800266e:	b002      	add	sp, #8
 8002670:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002672:	2001      	movs	r0, #1
 8002674:	e7fb      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8002676:	2001      	movs	r0, #1
 8002678:	e7f9      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
 800267a:	2001      	movs	r0, #1
 800267c:	e7f7      	b.n	800266e <HAL_RCC_OscConfig+0x3f6>
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	42420000 	.word	0x42420000

08002688 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002688:	4b0f      	ldr	r3, [pc, #60]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x40>)
 800268a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800268c:	f003 020c 	and.w	r2, r3, #12
 8002690:	2a08      	cmp	r2, #8
 8002692:	d001      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8002694:	480d      	ldr	r0, [pc, #52]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x44>)
}
 8002696:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002698:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800269c:	490c      	ldr	r1, [pc, #48]	@ (80026d0 <HAL_RCC_GetSysClockFreq+0x48>)
 800269e:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026a0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80026a4:	d00b      	beq.n	80026be <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026a6:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <HAL_RCC_GetSysClockFreq+0x40>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80026ae:	4a09      	ldr	r2, [pc, #36]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x4c>)
 80026b0:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026b2:	4a06      	ldr	r2, [pc, #24]	@ (80026cc <HAL_RCC_GetSysClockFreq+0x44>)
 80026b4:	fb02 f000 	mul.w	r0, r2, r0
 80026b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80026bc:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026be:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x50>)
 80026c0:	fb03 f000 	mul.w	r0, r3, r0
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	007a1200 	.word	0x007a1200
 80026d0:	08003748 	.word	0x08003748
 80026d4:	08003744 	.word	0x08003744
 80026d8:	003d0900 	.word	0x003d0900

080026dc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80026dc:	2800      	cmp	r0, #0
 80026de:	f000 80a0 	beq.w	8002822 <HAL_RCC_ClockConfig+0x146>
{
 80026e2:	b570      	push	{r4, r5, r6, lr}
 80026e4:	460d      	mov	r5, r1
 80026e6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e8:	4b52      	ldr	r3, [pc, #328]	@ (8002834 <HAL_RCC_ClockConfig+0x158>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	428b      	cmp	r3, r1
 80026f2:	d20b      	bcs.n	800270c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002834 <HAL_RCC_ClockConfig+0x158>)
 80026f6:	6813      	ldr	r3, [r2, #0]
 80026f8:	f023 0307 	bic.w	r3, r3, #7
 80026fc:	430b      	orrs	r3, r1
 80026fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002700:	6813      	ldr	r3, [r2, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	428b      	cmp	r3, r1
 8002708:	f040 808d 	bne.w	8002826 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	f013 0f02 	tst.w	r3, #2
 8002712:	d017      	beq.n	8002744 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	f013 0f04 	tst.w	r3, #4
 8002718:	d004      	beq.n	8002724 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800271a:	4a47      	ldr	r2, [pc, #284]	@ (8002838 <HAL_RCC_ClockConfig+0x15c>)
 800271c:	6853      	ldr	r3, [r2, #4]
 800271e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002722:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	f013 0f08 	tst.w	r3, #8
 800272a:	d004      	beq.n	8002736 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800272c:	4a42      	ldr	r2, [pc, #264]	@ (8002838 <HAL_RCC_ClockConfig+0x15c>)
 800272e:	6853      	ldr	r3, [r2, #4]
 8002730:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002734:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002736:	4a40      	ldr	r2, [pc, #256]	@ (8002838 <HAL_RCC_ClockConfig+0x15c>)
 8002738:	6853      	ldr	r3, [r2, #4]
 800273a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800273e:	68a1      	ldr	r1, [r4, #8]
 8002740:	430b      	orrs	r3, r1
 8002742:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002744:	6823      	ldr	r3, [r4, #0]
 8002746:	f013 0f01 	tst.w	r3, #1
 800274a:	d031      	beq.n	80027b0 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274c:	6863      	ldr	r3, [r4, #4]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d020      	beq.n	8002794 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002752:	2b02      	cmp	r3, #2
 8002754:	d025      	beq.n	80027a2 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4a38      	ldr	r2, [pc, #224]	@ (8002838 <HAL_RCC_ClockConfig+0x15c>)
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	f012 0f02 	tst.w	r2, #2
 800275e:	d064      	beq.n	800282a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002760:	4935      	ldr	r1, [pc, #212]	@ (8002838 <HAL_RCC_ClockConfig+0x15c>)
 8002762:	684a      	ldr	r2, [r1, #4]
 8002764:	f022 0203 	bic.w	r2, r2, #3
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800276c:	f7ff f9b4 	bl	8001ad8 <HAL_GetTick>
 8002770:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	4b31      	ldr	r3, [pc, #196]	@ (8002838 <HAL_RCC_ClockConfig+0x15c>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	6862      	ldr	r2, [r4, #4]
 800277c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002780:	d016      	beq.n	80027b0 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002782:	f7ff f9a9 	bl	8001ad8 <HAL_GetTick>
 8002786:	1b80      	subs	r0, r0, r6
 8002788:	f241 3388 	movw	r3, #5000	@ 0x1388
 800278c:	4298      	cmp	r0, r3
 800278e:	d9f0      	bls.n	8002772 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8002790:	2003      	movs	r0, #3
 8002792:	e045      	b.n	8002820 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002794:	4a28      	ldr	r2, [pc, #160]	@ (8002838 <HAL_RCC_ClockConfig+0x15c>)
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800279c:	d1e0      	bne.n	8002760 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800279e:	2001      	movs	r0, #1
 80027a0:	e03e      	b.n	8002820 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a2:	4a25      	ldr	r2, [pc, #148]	@ (8002838 <HAL_RCC_ClockConfig+0x15c>)
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80027aa:	d1d9      	bne.n	8002760 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80027ac:	2001      	movs	r0, #1
 80027ae:	e037      	b.n	8002820 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027b0:	4b20      	ldr	r3, [pc, #128]	@ (8002834 <HAL_RCC_ClockConfig+0x158>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	42ab      	cmp	r3, r5
 80027ba:	d90a      	bls.n	80027d2 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002834 <HAL_RCC_ClockConfig+0x158>)
 80027be:	6813      	ldr	r3, [r2, #0]
 80027c0:	f023 0307 	bic.w	r3, r3, #7
 80027c4:	432b      	orrs	r3, r5
 80027c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c8:	6813      	ldr	r3, [r2, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	42ab      	cmp	r3, r5
 80027d0:	d12d      	bne.n	800282e <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	f013 0f04 	tst.w	r3, #4
 80027d8:	d006      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027da:	4a17      	ldr	r2, [pc, #92]	@ (8002838 <HAL_RCC_ClockConfig+0x15c>)
 80027dc:	6853      	ldr	r3, [r2, #4]
 80027de:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80027e2:	68e1      	ldr	r1, [r4, #12]
 80027e4:	430b      	orrs	r3, r1
 80027e6:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	f013 0f08 	tst.w	r3, #8
 80027ee:	d007      	beq.n	8002800 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027f0:	4a11      	ldr	r2, [pc, #68]	@ (8002838 <HAL_RCC_ClockConfig+0x15c>)
 80027f2:	6853      	ldr	r3, [r2, #4]
 80027f4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80027f8:	6921      	ldr	r1, [r4, #16]
 80027fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80027fe:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002800:	f7ff ff42 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002804:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <HAL_RCC_ClockConfig+0x15c>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800280c:	4a0b      	ldr	r2, [pc, #44]	@ (800283c <HAL_RCC_ClockConfig+0x160>)
 800280e:	5cd3      	ldrb	r3, [r2, r3]
 8002810:	40d8      	lsrs	r0, r3
 8002812:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_RCC_ClockConfig+0x164>)
 8002814:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002816:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <HAL_RCC_ClockConfig+0x168>)
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	f7ff f919 	bl	8001a50 <HAL_InitTick>
  return HAL_OK;
 800281e:	2000      	movs	r0, #0
}
 8002820:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002822:	2001      	movs	r0, #1
}
 8002824:	4770      	bx	lr
    return HAL_ERROR;
 8002826:	2001      	movs	r0, #1
 8002828:	e7fa      	b.n	8002820 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800282a:	2001      	movs	r0, #1
 800282c:	e7f8      	b.n	8002820 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800282e:	2001      	movs	r0, #1
 8002830:	e7f6      	b.n	8002820 <HAL_RCC_ClockConfig+0x144>
 8002832:	bf00      	nop
 8002834:	40022000 	.word	0x40022000
 8002838:	40021000 	.word	0x40021000
 800283c:	08003760 	.word	0x08003760
 8002840:	20000010 	.word	0x20000010
 8002844:	2000000c 	.word	0x2000000c

08002848 <HAL_RCC_GetHCLKFreq>:
}
 8002848:	4b01      	ldr	r3, [pc, #4]	@ (8002850 <HAL_RCC_GetHCLKFreq+0x8>)
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000010 	.word	0x20000010

08002854 <HAL_RCC_GetPCLK1Freq>:
{
 8002854:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002856:	f7ff fff7 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 800285a:	4b04      	ldr	r3, [pc, #16]	@ (800286c <HAL_RCC_GetPCLK1Freq+0x18>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002862:	4a03      	ldr	r2, [pc, #12]	@ (8002870 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002864:	5cd3      	ldrb	r3, [r2, r3]
}
 8002866:	40d8      	lsrs	r0, r3
 8002868:	bd08      	pop	{r3, pc}
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000
 8002870:	08003758 	.word	0x08003758

08002874 <HAL_RCC_GetPCLK2Freq>:
{
 8002874:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002876:	f7ff ffe7 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 800287a:	4b04      	ldr	r3, [pc, #16]	@ (800288c <HAL_RCC_GetPCLK2Freq+0x18>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002882:	4a03      	ldr	r2, [pc, #12]	@ (8002890 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
}
 8002886:	40d8      	lsrs	r0, r3
 8002888:	bd08      	pop	{r3, pc}
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	08003758 	.word	0x08003758

08002894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002894:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002898:	6a03      	ldr	r3, [r0, #32]
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028a0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028a2:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028a4:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028a8:	680c      	ldr	r4, [r1, #0]
 80028aa:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028ac:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028b0:	688b      	ldr	r3, [r1, #8]
 80028b2:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028b4:	4a0b      	ldr	r2, [pc, #44]	@ (80028e4 <TIM_OC1_SetConfig+0x50>)
 80028b6:	4290      	cmp	r0, r2
 80028b8:	d006      	beq.n	80028c8 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ba:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028bc:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028be:	684a      	ldr	r2, [r1, #4]
 80028c0:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c2:	6203      	str	r3, [r0, #32]
}
 80028c4:	bc30      	pop	{r4, r5}
 80028c6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80028c8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80028cc:	68ca      	ldr	r2, [r1, #12]
 80028ce:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 80028d0:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028d4:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80028d8:	694a      	ldr	r2, [r1, #20]
 80028da:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80028dc:	698d      	ldr	r5, [r1, #24]
 80028de:	4315      	orrs	r5, r2
 80028e0:	e7eb      	b.n	80028ba <TIM_OC1_SetConfig+0x26>
 80028e2:	bf00      	nop
 80028e4:	40012c00 	.word	0x40012c00

080028e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028e8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ea:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028ec:	6a02      	ldr	r2, [r0, #32]
 80028ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028f2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028f6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028f8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028fc:	680d      	ldr	r5, [r1, #0]
 80028fe:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002900:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002904:	688a      	ldr	r2, [r1, #8]
 8002906:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800290a:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <TIM_OC3_SetConfig+0x58>)
 800290c:	4290      	cmp	r0, r2
 800290e:	d006      	beq.n	800291e <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002910:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002912:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002914:	684a      	ldr	r2, [r1, #4]
 8002916:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002918:	6203      	str	r3, [r0, #32]
}
 800291a:	bc30      	pop	{r4, r5}
 800291c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800291e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002922:	68ca      	ldr	r2, [r1, #12]
 8002924:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8002928:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800292c:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002930:	694a      	ldr	r2, [r1, #20]
 8002932:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002936:	698a      	ldr	r2, [r1, #24]
 8002938:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 800293c:	e7e8      	b.n	8002910 <TIM_OC3_SetConfig+0x28>
 800293e:	bf00      	nop
 8002940:	40012c00 	.word	0x40012c00

08002944 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002944:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002946:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002948:	6a02      	ldr	r2, [r0, #32]
 800294a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800294e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002950:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002952:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002954:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002958:	680d      	ldr	r5, [r1, #0]
 800295a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800295e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002962:	688d      	ldr	r5, [r1, #8]
 8002964:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002968:	4d07      	ldr	r5, [pc, #28]	@ (8002988 <TIM_OC4_SetConfig+0x44>)
 800296a:	42a8      	cmp	r0, r5
 800296c:	d006      	beq.n	800297c <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800296e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002970:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002972:	684a      	ldr	r2, [r1, #4]
 8002974:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002976:	6203      	str	r3, [r0, #32]
}
 8002978:	bc30      	pop	{r4, r5}
 800297a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 800297c:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002980:	694d      	ldr	r5, [r1, #20]
 8002982:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002986:	e7f2      	b.n	800296e <TIM_OC4_SetConfig+0x2a>
 8002988:	40012c00 	.word	0x40012c00

0800298c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800298c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d122      	bne.n	80029dc <HAL_TIM_Base_Start+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8002996:	2302      	movs	r3, #2
 8002998:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299c:	6803      	ldr	r3, [r0, #0]
 800299e:	4a11      	ldr	r2, [pc, #68]	@ (80029e4 <HAL_TIM_Base_Start+0x58>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d010      	beq.n	80029c6 <HAL_TIM_Base_Start+0x3a>
 80029a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a8:	d00d      	beq.n	80029c6 <HAL_TIM_Base_Start+0x3a>
 80029aa:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d009      	beq.n	80029c6 <HAL_TIM_Base_Start+0x3a>
 80029b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d005      	beq.n	80029c6 <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80029c2:	2000      	movs	r0, #0
 80029c4:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029cc:	2a06      	cmp	r2, #6
 80029ce:	d007      	beq.n	80029e0 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80029d8:	2000      	movs	r0, #0
 80029da:	4770      	bx	lr
    return HAL_ERROR;
 80029dc:	2001      	movs	r0, #1
 80029de:	4770      	bx	lr
  return HAL_OK;
 80029e0:	2000      	movs	r0, #0
}
 80029e2:	4770      	bx	lr
 80029e4:	40012c00 	.word	0x40012c00

080029e8 <HAL_TIM_PWM_MspInit>:
}
 80029e8:	4770      	bx	lr

080029ea <HAL_TIM_OC_DelayElapsedCallback>:
}
 80029ea:	4770      	bx	lr

080029ec <HAL_TIM_IC_CaptureCallback>:
}
 80029ec:	4770      	bx	lr

080029ee <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIM_TriggerCallback>:
}
 80029f0:	4770      	bx	lr

080029f2 <HAL_TIM_IRQHandler>:
{
 80029f2:	b570      	push	{r4, r5, r6, lr}
 80029f4:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80029f6:	6803      	ldr	r3, [r0, #0]
 80029f8:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029fa:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029fc:	f015 0f02 	tst.w	r5, #2
 8002a00:	d010      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a02:	f016 0f02 	tst.w	r6, #2
 8002a06:	d00d      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a08:	f06f 0202 	mvn.w	r2, #2
 8002a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a12:	6803      	ldr	r3, [r0, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f013 0f03 	tst.w	r3, #3
 8002a1a:	d05e      	beq.n	8002ada <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8002a1c:	f7ff ffe6 	bl	80029ec <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a20:	2300      	movs	r3, #0
 8002a22:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a24:	f015 0f04 	tst.w	r5, #4
 8002a28:	d012      	beq.n	8002a50 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a2a:	f016 0f04 	tst.w	r6, #4
 8002a2e:	d00f      	beq.n	8002a50 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	f06f 0204 	mvn.w	r2, #4
 8002a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002a44:	d04f      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a46:	4620      	mov	r0, r4
 8002a48:	f7ff ffd0 	bl	80029ec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a50:	f015 0f08 	tst.w	r5, #8
 8002a54:	d012      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a56:	f016 0f08 	tst.w	r6, #8
 8002a5a:	d00f      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	f06f 0208 	mvn.w	r2, #8
 8002a62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a64:	2304      	movs	r3, #4
 8002a66:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	f013 0f03 	tst.w	r3, #3
 8002a70:	d040      	beq.n	8002af4 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7ff ffba 	bl	80029ec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a7c:	f015 0f10 	tst.w	r5, #16
 8002a80:	d012      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a82:	f016 0f10 	tst.w	r6, #16
 8002a86:	d00f      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	f06f 0210 	mvn.w	r2, #16
 8002a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a90:	2308      	movs	r3, #8
 8002a92:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002a9c:	d031      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	4620      	mov	r0, r4
 8002aa0:	f7ff ffa4 	bl	80029ec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002aa8:	f015 0f01 	tst.w	r5, #1
 8002aac:	d002      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002aae:	f016 0f01 	tst.w	r6, #1
 8002ab2:	d12d      	bne.n	8002b10 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ab4:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8002ab8:	d002      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aba:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8002abe:	d12f      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ac0:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8002ac4:	d002      	beq.n	8002acc <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ac6:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8002aca:	d131      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002acc:	f015 0f20 	tst.w	r5, #32
 8002ad0:	d002      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ad2:	f016 0f20 	tst.w	r6, #32
 8002ad6:	d133      	bne.n	8002b40 <HAL_TIM_IRQHandler+0x14e>
}
 8002ad8:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ada:	f7ff ff86 	bl	80029ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7ff ff85 	bl	80029ee <HAL_TIM_PWM_PulseFinishedCallback>
 8002ae4:	e79c      	b.n	8002a20 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	f7ff ff7f 	bl	80029ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	4620      	mov	r0, r4
 8002aee:	f7ff ff7e 	bl	80029ee <HAL_TIM_PWM_PulseFinishedCallback>
 8002af2:	e7ab      	b.n	8002a4c <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af4:	4620      	mov	r0, r4
 8002af6:	f7ff ff78 	bl	80029ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7ff ff77 	bl	80029ee <HAL_TIM_PWM_PulseFinishedCallback>
 8002b00:	e7ba      	b.n	8002a78 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	4620      	mov	r0, r4
 8002b04:	f7ff ff71 	bl	80029ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f7ff ff70 	bl	80029ee <HAL_TIM_PWM_PulseFinishedCallback>
 8002b0e:	e7c9      	b.n	8002aa4 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	f06f 0201 	mvn.w	r2, #1
 8002b16:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f7fe fd1f 	bl	800155c <HAL_TIM_PeriodElapsedCallback>
 8002b1e:	e7c9      	b.n	8002ab4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b26:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f000 f99a 	bl	8002e62 <HAL_TIMEx_BreakCallback>
 8002b2e:	e7c7      	b.n	8002ac0 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b36:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f7ff ff59 	bl	80029f0 <HAL_TIM_TriggerCallback>
 8002b3e:	e7c5      	b.n	8002acc <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b40:	6823      	ldr	r3, [r4, #0]
 8002b42:	f06f 0220 	mvn.w	r2, #32
 8002b46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f000 f989 	bl	8002e60 <HAL_TIMEx_CommutCallback>
}
 8002b4e:	e7c3      	b.n	8002ad8 <HAL_TIM_IRQHandler+0xe6>

08002b50 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002b50:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b52:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd0 <TIM_Base_SetConfig+0x80>)
 8002b54:	4290      	cmp	r0, r2
 8002b56:	d00a      	beq.n	8002b6e <TIM_Base_SetConfig+0x1e>
 8002b58:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002b5c:	d007      	beq.n	8002b6e <TIM_Base_SetConfig+0x1e>
 8002b5e:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002b62:	4290      	cmp	r0, r2
 8002b64:	d003      	beq.n	8002b6e <TIM_Base_SetConfig+0x1e>
 8002b66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b6a:	4290      	cmp	r0, r2
 8002b6c:	d103      	bne.n	8002b76 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002b72:	684a      	ldr	r2, [r1, #4]
 8002b74:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b76:	4a16      	ldr	r2, [pc, #88]	@ (8002bd0 <TIM_Base_SetConfig+0x80>)
 8002b78:	4290      	cmp	r0, r2
 8002b7a:	d00a      	beq.n	8002b92 <TIM_Base_SetConfig+0x42>
 8002b7c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002b80:	d007      	beq.n	8002b92 <TIM_Base_SetConfig+0x42>
 8002b82:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002b86:	4290      	cmp	r0, r2
 8002b88:	d003      	beq.n	8002b92 <TIM_Base_SetConfig+0x42>
 8002b8a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b8e:	4290      	cmp	r0, r2
 8002b90:	d103      	bne.n	8002b9a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b96:	68ca      	ldr	r2, [r1, #12]
 8002b98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b9e:	694a      	ldr	r2, [r1, #20]
 8002ba0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002ba2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba4:	688b      	ldr	r3, [r1, #8]
 8002ba6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002ba8:	680b      	ldr	r3, [r1, #0]
 8002baa:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bac:	4b08      	ldr	r3, [pc, #32]	@ (8002bd0 <TIM_Base_SetConfig+0x80>)
 8002bae:	4298      	cmp	r0, r3
 8002bb0:	d00a      	beq.n	8002bc8 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bb6:	6903      	ldr	r3, [r0, #16]
 8002bb8:	f013 0f01 	tst.w	r3, #1
 8002bbc:	d003      	beq.n	8002bc6 <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bbe:	6903      	ldr	r3, [r0, #16]
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6103      	str	r3, [r0, #16]
}
 8002bc6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc8:	690b      	ldr	r3, [r1, #16]
 8002bca:	6303      	str	r3, [r0, #48]	@ 0x30
 8002bcc:	e7f1      	b.n	8002bb2 <TIM_Base_SetConfig+0x62>
 8002bce:	bf00      	nop
 8002bd0:	40012c00 	.word	0x40012c00

08002bd4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002bd4:	b340      	cbz	r0, 8002c28 <HAL_TIM_PWM_Init+0x54>
{
 8002bd6:	b510      	push	{r4, lr}
 8002bd8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002bda:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002bde:	b1f3      	cbz	r3, 8002c1e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002be0:	2302      	movs	r3, #2
 8002be2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002be6:	4621      	mov	r1, r4
 8002be8:	f851 0b04 	ldr.w	r0, [r1], #4
 8002bec:	f7ff ffb0 	bl	8002b50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002bfa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002bfe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002c02:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c06:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c0e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002c12:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002c16:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002c1a:	2000      	movs	r0, #0
}
 8002c1c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002c1e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002c22:	f7ff fee1 	bl	80029e8 <HAL_TIM_PWM_MspInit>
 8002c26:	e7db      	b.n	8002be0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002c28:	2001      	movs	r0, #1
}
 8002c2a:	4770      	bx	lr

08002c2c <TIM_OC2_SetConfig>:
{
 8002c2c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8002c2e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c30:	6a02      	ldr	r2, [r0, #32]
 8002c32:	f022 0210 	bic.w	r2, r2, #16
 8002c36:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002c38:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002c3a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c3c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c40:	680d      	ldr	r5, [r1, #0]
 8002c42:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002c46:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c4a:	688d      	ldr	r5, [r1, #8]
 8002c4c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c50:	4d0c      	ldr	r5, [pc, #48]	@ (8002c84 <TIM_OC2_SetConfig+0x58>)
 8002c52:	42a8      	cmp	r0, r5
 8002c54:	d006      	beq.n	8002c64 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8002c56:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002c58:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002c5a:	684a      	ldr	r2, [r1, #4]
 8002c5c:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002c5e:	6203      	str	r3, [r0, #32]
}
 8002c60:	bc30      	pop	{r4, r5}
 8002c62:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c68:	68cd      	ldr	r5, [r1, #12]
 8002c6a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c72:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c76:	694d      	ldr	r5, [r1, #20]
 8002c78:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c7c:	698d      	ldr	r5, [r1, #24]
 8002c7e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002c82:	e7e8      	b.n	8002c56 <TIM_OC2_SetConfig+0x2a>
 8002c84:	40012c00 	.word	0x40012c00

08002c88 <HAL_TIM_PWM_ConfigChannel>:
{
 8002c88:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002c8a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d066      	beq.n	8002d60 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8002c92:	4604      	mov	r4, r0
 8002c94:	460d      	mov	r5, r1
 8002c96:	2301      	movs	r3, #1
 8002c98:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8002c9c:	2a0c      	cmp	r2, #12
 8002c9e:	d85a      	bhi.n	8002d56 <HAL_TIM_PWM_ConfigChannel+0xce>
 8002ca0:	e8df f002 	tbb	[pc, r2]
 8002ca4:	59595907 	.word	0x59595907
 8002ca8:	5959591b 	.word	0x5959591b
 8002cac:	59595930 	.word	0x59595930
 8002cb0:	44          	.byte	0x44
 8002cb1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cb2:	6800      	ldr	r0, [r0, #0]
 8002cb4:	f7ff fdee 	bl	8002894 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cb8:	6822      	ldr	r2, [r4, #0]
 8002cba:	6993      	ldr	r3, [r2, #24]
 8002cbc:	f043 0308 	orr.w	r3, r3, #8
 8002cc0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cc2:	6822      	ldr	r2, [r4, #0]
 8002cc4:	6993      	ldr	r3, [r2, #24]
 8002cc6:	f023 0304 	bic.w	r3, r3, #4
 8002cca:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ccc:	6822      	ldr	r2, [r4, #0]
 8002cce:	6993      	ldr	r3, [r2, #24]
 8002cd0:	6929      	ldr	r1, [r5, #16]
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2000      	movs	r0, #0
      break;
 8002cd8:	e03e      	b.n	8002d58 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cda:	6800      	ldr	r0, [r0, #0]
 8002cdc:	f7ff ffa6 	bl	8002c2c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ce0:	6822      	ldr	r2, [r4, #0]
 8002ce2:	6993      	ldr	r3, [r2, #24]
 8002ce4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ce8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cea:	6822      	ldr	r2, [r4, #0]
 8002cec:	6993      	ldr	r3, [r2, #24]
 8002cee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cf2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cf4:	6822      	ldr	r2, [r4, #0]
 8002cf6:	6993      	ldr	r3, [r2, #24]
 8002cf8:	6929      	ldr	r1, [r5, #16]
 8002cfa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002cfe:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002d00:	2000      	movs	r0, #0
      break;
 8002d02:	e029      	b.n	8002d58 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d04:	6800      	ldr	r0, [r0, #0]
 8002d06:	f7ff fdef 	bl	80028e8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d0a:	6822      	ldr	r2, [r4, #0]
 8002d0c:	69d3      	ldr	r3, [r2, #28]
 8002d0e:	f043 0308 	orr.w	r3, r3, #8
 8002d12:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d14:	6822      	ldr	r2, [r4, #0]
 8002d16:	69d3      	ldr	r3, [r2, #28]
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d1e:	6822      	ldr	r2, [r4, #0]
 8002d20:	69d3      	ldr	r3, [r2, #28]
 8002d22:	6929      	ldr	r1, [r5, #16]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002d28:	2000      	movs	r0, #0
      break;
 8002d2a:	e015      	b.n	8002d58 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d2c:	6800      	ldr	r0, [r0, #0]
 8002d2e:	f7ff fe09 	bl	8002944 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d32:	6822      	ldr	r2, [r4, #0]
 8002d34:	69d3      	ldr	r3, [r2, #28]
 8002d36:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d3a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d3c:	6822      	ldr	r2, [r4, #0]
 8002d3e:	69d3      	ldr	r3, [r2, #28]
 8002d40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d44:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d46:	6822      	ldr	r2, [r4, #0]
 8002d48:	69d3      	ldr	r3, [r2, #28]
 8002d4a:	6929      	ldr	r1, [r5, #16]
 8002d4c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002d50:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2000      	movs	r0, #0
      break;
 8002d54:	e000      	b.n	8002d58 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8002d56:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002d5e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002d60:	2002      	movs	r0, #2
 8002d62:	e7fc      	b.n	8002d5e <HAL_TIM_PWM_ConfigChannel+0xd6>

08002d64 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d64:	f001 011f 	and.w	r1, r1, #31
 8002d68:	f04f 0c01 	mov.w	ip, #1
 8002d6c:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d70:	6a03      	ldr	r3, [r0, #32]
 8002d72:	ea23 030c 	bic.w	r3, r3, ip
 8002d76:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d78:	6a03      	ldr	r3, [r0, #32]
 8002d7a:	408a      	lsls	r2, r1
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	6203      	str	r3, [r0, #32]
}
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_TIM_PWM_Start>:
{
 8002d84:	b510      	push	{r4, lr}
 8002d86:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d88:	4608      	mov	r0, r1
 8002d8a:	bb51      	cbnz	r1, 8002de2 <HAL_TIM_PWM_Start+0x5e>
 8002d8c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	bf18      	it	ne
 8002d96:	2301      	movne	r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d15b      	bne.n	8002e54 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d139      	bne.n	8002e14 <HAL_TIM_PWM_Start+0x90>
 8002da0:	2302      	movs	r3, #2
 8002da2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002da6:	2201      	movs	r2, #1
 8002da8:	4601      	mov	r1, r0
 8002daa:	6820      	ldr	r0, [r4, #0]
 8002dac:	f7ff ffda 	bl	8002d64 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	4a2a      	ldr	r2, [pc, #168]	@ (8002e5c <HAL_TIM_PWM_Start+0xd8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d03d      	beq.n	8002e34 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	4a28      	ldr	r2, [pc, #160]	@ (8002e5c <HAL_TIM_PWM_Start+0xd8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d03e      	beq.n	8002e3e <HAL_TIM_PWM_Start+0xba>
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc4:	d03b      	beq.n	8002e3e <HAL_TIM_PWM_Start+0xba>
 8002dc6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d037      	beq.n	8002e3e <HAL_TIM_PWM_Start+0xba>
 8002dce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d033      	beq.n	8002e3e <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	f042 0201 	orr.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002dde:	2000      	movs	r0, #0
 8002de0:	e039      	b.n	8002e56 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002de2:	2904      	cmp	r1, #4
 8002de4:	d008      	beq.n	8002df8 <HAL_TIM_PWM_Start+0x74>
 8002de6:	2908      	cmp	r1, #8
 8002de8:	d00d      	beq.n	8002e06 <HAL_TIM_PWM_Start+0x82>
 8002dea:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	bf18      	it	ne
 8002df4:	2301      	movne	r3, #1
 8002df6:	e7cf      	b.n	8002d98 <HAL_TIM_PWM_Start+0x14>
 8002df8:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	bf18      	it	ne
 8002e02:	2301      	movne	r3, #1
 8002e04:	e7c8      	b.n	8002d98 <HAL_TIM_PWM_Start+0x14>
 8002e06:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	bf18      	it	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	e7c1      	b.n	8002d98 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e14:	2804      	cmp	r0, #4
 8002e16:	d005      	beq.n	8002e24 <HAL_TIM_PWM_Start+0xa0>
 8002e18:	2808      	cmp	r0, #8
 8002e1a:	d007      	beq.n	8002e2c <HAL_TIM_PWM_Start+0xa8>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8002e22:	e7c0      	b.n	8002da6 <HAL_TIM_PWM_Start+0x22>
 8002e24:	2302      	movs	r3, #2
 8002e26:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002e2a:	e7bc      	b.n	8002da6 <HAL_TIM_PWM_Start+0x22>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002e32:	e7b8      	b.n	8002da6 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8002e34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e3a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002e3c:	e7bc      	b.n	8002db8 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e44:	2a06      	cmp	r2, #6
 8002e46:	d007      	beq.n	8002e58 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002e50:	2000      	movs	r0, #0
 8002e52:	e000      	b.n	8002e56 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8002e54:	2001      	movs	r0, #1
}
 8002e56:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8002e58:	2000      	movs	r0, #0
 8002e5a:	e7fc      	b.n	8002e56 <HAL_TIM_PWM_Start+0xd2>
 8002e5c:	40012c00 	.word	0x40012c00

08002e60 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e60:	4770      	bx	lr

08002e62 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e62:	4770      	bx	lr

08002e64 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e64:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	f102 030c 	add.w	r3, r2, #12
 8002e6a:	e853 3f00 	ldrex	r3, [r3]
 8002e6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e72:	320c      	adds	r2, #12
 8002e74:	e842 3100 	strex	r1, r3, [r2]
 8002e78:	2900      	cmp	r1, #0
 8002e7a:	d1f3      	bne.n	8002e64 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e7c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7e:	f102 0314 	add.w	r3, r2, #20
 8002e82:	e853 3f00 	ldrex	r3, [r3]
 8002e86:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8a:	3214      	adds	r2, #20
 8002e8c:	e842 3100 	strex	r1, r3, [r2]
 8002e90:	2900      	cmp	r1, #0
 8002e92:	d1f3      	bne.n	8002e7c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e94:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d005      	beq.n	8002ea6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002ea4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	f102 030c 	add.w	r3, r2, #12
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb4:	320c      	adds	r2, #12
 8002eb6:	e842 3100 	strex	r1, r3, [r2]
 8002eba:	2900      	cmp	r1, #0
 8002ebc:	d1f3      	bne.n	8002ea6 <UART_EndRxTransfer+0x42>
 8002ebe:	e7ec      	b.n	8002e9a <UART_EndRxTransfer+0x36>

08002ec0 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ec0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b21      	cmp	r3, #33	@ 0x21
 8002ec8:	d001      	beq.n	8002ece <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002eca:	2002      	movs	r0, #2
  }
}
 8002ecc:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ece:	6883      	ldr	r3, [r0, #8]
 8002ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed4:	d017      	beq.n	8002f06 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ed6:	6a03      	ldr	r3, [r0, #32]
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	6202      	str	r2, [r0, #32]
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	6803      	ldr	r3, [r0, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002ee2:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8002eec:	b94b      	cbnz	r3, 8002f02 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002eee:	6802      	ldr	r2, [r0, #0]
 8002ef0:	68d3      	ldr	r3, [r2, #12]
 8002ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ef6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ef8:	6802      	ldr	r2, [r0, #0]
 8002efa:	68d3      	ldr	r3, [r2, #12]
 8002efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f00:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002f02:	2000      	movs	r0, #0
 8002f04:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f06:	6903      	ldr	r3, [r0, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e4      	bne.n	8002ed6 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f0c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	6802      	ldr	r2, [r0, #0]
 8002f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f16:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8002f18:	6a03      	ldr	r3, [r0, #32]
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	6203      	str	r3, [r0, #32]
 8002f1e:	e7e0      	b.n	8002ee2 <UART_Transmit_IT+0x22>

08002f20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f20:	b510      	push	{r4, lr}
 8002f22:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f24:	6802      	ldr	r2, [r0, #0]
 8002f26:	6913      	ldr	r3, [r2, #16]
 8002f28:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f2c:	68c1      	ldr	r1, [r0, #12]
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f32:	6883      	ldr	r3, [r0, #8]
 8002f34:	6902      	ldr	r2, [r0, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	6942      	ldr	r2, [r0, #20]
 8002f3a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002f3c:	6801      	ldr	r1, [r0, #0]
 8002f3e:	68cb      	ldr	r3, [r1, #12]
 8002f40:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002f44:	f023 030c 	bic.w	r3, r3, #12
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f4c:	6802      	ldr	r2, [r0, #0]
 8002f4e:	6953      	ldr	r3, [r2, #20]
 8002f50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f54:	6981      	ldr	r1, [r0, #24]
 8002f56:	430b      	orrs	r3, r1
 8002f58:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8002f5a:	6802      	ldr	r2, [r0, #0]
 8002f5c:	4b13      	ldr	r3, [pc, #76]	@ (8002fac <UART_SetConfig+0x8c>)
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d020      	beq.n	8002fa4 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f62:	f7ff fc77 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 8002f66:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002f6c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002f70:	6863      	ldr	r3, [r4, #4]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f78:	480d      	ldr	r0, [pc, #52]	@ (8002fb0 <UART_SetConfig+0x90>)
 8002f7a:	fba0 3102 	umull	r3, r1, r0, r2
 8002f7e:	0949      	lsrs	r1, r1, #5
 8002f80:	2364      	movs	r3, #100	@ 0x64
 8002f82:	fb03 2311 	mls	r3, r3, r1, r2
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	3332      	adds	r3, #50	@ 0x32
 8002f8a:	fba0 0303 	umull	r0, r3, r0, r3
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f94:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	6821      	ldr	r1, [r4, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fa2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fa4:	f7ff fc66 	bl	8002874 <HAL_RCC_GetPCLK2Freq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	e7dd      	b.n	8002f68 <UART_SetConfig+0x48>
 8002fac:	40013800 	.word	0x40013800
 8002fb0:	51eb851f 	.word	0x51eb851f

08002fb4 <UART_WaitOnFlagUntilTimeout>:
{
 8002fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	4605      	mov	r5, r0
 8002fbc:	460e      	mov	r6, r1
 8002fbe:	4617      	mov	r7, r2
 8002fc0:	4699      	mov	r9, r3
 8002fc2:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc6:	682b      	ldr	r3, [r5, #0]
 8002fc8:	681c      	ldr	r4, [r3, #0]
 8002fca:	ea36 0404 	bics.w	r4, r6, r4
 8002fce:	bf0c      	ite	eq
 8002fd0:	2401      	moveq	r4, #1
 8002fd2:	2400      	movne	r4, #0
 8002fd4:	42bc      	cmp	r4, r7
 8002fd6:	d128      	bne.n	800302a <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002fd8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002fdc:	d0f3      	beq.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fde:	f7fe fd7b 	bl	8001ad8 <HAL_GetTick>
 8002fe2:	eba0 0009 	sub.w	r0, r0, r9
 8002fe6:	4540      	cmp	r0, r8
 8002fe8:	d823      	bhi.n	8003032 <UART_WaitOnFlagUntilTimeout+0x7e>
 8002fea:	f1b8 0f00 	cmp.w	r8, #0
 8002fee:	d022      	beq.n	8003036 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	f012 0f04 	tst.w	r2, #4
 8002ff8:	d0e5      	beq.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0x12>
 8002ffa:	2e80      	cmp	r6, #128	@ 0x80
 8002ffc:	d0e3      	beq.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0x12>
 8002ffe:	2e40      	cmp	r6, #64	@ 0x40
 8003000:	d0e1      	beq.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	f012 0f08 	tst.w	r2, #8
 8003008:	d0dd      	beq.n	8002fc6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800300a:	2400      	movs	r4, #0
 800300c:	9401      	str	r4, [sp, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	9201      	str	r2, [sp, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8003018:	4628      	mov	r0, r5
 800301a:	f7ff ff23 	bl	8002e64 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800301e:	2308      	movs	r3, #8
 8003020:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8003022:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8003026:	2001      	movs	r0, #1
 8003028:	e000      	b.n	800302c <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800302a:	2000      	movs	r0, #0
}
 800302c:	b003      	add	sp, #12
 800302e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8003032:	2003      	movs	r0, #3
 8003034:	e7fa      	b.n	800302c <UART_WaitOnFlagUntilTimeout+0x78>
 8003036:	2003      	movs	r0, #3
 8003038:	e7f8      	b.n	800302c <UART_WaitOnFlagUntilTimeout+0x78>

0800303a <HAL_UART_Init>:
  if (huart == NULL)
 800303a:	b360      	cbz	r0, 8003096 <HAL_UART_Init+0x5c>
{
 800303c:	b510      	push	{r4, lr}
 800303e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003040:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003044:	b313      	cbz	r3, 800308c <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8003046:	2324      	movs	r3, #36	@ 0x24
 8003048:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800304c:	6822      	ldr	r2, [r4, #0]
 800304e:	68d3      	ldr	r3, [r2, #12]
 8003050:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003054:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003056:	4620      	mov	r0, r4
 8003058:	f7ff ff62 	bl	8002f20 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305c:	6822      	ldr	r2, [r4, #0]
 800305e:	6913      	ldr	r3, [r2, #16]
 8003060:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003064:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003066:	6822      	ldr	r2, [r4, #0]
 8003068:	6953      	ldr	r3, [r2, #20]
 800306a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800306e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003070:	6822      	ldr	r2, [r4, #0]
 8003072:	68d3      	ldr	r3, [r2, #12]
 8003074:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003078:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307a:	2000      	movs	r0, #0
 800307c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800307e:	2320      	movs	r3, #32
 8003080:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003088:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800308a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800308c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003090:	f7ff f898 	bl	80021c4 <HAL_UART_MspInit>
 8003094:	e7d7      	b.n	8003046 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003096:	2001      	movs	r0, #1
}
 8003098:	4770      	bx	lr

0800309a <HAL_UART_Transmit>:
{
 800309a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80030a2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d156      	bne.n	800315a <HAL_UART_Transmit+0xc0>
 80030ac:	4604      	mov	r4, r0
 80030ae:	460d      	mov	r5, r1
 80030b0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80030b2:	2900      	cmp	r1, #0
 80030b4:	d055      	beq.n	8003162 <HAL_UART_Transmit+0xc8>
 80030b6:	b90a      	cbnz	r2, 80030bc <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80030b8:	2001      	movs	r0, #1
 80030ba:	e04f      	b.n	800315c <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030bc:	2300      	movs	r3, #0
 80030be:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030c0:	2321      	movs	r3, #33	@ 0x21
 80030c2:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80030c6:	f7fe fd07 	bl	8001ad8 <HAL_GetTick>
 80030ca:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80030cc:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030d0:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d4:	68a3      	ldr	r3, [r4, #8]
 80030d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030da:	d002      	beq.n	80030e2 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 80030dc:	f04f 0800 	mov.w	r8, #0
 80030e0:	e014      	b.n	800310c <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e2:	6923      	ldr	r3, [r4, #16]
 80030e4:	b32b      	cbz	r3, 8003132 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 80030e6:	f04f 0800 	mov.w	r8, #0
 80030ea:	e00f      	b.n	800310c <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 80030ec:	2320      	movs	r3, #32
 80030ee:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80030f2:	2003      	movs	r0, #3
 80030f4:	e032      	b.n	800315c <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030f6:	f838 3b02 	ldrh.w	r3, [r8], #2
 80030fa:	6822      	ldr	r2, [r4, #0]
 80030fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003100:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003102:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003104:	b292      	uxth	r2, r2
 8003106:	3a01      	subs	r2, #1
 8003108:	b292      	uxth	r2, r2
 800310a:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800310c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800310e:	b29b      	uxth	r3, r3
 8003110:	b193      	cbz	r3, 8003138 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003112:	9600      	str	r6, [sp, #0]
 8003114:	463b      	mov	r3, r7
 8003116:	2200      	movs	r2, #0
 8003118:	2180      	movs	r1, #128	@ 0x80
 800311a:	4620      	mov	r0, r4
 800311c:	f7ff ff4a 	bl	8002fb4 <UART_WaitOnFlagUntilTimeout>
 8003120:	2800      	cmp	r0, #0
 8003122:	d1e3      	bne.n	80030ec <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8003124:	2d00      	cmp	r5, #0
 8003126:	d0e6      	beq.n	80030f6 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003128:	f815 2b01 	ldrb.w	r2, [r5], #1
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003130:	e7e7      	b.n	8003102 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8003132:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003134:	2500      	movs	r5, #0
 8003136:	e7e9      	b.n	800310c <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003138:	9600      	str	r6, [sp, #0]
 800313a:	463b      	mov	r3, r7
 800313c:	2200      	movs	r2, #0
 800313e:	2140      	movs	r1, #64	@ 0x40
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff ff37 	bl	8002fb4 <UART_WaitOnFlagUntilTimeout>
 8003146:	b918      	cbnz	r0, 8003150 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8003148:	2320      	movs	r3, #32
 800314a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800314e:	e005      	b.n	800315c <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8003150:	2320      	movs	r3, #32
 8003152:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8003156:	2003      	movs	r0, #3
 8003158:	e000      	b.n	800315c <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800315a:	2002      	movs	r0, #2
}
 800315c:	b002      	add	sp, #8
 800315e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003162:	2001      	movs	r0, #1
 8003164:	e7fa      	b.n	800315c <HAL_UART_Transmit+0xc2>

08003166 <HAL_UART_TxCpltCallback>:
}
 8003166:	4770      	bx	lr

08003168 <UART_EndTransmit_IT>:
{
 8003168:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800316a:	6801      	ldr	r1, [r0, #0]
 800316c:	68ca      	ldr	r2, [r1, #12]
 800316e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003172:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003174:	2220      	movs	r2, #32
 8003176:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 800317a:	f7ff fff4 	bl	8003166 <HAL_UART_TxCpltCallback>
}
 800317e:	2000      	movs	r0, #0
 8003180:	bd08      	pop	{r3, pc}

08003182 <HAL_UART_ErrorCallback>:
}
 8003182:	4770      	bx	lr

08003184 <UART_DMAAbortOnError>:
{
 8003184:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003186:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8003188:	2300      	movs	r3, #0
 800318a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800318c:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800318e:	f7ff fff8 	bl	8003182 <HAL_UART_ErrorCallback>
}
 8003192:	bd08      	pop	{r3, pc}

08003194 <HAL_UARTEx_RxEventCallback>:
}
 8003194:	4770      	bx	lr

08003196 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003196:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b22      	cmp	r3, #34	@ 0x22
 800319e:	d169      	bne.n	8003274 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a0:	6883      	ldr	r3, [r0, #8]
 80031a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031a6:	d04f      	beq.n	8003248 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031a8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ae:	d004      	beq.n	80031ba <UART_Receive_IT+0x24>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d156      	bne.n	8003262 <UART_Receive_IT+0xcc>
 80031b4:	6903      	ldr	r3, [r0, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d153      	bne.n	8003262 <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031ba:	6803      	ldr	r3, [r0, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80031c0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80031c2:	3301      	adds	r3, #1
 80031c4:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80031c6:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d151      	bne.n	8003278 <UART_Receive_IT+0xe2>
{
 80031d4:	b500      	push	{lr}
 80031d6:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031d8:	6802      	ldr	r2, [r0, #0]
 80031da:	68d3      	ldr	r3, [r2, #12]
 80031dc:	f023 0320 	bic.w	r3, r3, #32
 80031e0:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031e2:	6802      	ldr	r2, [r0, #0]
 80031e4:	68d3      	ldr	r3, [r2, #12]
 80031e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031ea:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031ec:	6802      	ldr	r2, [r0, #0]
 80031ee:	6953      	ldr	r3, [r2, #20]
 80031f0:	f023 0301 	bic.w	r3, r3, #1
 80031f4:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80031f6:	2320      	movs	r3, #32
 80031f8:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031fc:	2300      	movs	r3, #0
 80031fe:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003200:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003202:	2b01      	cmp	r3, #1
 8003204:	d133      	bne.n	800326e <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003206:	2300      	movs	r3, #0
 8003208:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800320a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	f102 030c 	add.w	r3, r2, #12
 8003210:	e853 3f00 	ldrex	r3, [r3]
 8003214:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003218:	320c      	adds	r2, #12
 800321a:	e842 3100 	strex	r1, r3, [r2]
 800321e:	2900      	cmp	r1, #0
 8003220:	d1f3      	bne.n	800320a <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003222:	6803      	ldr	r3, [r0, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	f012 0f10 	tst.w	r2, #16
 800322a:	d006      	beq.n	800323a <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800322c:	2200      	movs	r2, #0
 800322e:	9201      	str	r2, [sp, #4]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	9201      	str	r2, [sp, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	9301      	str	r3, [sp, #4]
 8003238:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800323a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800323c:	f7ff ffaa 	bl	8003194 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8003240:	2000      	movs	r0, #0
}
 8003242:	b003      	add	sp, #12
 8003244:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003248:	6902      	ldr	r2, [r0, #16]
 800324a:	2a00      	cmp	r2, #0
 800324c:	d1ac      	bne.n	80031a8 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800324e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003250:	6803      	ldr	r3, [r0, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003258:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800325a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800325c:	3302      	adds	r3, #2
 800325e:	6283      	str	r3, [r0, #40]	@ 0x28
 8003260:	e7b1      	b.n	80031c6 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003262:	6803      	ldr	r3, [r0, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800326a:	7013      	strb	r3, [r2, #0]
 800326c:	e7a8      	b.n	80031c0 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 800326e:	f7fe f9f5 	bl	800165c <HAL_UART_RxCpltCallback>
 8003272:	e7e5      	b.n	8003240 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8003274:	2002      	movs	r0, #2
 8003276:	4770      	bx	lr
    return HAL_OK;
 8003278:	2000      	movs	r0, #0
}
 800327a:	4770      	bx	lr

0800327c <HAL_UART_IRQHandler>:
{
 800327c:	b510      	push	{r4, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003282:	6802      	ldr	r2, [r0, #0]
 8003284:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003286:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003288:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 800328a:	f013 0f0f 	tst.w	r3, #15
 800328e:	d109      	bne.n	80032a4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003290:	f013 0f20 	tst.w	r3, #32
 8003294:	d00c      	beq.n	80032b0 <HAL_UART_IRQHandler+0x34>
 8003296:	f010 0f20 	tst.w	r0, #32
 800329a:	d009      	beq.n	80032b0 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 800329c:	4620      	mov	r0, r4
 800329e:	f7ff ff7a 	bl	8003196 <UART_Receive_IT>
      return;
 80032a2:	e016      	b.n	80032d2 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032a4:	f011 0101 	ands.w	r1, r1, #1
 80032a8:	d115      	bne.n	80032d6 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032aa:	f410 7f90 	tst.w	r0, #288	@ 0x120
 80032ae:	d112      	bne.n	80032d6 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80032b2:	2901      	cmp	r1, #1
 80032b4:	d079      	beq.n	80033aa <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032b6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80032ba:	d003      	beq.n	80032c4 <HAL_UART_IRQHandler+0x48>
 80032bc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80032c0:	f040 8113 	bne.w	80034ea <HAL_UART_IRQHandler+0x26e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032c4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80032c8:	d003      	beq.n	80032d2 <HAL_UART_IRQHandler+0x56>
 80032ca:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80032ce:	f040 8110 	bne.w	80034f2 <HAL_UART_IRQHandler+0x276>
}
 80032d2:	b002      	add	sp, #8
 80032d4:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032d6:	f013 0f01 	tst.w	r3, #1
 80032da:	d006      	beq.n	80032ea <HAL_UART_IRQHandler+0x6e>
 80032dc:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80032e0:	d003      	beq.n	80032ea <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032e2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032ea:	f013 0f04 	tst.w	r3, #4
 80032ee:	d004      	beq.n	80032fa <HAL_UART_IRQHandler+0x7e>
 80032f0:	b119      	cbz	r1, 80032fa <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032f2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80032f4:	f042 0202 	orr.w	r2, r2, #2
 80032f8:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032fa:	f013 0f02 	tst.w	r3, #2
 80032fe:	d004      	beq.n	800330a <HAL_UART_IRQHandler+0x8e>
 8003300:	b119      	cbz	r1, 800330a <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003302:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003304:	f042 0204 	orr.w	r2, r2, #4
 8003308:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800330a:	f013 0f08 	tst.w	r3, #8
 800330e:	d007      	beq.n	8003320 <HAL_UART_IRQHandler+0xa4>
 8003310:	f010 0f20 	tst.w	r0, #32
 8003314:	d100      	bne.n	8003318 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003316:	b119      	cbz	r1, 8003320 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003318:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800331a:	f042 0208 	orr.w	r2, r2, #8
 800331e:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003320:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003322:	2a00      	cmp	r2, #0
 8003324:	d0d5      	beq.n	80032d2 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003326:	f013 0f20 	tst.w	r3, #32
 800332a:	d002      	beq.n	8003332 <HAL_UART_IRQHandler+0xb6>
 800332c:	f010 0f20 	tst.w	r0, #32
 8003330:	d129      	bne.n	8003386 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800333a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800333c:	f012 0f08 	tst.w	r2, #8
 8003340:	d100      	bne.n	8003344 <HAL_UART_IRQHandler+0xc8>
 8003342:	b363      	cbz	r3, 800339e <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8003344:	4620      	mov	r0, r4
 8003346:	f7ff fd8d 	bl	8002e64 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003352:	d020      	beq.n	8003396 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003354:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	f102 0314 	add.w	r3, r2, #20
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003362:	3214      	adds	r2, #20
 8003364:	e842 3100 	strex	r1, r3, [r2]
 8003368:	2900      	cmp	r1, #0
 800336a:	d1f3      	bne.n	8003354 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 800336c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800336e:	b173      	cbz	r3, 800338e <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003370:	4a62      	ldr	r2, [pc, #392]	@ (80034fc <HAL_UART_IRQHandler+0x280>)
 8003372:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003374:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003376:	f7fe fd01 	bl	8001d7c <HAL_DMA_Abort_IT>
 800337a:	2800      	cmp	r0, #0
 800337c:	d0a9      	beq.n	80032d2 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800337e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003380:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003382:	4798      	blx	r3
 8003384:	e7a5      	b.n	80032d2 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8003386:	4620      	mov	r0, r4
 8003388:	f7ff ff05 	bl	8003196 <UART_Receive_IT>
 800338c:	e7d1      	b.n	8003332 <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 800338e:	4620      	mov	r0, r4
 8003390:	f7ff fef7 	bl	8003182 <HAL_UART_ErrorCallback>
 8003394:	e79d      	b.n	80032d2 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8003396:	4620      	mov	r0, r4
 8003398:	f7ff fef3 	bl	8003182 <HAL_UART_ErrorCallback>
 800339c:	e799      	b.n	80032d2 <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 800339e:	4620      	mov	r0, r4
 80033a0:	f7ff feef 	bl	8003182 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 80033a8:	e793      	b.n	80032d2 <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033aa:	f013 0f10 	tst.w	r3, #16
 80033ae:	d082      	beq.n	80032b6 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033b0:	f010 0f10 	tst.w	r0, #16
 80033b4:	f43f af7f 	beq.w	80032b6 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033b8:	2300      	movs	r3, #0
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	6813      	ldr	r3, [r2, #0]
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	6853      	ldr	r3, [r2, #4]
 80033c2:	9301      	str	r3, [sp, #4]
 80033c4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c6:	6953      	ldr	r3, [r2, #20]
 80033c8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80033cc:	d051      	beq.n	8003472 <HAL_UART_IRQHandler+0x1f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033ce:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80033d0:	6813      	ldr	r3, [r2, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f43f af7b 	beq.w	80032d2 <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033dc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80033de:	4299      	cmp	r1, r3
 80033e0:	f67f af77 	bls.w	80032d2 <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 80033e4:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033e6:	6993      	ldr	r3, [r2, #24]
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d037      	beq.n	800345c <HAL_UART_IRQHandler+0x1e0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ee:	f102 030c 	add.w	r3, r2, #12
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	320c      	adds	r2, #12
 80033fc:	e842 3100 	strex	r1, r3, [r2]
 8003400:	2900      	cmp	r1, #0
 8003402:	d1f3      	bne.n	80033ec <HAL_UART_IRQHandler+0x170>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003404:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003406:	f102 0314 	add.w	r3, r2, #20
 800340a:	e853 3f00 	ldrex	r3, [r3]
 800340e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003412:	3214      	adds	r2, #20
 8003414:	e842 3100 	strex	r1, r3, [r2]
 8003418:	2900      	cmp	r1, #0
 800341a:	d1f3      	bne.n	8003404 <HAL_UART_IRQHandler+0x188>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800341c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	f102 0314 	add.w	r3, r2, #20
 8003422:	e853 3f00 	ldrex	r3, [r3]
 8003426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	3214      	adds	r2, #20
 800342c:	e842 3100 	strex	r1, r3, [r2]
 8003430:	2900      	cmp	r1, #0
 8003432:	d1f3      	bne.n	800341c <HAL_UART_IRQHandler+0x1a0>
          huart->RxState = HAL_UART_STATE_READY;
 8003434:	2320      	movs	r3, #32
 8003436:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343a:	2300      	movs	r3, #0
 800343c:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	f102 030c 	add.w	r3, r2, #12
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	320c      	adds	r2, #12
 800344e:	e842 3100 	strex	r1, r3, [r2]
 8003452:	2900      	cmp	r1, #0
 8003454:	d1f3      	bne.n	800343e <HAL_UART_IRQHandler+0x1c2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003456:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003458:	f7fe fc6c 	bl	8001d34 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800345c:	2302      	movs	r3, #2
 800345e:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003460:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003462:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003464:	b29b      	uxth	r3, r3
 8003466:	1ac9      	subs	r1, r1, r3
 8003468:	b289      	uxth	r1, r1
 800346a:	4620      	mov	r0, r4
 800346c:	f7ff fe92 	bl	8003194 <HAL_UARTEx_RxEventCallback>
      return;
 8003470:	e72f      	b.n	80032d2 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003472:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003474:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003476:	b29b      	uxth	r3, r3
 8003478:	1ac9      	subs	r1, r1, r3
 800347a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800347c:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	f43f af26 	beq.w	80032d2 <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8003486:	2900      	cmp	r1, #0
 8003488:	f43f af23 	beq.w	80032d2 <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800348c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	f102 030c 	add.w	r3, r2, #12
 8003492:	e853 3f00 	ldrex	r3, [r3]
 8003496:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349a:	320c      	adds	r2, #12
 800349c:	e842 3000 	strex	r0, r3, [r2]
 80034a0:	2800      	cmp	r0, #0
 80034a2:	d1f3      	bne.n	800348c <HAL_UART_IRQHandler+0x210>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	f102 0314 	add.w	r3, r2, #20
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	3214      	adds	r2, #20
 80034b4:	e842 3000 	strex	r0, r3, [r2]
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d1f3      	bne.n	80034a4 <HAL_UART_IRQHandler+0x228>
        huart->RxState = HAL_UART_STATE_READY;
 80034bc:	2320      	movs	r3, #32
 80034be:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c2:	2300      	movs	r3, #0
 80034c4:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	f102 030c 	add.w	r3, r2, #12
 80034cc:	e853 3f00 	ldrex	r3, [r3]
 80034d0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	320c      	adds	r2, #12
 80034d6:	e842 3000 	strex	r0, r3, [r2]
 80034da:	2800      	cmp	r0, #0
 80034dc:	d1f3      	bne.n	80034c6 <HAL_UART_IRQHandler+0x24a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034de:	2302      	movs	r3, #2
 80034e0:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7ff fe56 	bl	8003194 <HAL_UARTEx_RxEventCallback>
      return;
 80034e8:	e6f3      	b.n	80032d2 <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 80034ea:	4620      	mov	r0, r4
 80034ec:	f7ff fce8 	bl	8002ec0 <UART_Transmit_IT>
    return;
 80034f0:	e6ef      	b.n	80032d2 <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 80034f2:	4620      	mov	r0, r4
 80034f4:	f7ff fe38 	bl	8003168 <UART_EndTransmit_IT>
    return;
 80034f8:	e6eb      	b.n	80032d2 <HAL_UART_IRQHandler+0x56>
 80034fa:	bf00      	nop
 80034fc:	08003185 	.word	0x08003185

08003500 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 8003500:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003502:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003504:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003506:	2300      	movs	r3, #0
 8003508:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800350a:	2322      	movs	r3, #34	@ 0x22
 800350c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003510:	6903      	ldr	r3, [r0, #16]
 8003512:	b123      	cbz	r3, 800351e <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003514:	6802      	ldr	r2, [r0, #0]
 8003516:	68d3      	ldr	r3, [r2, #12]
 8003518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800351c:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800351e:	6802      	ldr	r2, [r0, #0]
 8003520:	6953      	ldr	r3, [r2, #20]
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003528:	6802      	ldr	r2, [r0, #0]
 800352a:	68d3      	ldr	r3, [r2, #12]
 800352c:	f043 0320 	orr.w	r3, r3, #32
 8003530:	60d3      	str	r3, [r2, #12]
}
 8003532:	2000      	movs	r0, #0
 8003534:	4770      	bx	lr

08003536 <HAL_UART_Receive_IT>:
{
 8003536:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003538:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	d108      	bne.n	8003554 <HAL_UART_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8003542:	b149      	cbz	r1, 8003558 <HAL_UART_Receive_IT+0x22>
 8003544:	b90a      	cbnz	r2, 800354a <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 8003546:	2001      	movs	r0, #1
}
 8003548:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354a:	2300      	movs	r3, #0
 800354c:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 800354e:	f7ff ffd7 	bl	8003500 <UART_Start_Receive_IT>
 8003552:	e7f9      	b.n	8003548 <HAL_UART_Receive_IT+0x12>
    return HAL_BUSY;
 8003554:	2002      	movs	r0, #2
 8003556:	e7f7      	b.n	8003548 <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 8003558:	2001      	movs	r0, #1
 800355a:	e7f5      	b.n	8003548 <HAL_UART_Receive_IT+0x12>

0800355c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800355c:	e7fe      	b.n	800355c <NMI_Handler>

0800355e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800355e:	e7fe      	b.n	800355e <HardFault_Handler>

08003560 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003560:	e7fe      	b.n	8003560 <MemManage_Handler>

08003562 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003562:	e7fe      	b.n	8003562 <BusFault_Handler>

08003564 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003564:	e7fe      	b.n	8003564 <UsageFault_Handler>

08003566 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003566:	4770      	bx	lr

08003568 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003568:	4770      	bx	lr

0800356a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800356a:	4770      	bx	lr

0800356c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800356c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800356e:	4802      	ldr	r0, [pc, #8]	@ (8003578 <USART2_IRQHandler+0xc>)
 8003570:	f7ff fe84 	bl	800327c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003574:	bd08      	pop	{r3, pc}
 8003576:	bf00      	nop
 8003578:	2000246c 	.word	0x2000246c

0800357c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800357c:	4770      	bx	lr
	...

08003580 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003580:	f7ff fffc 	bl	800357c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003584:	480b      	ldr	r0, [pc, #44]	@ (80035b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003586:	490c      	ldr	r1, [pc, #48]	@ (80035b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003588:	4a0c      	ldr	r2, [pc, #48]	@ (80035bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800358a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800358c:	e002      	b.n	8003594 <LoopCopyDataInit>

0800358e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800358e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003592:	3304      	adds	r3, #4

08003594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003598:	d3f9      	bcc.n	800358e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800359a:	4a09      	ldr	r2, [pc, #36]	@ (80035c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800359c:	4c09      	ldr	r4, [pc, #36]	@ (80035c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800359e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035a0:	e001      	b.n	80035a6 <LoopFillZerobss>

080035a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035a4:	3204      	adds	r2, #4

080035a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035a8:	d3fb      	bcc.n	80035a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035aa:	f000 f817 	bl	80035dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035ae:	f7fe f8b9 	bl	8001724 <main>
  bx lr
 80035b2:	4770      	bx	lr
  ldr r0, =_sdata
 80035b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035b8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80035bc:	08003778 	.word	0x08003778
  ldr r2, =_sbss
 80035c0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80035c4:	200024b8 	.word	0x200024b8

080035c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035c8:	e7fe      	b.n	80035c8 <ADC1_2_IRQHandler>

080035ca <memset>:
 80035ca:	4603      	mov	r3, r0
 80035cc:	4402      	add	r2, r0
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d100      	bne.n	80035d4 <memset+0xa>
 80035d2:	4770      	bx	lr
 80035d4:	f803 1b01 	strb.w	r1, [r3], #1
 80035d8:	e7f9      	b.n	80035ce <memset+0x4>
	...

080035dc <__libc_init_array>:
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	2600      	movs	r6, #0
 80035e0:	4d0c      	ldr	r5, [pc, #48]	@ (8003614 <__libc_init_array+0x38>)
 80035e2:	4c0d      	ldr	r4, [pc, #52]	@ (8003618 <__libc_init_array+0x3c>)
 80035e4:	1b64      	subs	r4, r4, r5
 80035e6:	10a4      	asrs	r4, r4, #2
 80035e8:	42a6      	cmp	r6, r4
 80035ea:	d109      	bne.n	8003600 <__libc_init_array+0x24>
 80035ec:	f000 f81a 	bl	8003624 <_init>
 80035f0:	2600      	movs	r6, #0
 80035f2:	4d0a      	ldr	r5, [pc, #40]	@ (800361c <__libc_init_array+0x40>)
 80035f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003620 <__libc_init_array+0x44>)
 80035f6:	1b64      	subs	r4, r4, r5
 80035f8:	10a4      	asrs	r4, r4, #2
 80035fa:	42a6      	cmp	r6, r4
 80035fc:	d105      	bne.n	800360a <__libc_init_array+0x2e>
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
 8003600:	f855 3b04 	ldr.w	r3, [r5], #4
 8003604:	4798      	blx	r3
 8003606:	3601      	adds	r6, #1
 8003608:	e7ee      	b.n	80035e8 <__libc_init_array+0xc>
 800360a:	f855 3b04 	ldr.w	r3, [r5], #4
 800360e:	4798      	blx	r3
 8003610:	3601      	adds	r6, #1
 8003612:	e7f2      	b.n	80035fa <__libc_init_array+0x1e>
 8003614:	08003770 	.word	0x08003770
 8003618:	08003770 	.word	0x08003770
 800361c:	08003770 	.word	0x08003770
 8003620:	08003774 	.word	0x08003774

08003624 <_init>:
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003626:	bf00      	nop
 8003628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362a:	bc08      	pop	{r3}
 800362c:	469e      	mov	lr, r3
 800362e:	4770      	bx	lr

08003630 <_fini>:
 8003630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003632:	bf00      	nop
 8003634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003636:	bc08      	pop	{r3}
 8003638:	469e      	mov	lr, r3
 800363a:	4770      	bx	lr
